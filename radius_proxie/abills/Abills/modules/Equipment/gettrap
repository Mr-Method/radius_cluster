#!/usr/bin/perl -w 

=head1 NAME

  Trap sensor

=cut

BEGIN {
  use FindBin '$Bin';
  our $libpath = $Bin . '/../';
  my $sql_type = 'mysql';
  unshift(@INC, $libpath . "Abills/$sql_type/", $libpath . '/lib/');
}

use strict;
use warnings;
no warnings qw(numeric);
use Abills::Base qw(parse_arguments int2byte ip2int int2ip load_pmodule2);

#use threads;
use Data::Dumper;
use Abills::Server;
use Log qw(log_add);
use Events;
use Admins;
use Abills::Filters qw(bin2hex _mac_former);

our (%conf, $DATE, $TIME, $var_dir);

load_pmodule2('Net::SNMPTrapd');
load_pmodule2('SNMP');
load_pmodule2('JSON');

if ($#ARGV < 0) {
  help();
  exit;
}

SNMP::initMib();
SNMP::addMibDirs($Bin . "/../Abills/MIBs/private", $Bin . "/../Abills/MIBs");
SNMP::addMibFiles(glob($Bin . "/../Abills/MIBs/private" . '/*'));

my $debug = 0;
do $Bin . '/config.pl';
my $Log = Log->new(undef, \%conf);

my $argv = parse_arguments(\@ARGV);

my $logs_dir = ($argv->{trapdir}) ? $argv->{trapdir} : $var_dir . "log/";
my $pid_dir = ($argv->{trapdir}) ? $argv->{trapdir} : $var_dir . "run/";

if (! -d $pid_dir) {
  print "Dir: $pid_dir not exists.";
  if(mkdir($pid_dir)) {
    print "$pid_dir created\n";
  }
}

$Log->{LOG_FILE} = "$logs_dir/traps.log";

if (!$argv->{LOG_FILE} && !defined($argv->{'start'})) {

  # $Log->{PRINT} = 1;
}

if (defined($argv->{DEBUG})) {
  print "Debug mode on\n";
  $debug = $argv->{DEBUG};
}
elsif (defined($argv->{help})) {
  print "Help:\n";
}

#Demonize section
if (defined($argv->{'start'}) && !defined($argv->{DEBUG})) {
  print "Start... debug: $debug\n";

  my $pid_file = daemonize(
    {
      PROGRAM_NAME => 'gettrap',
      LOG_DIR      => $pid_dir
    }
  );

  $Log->log_print('LOG_EMERG', '', "gettrap Daemonize... $pid_file");
}

#Stop daemon
elsif (defined($argv->{stop})) {
  stop_server($pid_dir . "/gettrap.pid");

  exit;
}
elsif (make_pid($pid_dir . "/gettrap.pid") == 1) {
  print "Already running PID: !\n";
  exit;
}

require Abills::SQL;
my $db = Abills::SQL->connect($conf{dbtype}, $conf{dbhost}, $conf{dbname}, $conf{dbuser}, $conf{dbpasswd});
my $Admin = Admins->new($db, \%conf);
$Admin->info($conf{SYSTEM_ADMIN_ID}, { IP => '127.0.0.1' });

require "Equipment.pm";
Equipment->import();

my $Equipment = Equipment->new($db, $Admin, \%conf);
my $Events = Events->new($db, $Admin, \%conf);

my $json_mac_n = $Equipment->snmp_tpl_list({ COLS_NAME => 1, SECTION => 'MAC_NOTIF', PARAMETERS => '_SHOW' });
my $params = $Equipment->trap_type_list( {
  COLS_NAME    => 1,
  NAME         => '_SHOW',
  TYPE         => '_SHOW',
  EVENT        => '_SHOW',
  COLOR        => '_SHOW',
  VARBIND      => '_SHOW',
} );
my %events;
my %conv;
foreach my $var (@$params){
	$events{$var->{name}} = $var->{color} if ( $var->{event} == 1 );
	$conv{$var->{varbind}} = 'hex' if ( $var->{varbind} );
}

my %mac_notif;
foreach my $key (@$json_mac_n) {
  if ($key->{parameters}) {
    my @var = JSON->new->decode($key->{parameters});
    foreach my $vr (@{ $var[0] }) {
      $mac_notif{ $vr->[0] } = [ $vr->[1], $vr->[2], $vr->[3] ];
    }
  }
}

#use constant THREADS_COUNT => 4;
my $bindip = $argv->{IP} || $conf{GETTRAP_IP} || '';
my $snmptrapd = Net::SNMPTrapd->new(Family => 'ipv4', LocalAddr => $bindip, LocalPort => 162, timeout => 3)
or die "Error creating SNMPTrapd listener: ", Net::SNMPTrapd->error;

#for my $i (1..(THREADS_COUNT - 1)) { threads->create(\&request_loop, $obj); }
#request_loop($obj);
if (defined($argv->{'start'}) || defined($argv->{DEBUG})) {
  request_loop();
}
else {
  help();
}

sub request_loop {
  while (1) {
    my $trap     = $snmptrapd->get_trap();
    my %varbinds = ();
    my %varb     = ();
    my $trapoid;

    if (!defined($trap)) {
      printf "$0: %s\n", Net::SNMPTrapd->error;
      exit 1;
    }
    elsif ($trap == 0) {
      next;
    }

    if (!defined($trap->process_trap())) {
      printf "$0: %s\n", Net::SNMPTrapd->error;
    }
    else {
      if ($debug >= 5) {
        print "IP:" . $trap->remoteaddr . "\n";
        print $trap->dump();
      }
      foreach my $element (@{ $trap->varbinds }) {
        my $k = each %$element;
        $varb{$k} = $element->{$k};
      }
      my $mcn_val;
      if (exists $mac_notif{ $varb{'1.3.6.1.6.3.1.1.4.1.0'} }) {
        my $oid = $mac_notif{ $varb{'1.3.6.1.6.3.1.1.4.1.0'} };
        while (my ($vr, $val) = each(%varb)) {
          if ($vr =~ /$oid->[0]/) {
            $mcn_val = mac_notif(
              {
                NAS_IP  => $trap->remoteaddr,
                VALUE   => $val,
                REGULAR => $oid->[2],
                TYPE    => $oid->[1],
              }
            );
          }
        }
      }
      else {
        while (my ($key, $value) = each(%varb)) {
          if ($SNMP::MIB{$key}{label} eq 'snmpTrapOID') {
            $varbinds{ $SNMP::MIB{$key}{label} } = $SNMP::MIB{$value}{label};
            $trapoid = $value;
          } elsif ( exists $conv{$SNMP::MIB{$key}{label}} ) {
            $varbinds{ $SNMP::MIB{$key}{label} } = _mac_former(bin2hex($value));
          } else {
            $varbinds{ $SNMP::MIB{$key}{label} } = ($mcn_val) ? $mcn_val : $value;
          }
        }
        my $json_text = JSON->new->utf8->canonical->allow_bignum->encode(\%varbinds);
        $Equipment->trap_add(
          {
            IP        => $trap->remoteaddr,
            EVENTNAME => $varbinds{snmpTrapOID},
            TRAPOID   => $trapoid,
            VARBINDS  => $json_text
          }
        );

        if ( exists ($events{$varbinds{snmpTrapOID}}) &&  $events{$varbinds{snmpTrapOID}} eq 'danger') {
          $Events->events_add(
            {
              MODULE   => "Equipment",
              COMMENTS => $trap->remoteaddr . " Events: $varbinds{snmpTrapOID}"
            }
          );
        }
      }
    }
  }

  return 1;
}

sub mac_notif {
 my ($attr) = @_;
 my %data;

 my $equip = $Equipment->_list({ COLS_NAME => 1, NAS_ID => '_SHOW', NAS_IP => $attr->{NAS_IP} });
 if ($equip->[0]->{nas_id}){
  my $mac;
  my $port;
  my $pvid;
  my $actions;
  if ($attr->{TYPE} =~ /hex/) {
    $mac =
    ($attr->{TYPE} eq 'hex-cisco')
    ? join(':', unpack("x3H2H2H2H2H2H2", $attr->{VALUE}))
    : join(':', unpack("x1H2H2H2H2H2H2", $attr->{VALUE}));
    $port =
    ($attr->{TYPE} eq 'hex-cisco')
    ? hex(unpack("x10 H2", $attr->{VALUE}))
    : hex(unpack("x8 H2",  $attr->{VALUE}));
    $actions = int unpack("x0 H2", $attr->{VALUE});
    $pvid = ($attr->{TYPE} eq 'hex-cisco') ? hex(unpack("x1H4", $attr->{VALUE})) : 0;
    %data = (
        NAS_ID => $equip->[0]->{nas_id},
        MAC    => $mac,
        PORT   => $port,
        VLAN   => $pvid,
    );
  }
  elsif ($attr->{TYPE} eq 'string') {

    #D-LINK DES-1210* Smart
    $attr->{VALUE} =~ /$attr->{REGULAR}/gi;
    ($actions, $port, $mac) = ($1, $2, $3);
    $mac =~ s/\./:/g;
    $pvid = 0;
    %data = (
      NAS_ID => $equip->[0]->{nas_id},
      MAC    => $mac,
      PORT   => $port,
      VLAN   => $pvid,
    );
  }
  else {

    #SNR,Q-TECH
    $attr->{VALUE} =~ /([a-z]*)\s[a-z]*:(\S+)/gi;
    my ($act,$all)  = ($1,$2);
    $actions = ( $act eq 'Added')? 1 : 0;
    my @string = split(/&/,$all);

    foreach my $str (@string) {
      ($pvid,$port,$mac) = split(/\+/,$str);
      $port =~ s/\S*\///g;
      $mac =~ s/-/:/g;
      %data = (
        NAS_ID => $equip->[0]->{nas_id},
        MAC    => $mac,
        PORT   => $port,
        VLAN   => $pvid,
      );
    }
  }
  
  if ($debug > 0) {
  	$Data::Dumper::Terse = 1;
  	print "MAC_NOTIF: " . Dumper \%data;
  }
  if ($actions == 1) {
    $data{DATETIME} = 1;
  }
  $Equipment->mac_notif_add({%data});

  my $value = "MAC $mac port $port Vlan $pvid";
  return $value;
 } else {
 	$Log->log_print('LOG_INFO', $attr->{NAS_IP}, "Unknown NAS. Trap: $attr->{VALUE}");
 }

}

sub help {

  print "ABillS snmp traps
  gettrap [Options]
 Options:
   log        - Log file for gettrap logs
   IP         - IP address for gettrap binding
   DEBUG      - debug mode 0..5

   start      - run as service
   stop       - stop gettrap service
   \n";

  return 1;
}
