#!/usr/bin/perl -w
=head1 NAME

 ZTE Configuration utility

=head2 EXAMLES

conf t
interface gpon-olt_1/1/2

show gpon onu uncfg gpon-olt_1/1/2

interface gpon-olt_1/1/2
  onu 2 type ZTE-F601 sn ZTExxxxxxxxx
  onu 2 profile  line ABILLS_PROFILE remote VLAN_1001

exit
interface gpon-onu_1/1/2:1
  switchport mode hybrid vport 1
  service-port 1 vport 1 user-vlan 1001 vlan 1001 queue-no 0
  port-location format ti vport 1
  port-location format ti sport 1
  dhcp-option82 enable vport 1
  dhcp-option82 enable sport 1
  ip dhcp snooping enable vport 1
  ip-service ip-source-guard enable sport 1

exit
exit


=cut


use strict;
BEGIN {
  use FindBin '$Bin';
  our $libpath = $Bin . '/../';
  unshift(@INC,
    $libpath . 'lib/',
    '/usr/abills/lib',
    $libpath . '/../'
  );
}

use Abills::Base qw(parse_arguments load_pmodule _bp);
require Equipment::Snmp_cmd;
my $debug = 1;
my $argv = parse_arguments(\@ARGV);

if ($argv->{DEBUG}) {
  $debug = $argv->{DEBUG};
}

if ($debug) {
  print "Eltex Registration\n";
}

if ($debug > 5) {
  print @ARGV;
  `echo "@ARGV" >> /tmp/register`;
}

if ($argv->{help}) {
  help();
  exit;
}

register_eltex();

#**********************************************************
=head2 register_eltex($attr) - List of cards


=cut
#**********************************************************
sub register_eltex {

  my $mac = $argv->{MAC} || q{};
  my $type = $argv->{TYPE} || '';

  if ($argv->{del_onu}) {
    $mac = $argv->{ONU_SNMP_ID};
    my $status_oid = ".1.3.6.1.4.1.35265.1.22.3.4.1.20." . $mac;

    my $result = snmp_set({
      SNMP_COMMUNITY => $argv->{SNMP_COMMUNITY},
      OID => [
        $status_oid, 'integer', 6,
      ],
#      DEBUG          => 3,
      VERSION        => '2',
    });

    return 1;
  }

  my $status_oid = ".1.3.6.1.4.1.35265.1.22.3.4.1.20." . $mac;
  my $port_oid = ".1.3.6.1.4.1.35265.1.22.3.4.1.3." . $mac;
  my $slot_oid = ".1.3.6.1.4.1.35265.1.22.3.4.1.4." . $mac;
  my $vlan_oid = ".1.3.6.1.4.1.35265.1.22.3.14.1.5." . $mac . ".1";
  my $service_oid = ".1.3.6.1.4.1.35265.1.22.3.14.1.4." . $mac . ".1";
  my $template_oid = ".1.3.6.1.4.1.35265.1.22.3.4.1.43." . $mac;

  if (($argv->{VLAN} ne '') && ($argv->{PORT} ne '')) {
    if ($type eq "gpon") {
      my @snmp_oids = ();
      push @snmp_oids, $status_oid, 'integer', "4";
      push @snmp_oids, $port_oid, 'gauge32', "$argv->{PORT}";
      push @snmp_oids, $slot_oid, 'gauge32', "$argv->{BRANCH}";

      my $result = snmp_set({
        SNMP_COMMUNITY => $argv->{SNMP_COMMUNITY},
        OID            => \@snmp_oids,
#        DEBUG          => 3,
        VERSION        => '2',
      });

      @snmp_oids = ();
      push @snmp_oids, $template_oid, 'gauge32', "1";
      push @snmp_oids, $service_oid, 'integer', "1";
      push @snmp_oids, $vlan_oid, 'integer', "$argv->{VLAN}";

      $result = snmp_set({
        SNMP_COMMUNITY => $argv->{SNMP_COMMUNITY},
        OID            => \@snmp_oids,
#        DEBUG          => 3,
        VERSION        => '2',
      });

      return 1;
    }
  }

  return 0;
}

#**********************************************************
=head2 unregister_eltex($attr)

  Arguments:
     $attr

  Returns:

=cut
#**********************************************************
sub unregister_eltex {
  my ($attr) = @_;

  print "okkk";
}

1;