#!perl
=head1 NAME

  Events

=cut
use strict;
use warnings 'FATAL' => 'all';

use Abills::Base qw/_bp/;
use Abills::Experimental;

our (
  %lang,
  $html,
  $admin, $db, %conf,
  %permissions,
  @DEFAULT_SEND_TYPES,
  @PRIORITY_SEND_TYPES
);


use Events;
our Events $Events = Events->new($db, $admin, \%conf);

require Events::Selects;

if ( $permissions{5} ) {
  require Events::Configure;
}

require Events::Profile;

#$Events->events_add({
#  MODULE   => "Equipment",
#  COMMENTS => "Hello",
#  EXTRA    => "index=23"
#});

#**********************************************************
=head2 events_events($attr)

  Arguments:
    $attr - hash_ref
      CLIENT_INTERFACE - client interface flaf

  Returns:
    JSON aray string

=cut
#**********************************************************
sub events_events {
  my ($attr) = @_;
  my @events_list = ();
  
  # Check if called from cross_modules via User Portal
  if ( $attr->{CLIENT_INTERFACE} ) {
    return '';
  }
  
  return events_notice({ EXPORT => 1 }) if ($FORM{AJAX});
  
  my $events_index = get_function_index('events_main') || 0;
  my $seen_index = get_function_index('events_seen_message') || 0;
  #  return 'no_index' if ($events_index == 0);
  
  my $events_list = $Events->events_list({
    STATE_ID         => 1,
    AID              => $admin->{AID},
    SHOW_ALL_COLUMNS => 1
  });
  
  eval {
    require JSON;
    JSON->import('to_json');
  };
  if ($@){
    return $@;
  }
  
  foreach my $event ( @{$events_list} ) {
    $event->{message} = translate_simple($event->{message} || '');
    $event->{subject} = $event->{title} || $event->{module} || '';
    $event->{subject} = translate_simple($event->{subject});
    $event->{extra} ||= "$SELF_URL?index=$events_index&chg=$event->{id}";
    push(@events_list, events_event_to_json($event, $seen_index));
  }
  
  return join(", ", @events_list);
}

#**********************************************************
=head2 events_event_to_json($message)

  Function to format message to JSON structure needed in AMessageChecker

  Arguments:
    $message - hash_ref of message from DB
      subject   - Subject of message
      message   - Text of message

    $msgs_index - index to see message

  Returns:
    JSON structure for message

=cut
#**********************************************************
sub events_event_to_json {
  my ($event, $seen_index) = @_;
  
  $event->{subject} ||= $lang{ERR_NO_TITLE};
  $event->{message} ||= $lang{ERR_NO_MESSAGE};
  
  return JSON::to_json({
    "TYPE"        => "EVENT",
    "TITLE"       => $event->{subject},
    "CREATED"     => $event->{created},
    "STATE"       => $event->{state_id},
    "TEXT"        => $event->{message},
    "EXTRA"       => $event->{extra},
    "MODULE"      => $event->{module},
    "GROUP_ID"    => $event->{group_id},
    "ID"          => $event->{id},
    "NOTICED_URL" => "?qindex=$seen_index&json=1&AJAX=1&header=2&ID=$event->{id}"
  });
}

#**********************************************************
=head2 events_notice() - Function return list of events

  Returns:
    JSON structure

=cut
#**********************************************************
sub events_notice {
  my ($attr) = @_;
  
  my $events_list = $Events->events_list({
    ID            => '_SHOW',
    TITLE         => '_SHOW',
    COMMENTS      => '_SHOW',
    MODULE        => '_SHOW',
    EXTRA         => '_SHOW',
    STATE_ID      => '_SHOW',
    PRIVACY_ID    => '_SHOW',
    PRIORITY_ID   => '_SHOW',
    CREATED       => '_SHOW',
    GROUP_ID      => '_SHOW',
    GROUP_NAME    => '_SHOW',
    PRIORITY_NAME => '_SHOW',
    STATE_NAME    => '_SHOW',
    AID           => $admin->{AID},
    COLS_NAMES    => 1,
    PAGE_ROWS     => 5,
    SORT          => 'e.created',
    # DESC          => 'DESC',
  });

  my $translated_events_list = translate_list_simple($events_list, 'comments', 'title', 'state_name', 'priority_name');

  if ($attr->{EXPORT}) {
    my @events_list = ();
    my $seen_index = get_function_index('events_seen_message') || 0;
    foreach my $event (@$translated_events_list) {
      push(@events_list, events_event_to_json($event, $seen_index));
    }
    return join(", ", @events_list);
  }
  
  print JSON::to_json({
      CAPTION => $lang{EVENTS},
      ID      => "EVENTS_LIST",
      DATA_1  => $translated_events_list,
      TOTAL   => $Events->{TOTAL},
    },
    { pretty => 1 });
  
  return 1;
}


1
