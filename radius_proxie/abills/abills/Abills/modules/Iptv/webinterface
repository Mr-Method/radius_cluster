#!perl

=head1 Iptv managment functions

  Iptv web functions

    Subscribes

  Error ID: 8xx

=cut


use strict;
use warnings FATAL => 'all';
use Iptv;
use Tariffs;
use Fees;
use Shedule;
use Encode;
use Abills::Filters;
use Abills::Base qw(in_array next_month days_in_month mk_unique_value
  convert tpl_parse show_log cmd);
use Abills::Defs;

our ($db,
  %conf,
  %lang,
  $html,
  %permissions,
  $ui,
  @MONTHES_LIT,
  @bool_vals,
  @state_colors,
  %FEES_METHODS
);

our Admins $admin;
our Users $users;

my $Tariffs = Tariffs->new( $db, \%conf, $admin );
our $Iptv = Iptv->new( $db, $admin, \%conf );
my $Fees = Fees->new( $db, $admin, \%conf );

#my $debug = 0;
my @status = ($lang{ENABLE}, $lang{DISABLED});

my @service_status = ("$lang{ENABLE}",
  $lang{DISABLE},
  $lang{NOT_ACTIVE},
  $lang{HOLD_UP},
  "$lang{DISABLE}: $lang{NON_PAYMENT}",
  $lang{ERR_SMALL_DEPOSIT},
  $lang{VIRUS_ALERT},
  $lang{REPAIR});

my %tp_list      = ();
my %channel_list = ();
our $Tv_service;

require Iptv::Users;
require Iptv::Subscribes;
require Iptv::Services;
require Iptv::User_portal;
require Iptv::Periodic;
require Iptv::Configure;

if($permissions{3}) {
  require Iptv::Reports;
}

#*******************************************************************
=head2 iptv_user_del($uid) - Delete user from module

  Arguments:
    $uid

=cut
#*******************************************************************
sub iptv_user_del{
  my ($uid) = @_;

  my $users_list = $Iptv->user_list({ UID => $uid, COLS_NAME => 1 });

  foreach my $line ( @$users_list ) {
    $Iptv->user_info($line->{id});
    iptv_account_action({
      %$Iptv,
      del => 1,
    });
  }

  $Iptv->{UID} = $uid;
  $Iptv->user_del( { UID => $uid } );

  return 0;
}

#**********************************************************
=head2 iptv_users_search($Iptv)

=cut
#**********************************************************
sub iptv_users_search{
  my %info = ();
  $info{GROUP_SEL} = sel_groups();
  $info{STATUS_SEL} = $html->form_select(
    'STATUS',
    {
      SELECTED     => $FORM{STATUS},
      SEL_ARRAY    => \@service_status,
      SEL_OPTIONS  => { '' => '' },
      ARRAY_NUM_ID => 1
    }
  );

  $info{SERVICE_SEL} = tv_services_sel({ %$Iptv, ALL => 1 });

  form_search(
    {
      SEARCH_FORM   => $html->tpl_show( _include( 'iptv_users_search', 'Iptv' ), { %info, %FORM }, { OUTPUT2RETURN => 1 } ),
      ADDRESS_FORM  => 1
    }
  );

  return 1;
}

#**********************************************************
=head2 iptv_users_list($attr)

  Arguments:
    $attr
      USER_ACCOUNT

=cut
#**********************************************************
sub iptv_users_list{
  my ($attr) = @_;

  if ( $FORM{TP_ID} ){
    $LIST_PARAMS{TP_ID} = $FORM{TP_ID};
    $pages_qs .= "&TP_ID=$FORM{TP_ID}";
  }
  if ( $FORM{search_form} ){
    iptv_users_search();
  }

  if ( !$FORM{UID} ){
    #print $html->letters_list( { pages_qs => $pages_qs } );
    if ( $FORM{letter} ){
      $LIST_PARAMS{LOGIN} = "$FORM{letter}*";
      $pages_qs .= "&letter=$FORM{letter}";
    }
  }

  my $status_bar = $html->button( $lang{ALL}, "index=$index$pages_qs", { class => "btn btn-default active" } );

  for ( my $i = 0; $i <= 2; $i++ ){
    my $name = $service_status[$i];
    my $active = '';
    my $qs = $pages_qs;
    if ( defined( $FORM{SERVICE_STATUS} ) && $FORM{SERVICE_STATUS} == $i && $FORM{SERVICE_STATUS} ne '' ){
      $LIST_PARAMS{SERVICE_STATUS} = $FORM{SERVICE_STATUS};
      $qs .= "&SERVICE_STATUS=$i";
      $active = 'active';
    }
    else{
      $qs =~ s/\&SERVICE_STATUS=\d//;
    }
    $status_bar .= $html->button( $name, "index=$index&SERVICE_STATUS=$i$qs", { class => "btn btn-default $active" } );
  }
  if ($FORM{SERVICES} && $FORM{SERVICES} =~ m/^[<>]?\d+$/) {
    my $search = $FORM{SERVICES};
    if ($search !~ m/^[<>]/) {
      $search = "=$search";
    }
    $LIST_PARAMS{SERVICE_COUNT}=$FORM{SERVICES};
    $LIST_PARAMS{GROUP_BY}="GROUP BY u.uid HAVING service_count $search";
  }

  my Abills::HTML $table;
  my $list;

  ($table, $list) = result_former({
    INPUT_DATA      => $Iptv,
    BASE_FIELDS     => 0,
    FUNCTION        => 'user_list',
    MAP             => (!$FORM{UID}) ? 1 : undef,
    MAP_FIELDS      => 'LOGIN,FIO,TP_NAME,ONLINE',
    MAP_FILTERS     => { id => 'search_link:form_users:UID' },
    DEFAULT_FIELDS  =>
      ($FORM{UID}) ? 'TP_NAME,CID,SERVICE_STATUS,IPTV_EXPIRE' : 'LOGIN,FIO,DEPOSIT,CREDIT,TP_NAME,SERVICE_STATUS,IPTV_EXPIRE',
    FUNCTION_FIELDS => ($FORM{UID}) ? 'change,del' : 'form_payments',
    EXT_TITLES      => {
      'id'             => 'ID',
      'port'           => $lang{PORT},
      'cid'            => 'CID',
      'filter_id'      => 'Filter ID',
      'tp_name'        => $lang{TARIF_PLAN},
      'service_status' => "IPTV $lang{STATUS}",
      'dvcrypt_id'     => 'DvCrypt',
      'iptv_expire'    => "$lang{TV} $lang{EXPIRE}",
      'subscribe_id'   => $lang{SUBSRIBES},
      'tv_service_name'=> $lang{SERVICE}
    },
    TABLE           => {
      width   => '100%',
      caption => ($FORM{UID}) ? "$lang{SERVICES}" : "$lang{TV} - $lang{USERS}",
      qs      => $pages_qs,
      header  => $status_bar,
      ID      => 'IPTV_USERS_LIST',
      EXPORT  => 1,
      IMPORT  => "$SELF_URL?get_index=iptv_user&import=1&header=2",
      MENU    =>
        "$lang{ADD}:index=" . (($FORM{UID}) ? "$index&UID=$FORM{UID}&add_form=1&new=1" : get_function_index( 'form_wizard' )) . ':add'
          . (($FORM{UID}) ? '' : ";$lang{SEARCH}:index=$index&search_form=1:search")        ,
      },
    MAKE_ROWS       => 1,
    MODULE          => 'Iptv',
    TOTAL           => ($attr->{USER_ACCOUNT} && $attr->{USER_ACCOUNT} < 5) ? 0 : 1,
    SHOW_MORE_THEN  => ($FORM{search}) ? 1 : 0
  });

  if ( _error_show( $Iptv ) ){
    return 0;
  }
  elsif ( $Iptv->{TOTAL} == 1 ){
    if ( $attr->{USER_ACCOUNT} ){
      return $table->show();
      #$FORM{chg}=$list->[0]->{id};
    }
    else{
      delete $FORM{LOGIN};
      delete $FORM{search};
      $ui = user_info( $list->[0]->{uid} );
      print $ui->{TABLE_SHOW};
      form_users( { USER_INFO => $ui } );
    }
  }
  elsif ( $attr->{USER_ACCOUNT} ) {
    return $table->show();
  }

  return 1;
}

#**********************************************************
=head2 iptv_ext_cmd($cmd, $attr) - Iptv cmd

=cut
#**********************************************************
sub iptv_ext_cmd{
  my ($cmd, $attr) = @_;

  if ( in_array( 'Dhcphosts', \@MODULES ) ){
    require Dhcphosts;
    Dhcphosts->import();
    my $Dhcphosts = Dhcphosts->new( $db, $admin, \%conf );
    my $hosts_list = $Dhcphosts->hosts_list({
      PORTS             => '!',
      LOGIN             => 'LOGIN',
      UID               => $attr->{UID},
      NAS_ID            => '>0',
      NAS_IP            => '!0.0.0.0',
      SHOW_NAS_MNG_INFO => 1,
      COLS_NAME         => 1
    });

    my $cmd_tpl = $cmd;
    my @cmd_arr = ();
    foreach my $host ( @{$hosts_list} ){
      $cmd = tpl_parse($cmd_tpl,
        {
          LOGIN        => $host->{login},
          NAS_IP       => $host->{mng_host_port} || $host->{nas_ip},
          NAS_ID       => $host->{nas},
          PORT_ID      => $host->{ports},
          IP           => $host->{ip},
          NAS_LOGIN    => $host->{mng_user},
          NAS_PASSWORD => $host->{mng_password},
        }
      );
      push @cmd_arr, $cmd;
    }
    if ( $#cmd_arr > -1 ){
      $cmd = join( ';', @cmd_arr );
    }
  }
  if ( !$attr->{ACTION} ){
    $attr->{ACTION} = 'up';
  }

  cmd($cmd, {
    PARAMS => { %{$attr} },
    DEBUG  => $conf{IPTV_CMD_DEBUG}
  });

  return 1;
}

#*******************************************************************
=head2 online_users() - Active users

=cut
#*******************************************************************
sub iptv_online{

  require Nas;
  Nas->import();
  my $Nas = Nas->new( $db, \%conf, $admin );

  my Iptv $sessions = $Iptv;

  my $message;

  if ( $FORM{ping} ){
    host_diagnostic($FORM{ping});
  }
  elsif ( $FORM{hangup} ){
    #my ($nas_id, $acct_session_id) = split( / /, $FORM{hangup}, 4 );
    my ($nas_id) = split( / /, $FORM{hangup}, 4 );
    $Nas->info( { NAS_ID => $nas_id } );
    if ( _error_show( $Nas, { MESSAGE => $lang{NAS} } ) ){
      return 0;
    }
    #my $nas_port_id = 0;
    iptv_account_action({ hangup => 1 });
  }
  elsif ( $FORM{zap} ){
    my ($nas_id, $acct_session_id, $nas_port_id) = split( / /, $FORM{zap}, 3 );
    $sessions->zap( $nas_id, $acct_session_id );
    if ( _error_show( $sessions, { MESSAGE => "ZAP SESSION" } ) ){
      return 0;
    }
    $Nas->info( { NAS_ID => $nas_id, SECRETKEY => $conf{secretkey} } );
    $message = "<table width=100%>
     <tr><th colspan=2 align=left>$lang{CLOSED}</th></tr>
     <tr><td>$lang{NAS}:</td><td>$Nas->{NAS_IP} / $Nas->{NAS_INDENTIFIER}</td></tr>
     <tr><td>$lang{PORT}:</td><td>$nas_port_id</td></tr>
     <tr><td>SESSION_ID:</td><td>$acct_session_id</td></tr>
     </table>\n";
    $sessions->online(
      {
        ACCT_SESSION_ID => $acct_session_id,
        NAS_ID          => $Nas->{NAS_ID}
      }
    );
    if ( $sessions->{TOTAL} < 1 ){
      $message .= $html->button( 'add to log', "index=$index&tolog=$acct_session_id&nas_id=$nas_id", { BUTTON => 1 } ) . "
         " . $html->button( "$lang{DEL}", "index=$index&del=$acct_session_id&nas_id=$nas_id&nas_port_id=$nas_port_id",
        { BUTTON => 1 } );
    }
    else{
      $message = $lang{EXIST};
      $sessions->online_del(
        {
          NAS_ID          => $nas_id,
          ACCT_SESSION_ID => $acct_session_id
        }
      );
    }
    $html->message( 'info', $lang{INFO}, $message );
  }
#  elsif ( $FORM{tolog} ){
#    my $ACCT_INFO = $sessions->online_info(
#      {
#        NAS_ID          => $FORM{nas_id},
#        ACCT_SESSION_ID => $FORM{tolog}
#      }
#    );
#    if ( $ACCT_INFO->{TOTAL} < 1 ){
#      $html->message( 'err', $lang{ERROR}, "$lang{NOT_EXIST}" );
#      return 0;
#    }
#
##    require Iptv_aaa;
##    Iptv_aaa->import();
##
##    $ACCT_INFO->{ACCT_STATUS_TYPE} = 'Stop';
##    $nas->info(
##      {
##        NAS_ID    => $ACCT_INFO->{NAS_ID},
##        SECRETKEY => $conf{secretkey}
##      }
##    );
##
##    my $Acct = Iptv_aaa->new( $db, \%conf );
##    $Acct->accounting( $ACCT_INFO, $nas, \%conf );
##    if ( !_error_show( $Acct ) ){
##      my $table = $html->table( { width => '100%' } );
##      while (my ($k, $v) = each %{$ACCT_INFO}) {
##        $table->addrow( $k, $v );
##      }
##      while (my ($k, $v) = each %{$Acct}) {
##        $table->addrow( $k, $v );
##      }
##      $html->message( 'info', $lang{ADDED}, $table->show() );
##    }
##
##    $sessions->online_del(
##      {
##        NAS_ID          => $ACCT_INFO->{NAS_ID},
##        ACCT_SESSION_ID => $ACCT_INFO->{ACCT_SESSION_ID}
##      }
##    );
#  }
  elsif ( $FORM{del} || $FORM{dellist} ){
    if ( $FORM{dellist} ){
      my @sessions_list = split( /, /, $FORM{dellist} );
      $sessions->online_del( { SESSIONS_LIST => \@sessions_list } );
      $FORM{del} = $FORM{dellist};
    }
    else{
      $sessions->online_del(
        {
          NAS_ID          => $FORM{nas_id},
          ACCT_SESSION_ID => $FORM{del}
        }
      );
    }
    if ( !$sessions->{errno} ){
      my $table = $html->table(
        {
          width => '100%',
          rows  => [ [ "NAS_ID", $FORM{nas_id} ], [ "ACCT_SESSION_ID", $FORM{del} ] ]
        }
      );
      $html->message( 'info', $lang{DELETED}, $table->show() );
    }
  }

  my $form_link = '';
  my $cure = '';
  if ( $FORM{ZAPED} ){
    $LIST_PARAMS{ZAPED} = '1';
    $form_link = $html->button( 'On line', "index=$index", { BUTTON => 1 } );
    $cure = 'Zap';
  }
  else{
    #$sessions->online({ ZAPED => 1 });
    #$form_link = $html->button($lang{ZAPED}, "index=$index&ZAPED=1", { BUTTON => 1 }) . " ($sessions->{TOTAL})";
    $cure = 'Online';
  }
  %LIST_PARAMS = (
    %LIST_PARAMS,
    LOGIN       => '_SHOW',
    FIO         => '_SHOW',
    STARTED     => '_SHOW',
    DURATION    => '_SHOW',
    CLIENT_IP   => '_SHOW',
    TP_NAME     => '_SHOW',
    ONLINE_BASE => '_SHOW',
  );

  my $dub_logins = $sessions->{dub_logins};
  my Abills::HTML $table;
  ($table) = result_former(
    {
      INPUT_DATA      => $sessions,
      FUNCTION        => 'online',
      BASE_FIELDS     => 1,
      FUNCTION_FIELDS => 'iptv_ping, iptv_zap, iptv_hangup',
      EXT_TITLES      => {
        'ip'              => 'IP',
        'netmask'         => 'NETMASK',
        'speed'           => $lang{SPEED},
        'port'            => $lang{PORT},
        'CID'             => 'CID',
        'filter_id'       => 'Filter ID',
        'tp_name'         => $lang{TARIF_PLAN},
        'dv_status'       => $lang{STATUS},
        'started',        => $lang{START},
        'duration'        => $lang{DURATION},
        'last_alive'      => "Last alive",
        'iptv_expire'     => "$lang{TV} $lang{EXPIRE}",
        'acct_session_id' => "ACCT_SESSION_ID",
      },
      TABLE           => {
        width   => '100%',
        caption => "$cure",
        qs      => $pages_qs,
        ID      => 'IPTV_ONLINE',
        EXPORT  => 1,
      },
      SKIP_PAGES      => 1
    }
  );
  my $bg       = '';
  my $online   = $sessions->{nas_sorted};
  my $nas_list = $Nas->list( { COLS_NAME => 1, PAGE_ROWS => 1 } );

  foreach my $nas_row ( @{$nas_list} ){
    $nas_row->{id} = 0;
    next if (!defined( $online->{ $nas_row->{id} } ));
    #$table->{rowcolor} = 'bg-info';
    #$table->{extra} = "colspan=" . (1 + $sessions->{SEARCH_FIELDS_COUNT}) . " class=\"small\"";
    #$table->addrow( "$nas_row->{id}:" . $html->b( $nas_row->{nas_name} ) . ":$nas_row->{nas_type}" );
    my $online_users = $online->{ $nas_row->{id} };

    foreach my $line ( @{$online_users} ){
      my @fields_array = ();
      for ( my $i = 0; $i < 1 + $sessions->{SEARCH_FIELDS_COUNT}; $i++ ){
        if ( $conf{EXT_BILL_ACCOUNT} && $sessions->{COL_NAMES_ARR}->[$i] eq 'ext_bill_deposit' ){
          $line->{ext_bill_deposit} = ($line->{ext_bill_deposit} < 0) ? $html->color_mark( $line->{ext_bill_deposit},
              $_COLORS[6] )                                           : $line->{ext_bill_deposit};
        }
        elsif ( $sessions->{COL_NAMES_ARR}->[$i] eq 'deleted' ){
          $line->{deleted} = $html->color_mark( $bool_vals[ $line->{deleted} ],
              ($line->{deleted} == 1) ? $state_colors[ $line->{deleted} ] : '' );
        }
        elsif ( $sessions->{COL_NAMES_ARR}->[$i] eq 'login' ){
          $line->{login} = user_ext_menu( $line->{uid}, $line->{login} );
        }
        #if ( $FORM{UNIVERSAL_SEARCH} ){
        #  $line->{ $users->{COL_NAMES_ARR}->[$i] } =~ s/(.*)$FORM{UNIVERSAL_SEARCH}(.*)/$1$search_color_mark$2/;
        #}
        push @fields_array, $line->{ $sessions->{COL_NAMES_ARR}->[$i] };
      }

      undef($table->{rowcolor});
      undef($table->{extra});

      if ( defined( $dub_logins->{ $line->{login} } ) ){
        $bg = '#FFFF00';
      }
      elsif ($line->{status} && $line->{status} == 3 ){
        $bg = '#FF0000';
      }
      else{
        $bg = ($bg eq $_COLORS[1]) ? $_COLORS[2] : $_COLORS[1];
      }

      $table->addrow(
        @fields_array,
        $html->button( 'P', "index=$index&ping=$line->{client_ip}", { TITLE => 'Ping', BUTTON => 1 } ),
        $html->button( 'Z', "index=$index&zap=$nas_row->{id}+$line->{acct_session_id}", { TITLE => 'Zap', BUTTON => 1 } )
        ,
        ($FORM{ZAPED}) ? $html->form_input( 'dellist', "$line->{acct_session_id}",
            { TYPE => 'checkbox', { BUTTON => 1 } } ) : $html->button( 'H',
            "index=$index&hangup=$nas_row->{id}+$line->{acct_session_id}", { TITLE => 'Hangup', BUTTON => 1 } )
      );
    }
  }

  my $table2 = $html->table({
    width      => '100%',
    rows       => [ [ "$lang{TOTAL}:", $html->b( $sessions->{TOTAL} ), "$form_link" ] ]
  });

  my $total = $table2->show();
  my $output = $total . $table->show();
  $table = $html->table({
    width       => '100%',
    title_plain => [ "$lang{REFRESH} (sec): " . $html->form_input( 'REFRESH', int( ($FORM{REFRESH}) ? $FORM{REFRESH} : 0 ),
          { SIZE => 4 } ), $html->form_input( 'SHOW', $lang{SHOW}, { TYPE => 'SUBMIT' } ) ],
    cols_align  => [ 'center:noprint', 'center:noprint' ],
  });

  if ( $FORM{ZAPED} ){
    $output = $html->form_main(
      {
        CONTENT => $output,
        HIDDEN  => {
          index => "$index",
          ZAPED => 1
        },
        SUBMIT  => { go => "$lang{DEL}" },
        METHOD  => 'GET'
      }
    );
  }
  else{
    $output .= $html->form_main(
      {
        CONTENT => $table->show(),
        HIDDEN  => { index => "$index" },
        METHOD  => 'GET'
      }
    );
    $output .= $html->button( 'Zap All', "index=$index&zapall=1",
      { MESSAGE => "Do you realy want zap all sessions ?", BUTTON => 1 } );
  }

  print $output;

  return 1;
}

#**********************************************************
=head2 iptv_error() - Activation errors

=cut
#**********************************************************
sub iptv_error{
  my ($attr) = @_;

  my $PAGE_ROWS = 100;

  $conf{LOGFILE} = "/usr/abills/var/log/abills.iptv";

  my $login = '';
  if ( $attr->{SERVICE_INFO} ){
    my $user = $attr->{SERVICE_INFO};
    $login = $user->{LOGIN};
  }
  elsif ( $FORM{LOGIN_EXPR} ){
    $login = $FORM{LOGIN_EXPR};
    $pages_qs .= "&LOGIN_EXPR=$FORM{LOGIN_EXPR}";
  }
  elsif ( $FORM{UID} ){
    iptv_user();
    return 0;
  }

  if ( !-f $conf{LOGFILE} ){
    $html->message( 'info', $lang{INFO}, "'$conf{LOGFILE}' $lang{NOT_EXIST}" );
    return 0;
  }

  if ( defined( $FORM{LOG_TYPE} ) ){
    $pages_qs .= "&LOG_TYPE=$FORM{LOG_TYPE}";
  }

  my ($list, $types, $totals) = show_log(
    "$login",
    "$conf{LOGFILE}",
    {
      DATE      => $FORM{DATE},
      LOG_TYPE  => $FORM{LOG_TYPE},
      PG        => $PG,
      PAGE_ROWS => $PAGE_ROWS
    }
  );
  print $html->form_main(
      {
        CONTENT => "$lang{LOGIN}: " . $html->form_input( 'LOGIN_EXPR', "$FORM{LOGIN_EXPR}" ),
        HIDDEN  => {
          sid   => $sid,
          index => $index,
          UID   => $FORM{UID}
        },
        SUBMIT  => { show => $lang{SHOW} }
      }
    );

  my $table = $html->table(
    {
      caption => $lang{LOG},
      width   => '100%',
      pages   => $totals,
      qs      => $pages_qs
    }
  );

  foreach my $line ( @{$list} ){
    if ( $line =~ m/LOG_WARNING/i ){
      $line = "<font color='#FF0000'>$line</font>";
    }
    $table->addrow( $line );
  }

  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ]
    }
  );

  $table->addrow( $html->button( "$lang{TOTAL}", "index=$index&$pages_qs" ), $totals );

  while (my ($k, $v) = each %{$types}) {
    $table->addrow( $html->button( $k, "index=$index&LOG_TYPE=$k$pages_qs" ), $v );
  }

  print $table->show();

  return 1;
}

#**********************************************************
=head2 iptv_user_channels($attr)

  Arguments:
    $attr
      SERVICE_INFO
      SHOW_ONLY     - Show only info
      UID


  Results:

=cut
#**********************************************************
sub iptv_user_channels{
  my ($attr) = @_;

  if ( $attr->{SERVICE_INFO} ){
    $Iptv = $attr->{SERVICE_INFO};
  }
  else {
    $Iptv->user_info( $FORM{ID} || $LIST_PARAMS{UID} || $attr->{UID} );
    if($Iptv->{errno}) {
      print "Error: [$Iptv->{errno}] $Iptv->{errstr} \n";
      return 0;
    }
  }

  if ($user && $user->{UID}) {
    $users = $user;
  }
  elsif(! $users || ! $users->{UID}) {
    $users  = Users->new($db, $admin, \%conf);
    $users->{debug}=1;
    $users->info($Iptv->{UID});
  }

  my $list = $Tariffs->ti_list( { TP_ID => $Iptv->{TP_ID}, COLS_NAME => 1 } );

  if ( $Tariffs->{TOTAL} < 1 ){
    return 0;
  }

  $LIST_PARAMS{INTERVAL_ID} = $list->[0]->{id};
  $LIST_PARAMS{DISABLE} = 0;
  #Active channels
  my %select_channels = ();
  $list = $Iptv->user_channels_list({
    TP_ID     => $Iptv->{TP_ID},
    ID        => $Iptv->{ID},
    PAGE_ROWS => 10000,
    COLS_NAME => 1
  });

  foreach my $line ( @{$list} ){
    $select_channels{ $line->{channel_id} } = $line->{changed};
  }

  my @mandatory_arr = ();

  #LIst channels
  my $channel_ti_list = $Iptv->channel_ti_list({
    %LIST_PARAMS,
    MANDATORY        => 1,
    COLS_NAME        => 1,
    USER_INTERVAL_ID => $LIST_PARAMS{INTERVAL_ID}
  });

  foreach my $line ( @{$channel_ti_list} ){
    if ( ($FORM{add} || $FORM{change_shedule}) && $FORM{change_now} ){
      if ( ($users->{CREDIT} + $users->{DEPOSIT}) > $line->{month_price} || $Iptv->{PAYMENT_TYPE} || $Iptv->{POSTPAID_MONTHLY_FEE} ){
        $Iptv->{TP_INFO}->{PERIOD_ALIGNMENT} = $Iptv->{PERIOD_ALIGNMENT} || 0;
        $Iptv->{TP_INFO}->{MONTH_FEE}        = $line->{month_price};
        $Iptv->{TP_INFO}->{DAY_FEE}          = $line->{day_price};
        $Iptv->{TP_INFO}->{TP_ID}            = $Iptv->{TP_ID};
        $Iptv->{TP_INFO}->{ABON_DISTRIBUTION}= $Iptv->{ABON_DISTRIBUTION};

        my %PARAMS = (
          DESCRIBE => "$lang{TV}: $lang{DAY_FEE}",
          METHOD   => 1
        );

        if ( $Iptv->{TP_INFO}->{MONTH_FEE} > 0 ){
          $Iptv->{ACCOUNT_ACTIVATE} = $users->{ACTIVATE};
          service_get_month_fee(
            $Iptv,
            {
              EXT_DESCRIBE => " $lang{CHANNEL}: $line->{channel_num}",
              SERVICE_NAME => "$lang{TV}",
              QUIET        => 1
            }
          );
        }
        else{
          $Fees->take( $users, $Iptv->{TP_INFO}->{DAY_FEE}, { %PARAMS } );
        }
        push @mandatory_arr, $line->{channel_id};
      }
      else{
        $html->message( 'err', $lang{ERROR},
          "$lang{ERR_SMALL_DEPOSIT}\n $lang{DEPOSIT}: $users->{DEPOSIT}\n $lang{MONTH_FEE}: $line->{month_price}" ) if (!$attr->{QUIET});
      }
    }
    else{
      push @mandatory_arr, $line->{channel_id};
    }
  }

  my $Shedule = Shedule->new( $db, $admin, \%conf );

  if ( $FORM{change_shedule} && $FORM{IDS} ){
    $FORM{IDS} =~ s/, /;/g;

    #Add to shedule
    my ($Y, $M, $D) = split( /-/, next_month( { DATE => $DATE } ) );
    $D = '01';

    $Shedule->add({
      UID      => $Iptv->{UID},
      TYPE     => 'channels',
      ACTION   => "$FORM{ID}:$FORM{IDS}",
      D        => $D,
      M        => $M,
      Y        => $Y,
      DESCRIBE => "$lang{FROM}: '$Y-$M-$D'",
      MODULE   => 'Iptv'
    });

    if ( !_error_show( $Shedule, { MESSAGE => $lang{SHEDULE} } ) ){
      $html->message( 'info', $lang{INFO}, $lang{CHANGED} ) if (!$attr->{QUIET});
    }
  }

  #change channels immediately
  elsif ( $FORM{change_now} ){
    my @new_arr = ();
    my @ids_arr = split( /, /, $FORM{IDS} || '' );
    my %ids_hash = ();
    my @add_arr = ();
    my @add_filters = ();

    foreach my $k ( @ids_arr ){
      $ids_hash{$k} = 1;
    }

    foreach my $channel ( keys %select_channels ){
      #Tarif exists
      if ( $ids_hash{$channel} ){
        delete $ids_hash{$channel};
        #Add new tarif
        push @add_arr, $channel;
      }
    }

    @new_arr = keys %ids_hash;

    if ( $#new_arr > -1 ){
      $channel_ti_list = $Iptv->channel_ti_list({
        %LIST_PARAMS,
        COLS_NAME        => 1,
        USER_INTERVAL_ID => $LIST_PARAMS{INTERVAL_ID},
        IDS              => join( '; ', @new_arr )
      });

      foreach my $line ( @{$channel_ti_list} ){
        if ( ($users->{CREDIT} + $users->{DEPOSIT}) > $line->{month_price}
          || $Iptv->{PAYMENT_TYPE}
          || $Iptv->{POSTPAID_MONTHLY_FEE} ){

          $Iptv->{TP_INFO}->{PERIOD_ALIGNMENT} = $Iptv->{PERIOD_ALIGNMENT} || 0;
          $Iptv->{TP_INFO}->{MONTH_FEE}        = $line->{month_price};
          $Iptv->{TP_INFO}->{DAY_FEE}          = $line->{day_price};
          $Iptv->{TP_INFO}->{NAME}             = $line->{name} || '';
          $Iptv->{TP_INFO}->{TP_ID}            = $Iptv->{TP_ID};
          $Iptv->{TP_INFO}->{ABON_DISTRIBUTION}= $Iptv->{ABON_DISTRIBUTION};

          if ( $Iptv->{TP_INFO}->{MONTH_FEE} > 0 ){
            $Iptv->{ACCOUNT_ACTIVATE} = $users->{ACTIVATE};
            service_get_month_fee(
              $Iptv,
              {
                EXT_DESCRIBE => " $lang{CHANNEL}: $line->{interval_channel_id}",
                SERVICE_NAME => $lang{TV}
              }
            );
          }
          else{
            my %PARAMS = (
              DESCRIBE => "$lang{TV}: $lang{DAY_FEE}",
              METHOD   => 1
            );
            $Fees->take( $users, $Iptv->{TP_INFO}->{DAY_FEE}, { %PARAMS } );
          }
          $select_channels{ $line->{channel_id} } = '1';
          push @add_arr, $line->{channel_id};
          push @add_filters, $line->{filter_id};
        }
        else{
          $html->message( 'err', $lang{ERROR},
            "$lang{ERR_SMALL_DEPOSIT}\n$lang{MONTH_FEE}:$line->{month_price}\nDEPOSI:$users->{DEPOSIT}" ) if (!$attr->{QUIET});
        }
      }
    }

    delete $FORM{IDS};
    push @add_arr, @mandatory_arr;

    $Iptv->user_channels(
      {
        ID    => $Iptv->{ID},
        TP_ID => $Iptv->{TP_ID},
        IDS   => join( ', ', @add_arr )
      }
    );

    if ( !_error_show( $Iptv ) ){
      $html->message( 'info', $lang{INFO}, "$lang{CHANGED} $#add_arr" ) if (!$attr->{QUIET});
      iptv_account_action( {
        ADD_ID     => \@add_arr,
        DEL        => \%select_channels,
        channels   => 1
      } );
    }
  }
  elsif ( $FORM{del_shedule} ){
    $Shedule->del( { ID => $FORM{SHEDULE_ID}, UID => $Iptv->{UID} } );
    if ( !$Shedule->{errno} ){
      $html->message( 'info', "$lang{INFO} : $lang{SHEDULE}", "$lang{SHEDULE} $lang{DELETED}" ) if (!$attr->{QUIET});
      $Shedule->{Y} = undef;
    }
  }

  if ( $attr->{QUIET} ){
    return 0;
  }

  _error_show( $Iptv ) if (!$attr->{QUIET});
  $Shedule->info(
    {
      UID    => $Iptv->{UID},
      TYPE   => 'channels',
      MODULE => 'Iptv'
    }
  );

  my %shedule = ();
  if ( $Shedule->{TOTAL} > 0 ){
    $Shedule->{EXEC_DATE} = "$Shedule->{Y}-$Shedule->{M}-$Shedule->{D}";
    my @shedule_channels_arr = split( /;/, $Shedule->{ACTION} );
    foreach my $channel_id ( @shedule_channels_arr ){
      $shedule{$channel_id} = "$Shedule->{Y}-$Shedule->{M}-$Shedule->{D}";
    }
  }

  %select_channels = ();
  $list = $Iptv->user_channels_list({
    TP_ID     => $Iptv->{TP_ID},
    ID        => $Iptv->{ID},
    COLS_NAME => 1
  });

  foreach my $line ( @{$list} ){
    $select_channels{ $line->{channel_id} } = $line->{changed};
  }

  $list = $Iptv->channel_ti_list({
    %LIST_PARAMS,
    USER_INTERVAL_ID => $LIST_PARAMS{INTERVAL_ID},
    COLS_NAME        => 1
  });

  my $table = $html->table({
    width      => '100%',
    caption    => $lang{CHANNELS},
    title      => [ '#', $lang{STATUS}, $lang{NUM}, $lang{NAME}, $lang{DESCRIBE}, "$lang{MONTH} $lang{PRICE}", "$lang{DAY} $lang{PRICE}" ],
    qs         => $pages_qs,
    ID         => 'IPTV_USER_CHANNELS',
    EXPORT     => 1
  });

  foreach my $line ( @{$list} ){
    my $status = ($select_channels{ $line->{channel_id} }) ? $status[0] : $status[1];
    my $select = '';
    if ( $line->{mandatory} ){
      $status = $lang{MANDATORY};
    }

    if ( $conf{IPTV_USER_CHG_CHANNELS} || !$user->{UID} ){
      if ( $Shedule->{Y} && !$line->{mandatory} ){
        if ( $shedule{ $line->{channel_id} } ){
          $status .= " $lang{ENABLE} $lang{FROM}: $shedule{$line->{channel_id}}";
        }
        else{
          $status .= " $lang{DISABLE} $lang{FROM}: $Shedule->{EXEC_DATE}";
        }
      }
      else{
        if ( !$line->{mandatory} ){
          $select = $html->form_input(
            'IDS',
            $line->{channel_id},
            {
              TYPE          => 'checkbox',
              STATE         => (($select_channels{ $line->{channel_id} }) ? 1 : undef),
              OUTPUT2RETURN => 1
            }
          );
        }
      }
    }
    $table->addrow(
      $select,
      $status,
      $line->{channel_num},
      $line->{name},
      $line->{comments},
      $line->{month_price} || '0.00',
      $line->{day_price} || '0.00'
    );
  }

  if ( ($conf{IPTV_USER_CHG_CHANNELS} && ! $attr->{SHOW_ONLY}) || !$user->{UID} ){
    my %submit_h = (change_shedule => "$lang{ADD} $lang{SHEDULE}");
    if ( $Shedule->{Y} ){
      %submit_h = (del_shedule => "$lang{DEL} $lang{SHEDULE}");
    }

    $submit_h{change_now} = "$lang{CHANGE} $lang{NOW}";

    if ( !$Iptv->{TOTAL} ){
      return 0;
    }

    return $html->form_main({
      CONTENT => $table->show( { OUTPUT2RETURN => 1 } ),
      HIDDEN  => {
        UID           => $Iptv->{UID},
        ID            => $Iptv->{ID},
        TP_ID         => $Iptv->{TP_ID},
        index         => $index,
        USER_CHANNELS => $Iptv->{ID},
        chg           => $Iptv->{ID},
        SHEDULE_ID    => $Shedule->{SHEDULE_ID}
      },
      METHOD  => 'get',
      SUBMIT  => \%submit_h
    });
  }
  else{
    return $table->show();
  }

  return 1;
}

#**********************************************************
=head2 iptv_screen_fees($attr)

  Arguments:
    $attr
      USERS_SERVICES - Services hash_ref
      TP             - Tp info
      TP_NUM         -
      DATE
      DEBUG

  Results:
    DEBUG output

=cut
#**********************************************************
sub iptv_screen_fees{
  my ($attr) = @_;

  my $debug = $attr->{DEBUG} || 0;
  my $tp = $attr->{TP};

  #Screen Fees
  my $ulist = $Iptv->users_screens_list({
    LOGIN         => '_SHOW',
    LOGIN_STATUS  => 0,
    SERVICE_TP_ID => $tp->{tp_id} || $attr->{TP_ID},
    SORT          => 1,
    MONTH_FEE     => '>0',
    NUM           => '_SHOW',
    NAME          => '_SHOW',
    FILTER_ID     => '_SHOW',
    COLS_NAME     => 1,
    SHOW_ASSIGN   => 1,
    %{$attr},
    SORT          => 's.num'
  });

  my $debug_output = '';
  foreach my $u ( @{$ulist} ){
    next if (!$u->{uid});
    my $sum = $u->{month_fee};
    $debug_output .= " Login: $u->{login} ($u->{uid})  TP_ID: $u->{tp_id} Screen: $u->{num} $u->{name} Month Price: $sum REDUCTION: $u->{reduction}\n" if ($debug > 3);

    my %FEES_DSC = (
      MODULE            => "Iptv",
      SERVICE_NAME      => $lang{TV},
      TP_ID             => $tp->{id} || $attr->{TP_NUM},
      TP_NAME           => "$lang{SCREENS}:$u->{num} $u->{name}",
      FEES_PERIOD_MONTH => $lang{MONTH_FEE_SHORT},
      FEES_METHOD       => ($tp->{fees_method}) ? $FEES_METHODS{ $tp->{fees_method} } : 2
    );

    push @{ $attr->{USERS_SERVICES}->{ $u->{uid} } },
      {
        SUM       => $sum,
        DESCRIBE  => fees_dsc_former( \%FEES_DSC ) . '/' . $u->{uid},
        SCREEN_ID => $u->{num},
        FILTER_ID => $u->{filter_id}
      };
  }

  return $debug_output;
}


#**********************************************************
=head2 iptv_channels_fees($attr)

  Arguments:
    $attr
      USERS_SERVICES - Services hash_ref
      ID             -
      TP             - Tp info
      TP_ID          -
      SKIP_MONTH_PRICE
      DATE
      DEBUG
      UID

  Results:
    DEBUG output

=cut
#**********************************************************
sub iptv_channels_fees{
  my ($attr) = @_;

  my $debug = $attr->{DEBUG};
  my $tp    = $attr->{TP};
  my $days_in_month = days_in_month();

  #Channels Fees
  my $ulist = $Iptv->user_list(
    {
      LOGIN         => '_SHOW',
      ID            => $attr->{ID} || '_SHOW',
      LOGIN_STATUS  => 0,
      TP_ID         => $tp->{tp_id} || $attr->{TP_ID},
      SORT          => 1,
      SHOW_CHANNELS => 1,
      MONTH_PRICE   => ($attr->{SKIP_MONTH_PRICE}) ? undef : '>0',
      COLS_NAME     => 1,
      %{$attr}
    }
  );

  my $debug_output = '';
  foreach my $u ( @{$ulist} ){
    next if (!$u->{uid});
    my $channel_num = $u->{channel_id};
    my $sum         = $u->{month_price};

    if($tp->{abon_distribution}) {
      $sum = $sum = sprintf("%.6f", $sum / $days_in_month);
    }

    $debug_output .= " Login: $u->{login} ($u->{uid}) TP_ID: $u->{tp_id} Channel: $channel_num Month Price: $sum REDUCTION: $u->{reduction}\n" if ($debug && $debug > 3);

    my %FEES_DSC = (
      MODULE            => "Iptv",
      SERVICE_NAME      => $lang{TV},
      TP_ID             => $tp->{id} || $attr->{TP_NUM} || $channel_num,
      TP_NAME           => "$lang{CHANNELS}:$channel_num $u->{channel_name}",
      FEES_PERIOD_MONTH => $lang{MONTH_FEE_SHORT},
      FEES_METHOD       => ($tp->{fees_method}) ? $FEES_METHODS{ $tp->{fees_method} } : 2
    );

    push @{ $attr->{USERS_SERVICES}->{ $u->{uid} } },
      {
        SUM       => $sum,
        DESCRIBE  => fees_dsc_former( \%FEES_DSC ),
        FILTER_ID => $u->{channel_filter},
        ID        => $channel_num,
      };
  }

  return $debug_output;
}

#**********************************************************
=head2 iptv_neg_deposti_action($attr)

  Arguments:
    $attr
      TP
      USER
      SERVICES - Services hash

  Results:
    TRUE or FALSE

=cut
#**********************************************************
sub iptv_neg_deposti_action{
  my ($attr) = @_;

  my $tp   = $attr->{TP};
  my $user = $attr->{USER};
  my $sum  = 0;

  if ( $attr->{SERVICES} ){
    foreach my $service ( @{ $attr->{SERVICES} } ){
      $sum += $service->{SUM};
    }
  }

  #Block small deposit
  if ( $tp->{small_deposit_action} ){
    if ( $sum > $user->{deposit} + $user->{credit} ){
      if ( $tp->{small_deposit_action} == -1 ){
        $Iptv->user_change(
          {
            ID     => $user->{id},
            UID    => $user->{uid},
            STATUS => 5
          }
        );
      }
      else{
        $Iptv->user_change(
          {
            ID    => $user->{id},
            UID   => $user->{uid},
            TP_ID => $tp->{small_deposit_action}
          }
        );
      }
      return 1;
    }
    else{
      $Iptv->user_change(
        {
          ID     => $user->{id},
          UID    => $user->{uid},
          STATUS => 0
        }
      );
    }
  }

  return 0;
}

#**********************************************************
=head2 get_service_fee($attr)

  Arguments:
    $user      - User object
    $services  - Service hash
    $attr      - Extra attr
      GET_SUM  - Get total sum
      DATE
      DEBUG
      PERIOD_ALIGNMENT -
      ABON_DISTRIBUTION -

  Returns:
    TRUE or FALSE

=cut
#**********************************************************
sub get_service_fee{
  my ($user, $users_services, $attr) = @_;

  my $debug        = $attr->{DEBUG} || 0;
  my $total_sum    = 0;
  my $debug_output = '';
  my $d = (split(/-/, $DATE))[2];

  my %FEES_PARAMS = (
    DATE   => $attr->{DATE} || $DATE,
    METHOD => 1
  );

  my @uids = ();

  if ( $user->{UID} ){
    push @uids, $user->{UID};
  }
  else{
    @uids = sort keys %{$users_services};
  }

  foreach my $uid ( @uids ){
    my $service_count = $#{ $users_services->{$uid} } + 1;
    print "UID: $uid Service: $service_count\n" if ($debug > 0);
    for ( my $i = 0; $i < $service_count; $i++ ){
      my $service = $users_services->{$uid}->[$i];
      my $sum = $service->{SUM};
      if ( $user->{REDUCTION} > 0 ){
        $sum = $sum * (100 - $user->{REDUCTION}) / 100;
      }

      if($attr->{ABON_DISTRIBUTION}) {
        my $days_in_month = days_in_month();
        $sum = sprintf("%.6f", $sum / $days_in_month);
      }
      elsif($attr->{PERIOD_ALIGNMENT}) {
        my $days_in_month = days_in_month({ DATE => $DATE });
        $sum = ($sum / $days_in_month) * ($days_in_month - $d + 1);
        $service->{DESCRIBE} .=  ', ' . $lang{MONTH_ALIGNMENT};
      }

      print "  $i. SUM: $sum DECRRIBE: $service->{DESCRIBE}\n" if ($debug > 0);
      $total_sum += $sum;

      if ( $attr->{GET_SUM} ){
        next;
      }

      if ( $debug > 4 ){
        $debug_output .= " UID: $user->{UID} SUM: $sum REDUCTION: $user->{REDUCTION}\n";
      }
      else{
        $FEES_PARAMS{DESCRIBE} = $service->{DESCRIBE};

        if($sum && $sum > 0) {
          $Fees->take($user, $sum, \%FEES_PARAMS);
        }

        if ( $Fees->{errno} ){
          print "Error: [$Fees->{errno}] $Fees->{errstr} ";
          if ( $Fees->{errno} == 14 ){
            print "[ $uid ] - Don't have money account";
          }
          print "\n";
          return 0;
        }
      }
    }
  }

  print "==> SUM: $total_sum\n" if ($debug > 0);

  if ( $attr->{GET_SUM} ){
    return $total_sum;
  }

  return 1;
}

#***********************************************************
=head2 iptv_transfer_service($Iptv_info, $attr)

  Arguments:
    $Iptv_info
    $attr
       SERVICE_LIST

  Results:
   \%service_list

=cut
#***********************************************************
sub iptv_transfer_service {
  my ($Iptv_info, $attr) = @_;

  my %users_services_channels = ();
  my %users_services_screens  = ();
  #apply settings
  if($attr->{SERVICE_LIST}) {
    if($attr->{SERVICE_LIST}->{users_services_channels}->{$Iptv_info->{UID}}) {
      my @channels = ();
      foreach my $channel (@{ $attr->{SERVICE_LIST}->{users_services_channels}->{$Iptv_info->{UID}} }) {
        push @channels, $channel->{ID};
      }

      $Iptv->user_channels({
        ID    => $Iptv_info->{ID},
        TP_ID => $Iptv_info->{TP_ID},
        IDS   => join(', ', @channels)
      });
    }

#    if($attr->{SERVICE_LIST}->{users_services_screens}->{$Iptv_info->{UID}}) {
#      foreach my $screens (@{ $attr->{SERVICE_LIST}->{users_services_screens}{30} } ) {
#        print "////// $screens->{SCREEN_ID} / $Iptv_info->{id} //\n";
#        $Iptv->users_screens_add( {
#          SERVICE_ID => $Iptv_info->{ID},
#          SCREEN_ID  => $screens->{SCREEN_ID},
#        });
#      }
#    }
  }
  else {
    #Save sesttings
    #Get user service
    #channels
    #screens
    iptv_channels_fees({
      UID            => $Iptv_info->{UID},
      TP_ID          => $Iptv_info->{TP_ID},
      TP_NUM         => $Iptv_info->{TP_NUM},
      SKIP_MONTH_PRICE => 1,
      TP             => $Iptv_info,
      #DEBUG          => $debug,
      USERS_SERVICES => \%users_services_channels,
    });

#    iptv_screen_fees({
#      UID            => $Iptv_info->{UID},
#      TP_ID          => $Iptv_info->{TP_ID},
#      TP_NUM         => $Iptv_info->{TP_NUM},
#      TP             => $Iptv_info,
#      #DEBUG          => $debug,
#      USERS_SERVICES => \%users_services_screens,
#    });
  }

  my %service_list = (
    users_services_channels => \%users_services_channels,
    users_services_screens  => \%users_services_screens
  );

  return \%service_list;
}

##***********************************************************
#=head2 iptv_mk_users_conf($attr)
#
#=cut
##***********************************************************
#sub iptv_mk_users_conf{
#  #my ($attr) = @_;
#
#  my $content = "#ABILLS users config\n#DATE: $DATE $TIME\n\n";
#
#  my $list = $Iptv->user_list(
#    {
#      PAGE_ROWS => 100000,
#      CID       => '*',
#      PASSWORD  => 1
#    }
#  );
#  foreach my $line ( @{$list} ){
#    my %info = (
#      LOGIN     => $line->[0],
#      FIO       => $line->[1],
#      NUMBER    => $line->[6],
#      CALLER_ID => $line->[7],
#      PASSWORD  => $line->[8],
#    );
#    $content .= $html->tpl_show( _include( 'iptv_users_conf', 'Iptv' ), \%info, { OUTPUT2RETURN => 1 } );
#  }
#
#  if(open( my $fh, '>', "$conf{VOIP_ASTERISK_USERS}" )) {
#    print $fh "$content\n";
#    close( $fh );
#  }
#  else {
#    $html->message( 'err', $lang{ERROR},  "Can't open file '$conf{VOIP_ASTERISK_USERS}' $!" );
#  }
#
#  return 1;
#}

#**********************************************************
=head2 iptv_dv_crypt($attr) - Dv crypt function

=cut
#**********************************************************
sub iptv_dv_crypt{
  my ($attr) = @_;

#  my @channels = (
#    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
#  );

  my $filename = $conf{IPTV_DVCRYPT_FILENAME} || $conf{TPL_DIR} . '/dvcrypt.conf';
  my $content = '';
  my %users_channels = ();
  my $tp_list = $Tariffs->list( { %LIST_PARAMS, MODULE => 'Iptv', COLS_NAME => 1, NEW_MODEL_TP => 1 } );
  my $debug  = $attr->{DEBUG} || 0;

  foreach my $tp ( @{$tp_list} ){
    my $TP_ID = $tp->{tp_id};
    #my $min_use          = $tp->{min_use};
    #my $postpaid         = $tp->{payment_type};
    #my $tp_postpaid      = $tp->{postpaid_monthly_fee};
    #my $month_fee        = $tp->{month_fee};
    my %tp_channels_list = ();

    $Tariffs->ti_list( { TP_ID => $TP_ID, COLS_NAME => 1 } );

    if ( $Tariffs->{TOTAL} == 0 ){
      next;
    }

    my $channels_list = $Iptv->channel_ti_list(
      {
        INTERVAL_ID => $Tariffs->{list}->[0]->{id},
        MANDATORY   => 1,
        COLS_NAME   => 1
      }
    );

    foreach my $line ( @{$channels_list} ){
      $tp_channels_list{ $line->{channel_num} } = $line->{channel_id};
    }

    #Main users list
    my $ulist = $Iptv->user_list(
      {
        LOGIN          => '_SHOW',
        ACTIVATE       => "<=$DATE",
        EXPIRE         => "0000-00-00,>$DATE",
        DVCRYPT_ID     => '>0',
        SERVICE_STATUS => '_SHOW',
        LOGIN_STATUS   => '_SHOW',
        DEPOSIT        => '_SHOW',
        CREDIT         => '_SHOW',
        TP_ID          => $TP_ID,
        SORT           => 1,
        PAGE_ROWS      => 1000000,
        COLS_NAME      => 1
      }
    );

    foreach my $u ( @{$ulist} ){
      if ( $u->{deposit} + $u->{credit} > 0 && $u->{service_status} == 0 ){
        %{ $users_channels{ $u->{dvcrypt_id} } } = %tp_channels_list;
      }
      else{
        %{ $users_channels{ $u->{dvcrypt_id} } } = ();
      }
    }

    # Custom channels users list
    my $list = $Iptv->user_list(
      {
        LOGIN          => '_SHOW',
        PAGE_ROWS      => 1000000,
        DVCRYPT_ID     => '>0',
        ACTIVATE       => "<=$DATE",
        EXPIRE         => "0000-00-00,>$DATE",
        SERVICE_STATUS => '_SHOW',
        LOGIN_STATUS   => '_SHOW',
        DEPOSIT        => '_SHOW',
        CREDIT         => '_SHOW',
        TP_ID          => $TP_ID,
        SORT           => 1,
        SHOW_CHANNELS  => 1,
        COLS_NAME      => 1,
      }
    );

    foreach my $u ( @{$list} ){
      if ( $u->{deposit} + $u->{credit} > 0 && $u->{login_status} + $u->{service_status} == 0 ){
        $users_channels{ $u->{dvcrypt_id} }{ $u->{channel_num} } = "$u->{deposit}";
      }
      else{
        $users_channels{ $u->{dvcrypt_id} }{ $u->{channel_num} } = 0;
      }
    }
  }

  foreach my $dv_crypt_id ( sort { $a <=> $b } keys %users_channels ){
    my @arr = ();
    for ( my $channel_id = 1; $channel_id <= 127; $channel_id++ ){
      $arr[ $channel_id - 1 ] = ($users_channels{$dv_crypt_id}->{$channel_id}) ? 1 : 0;
    }
    $content .= "$dv_crypt_id;" . (join( '', @arr )) . "\n";
  }

  print $html->pre( $content ) if ($debug > 1);
  if ( open( my $fh, '>', $filename ) ){
    print $fh $content;
    close( $fh );
  }
  else{
    print "Can't create Dv_crypt file '$filename' $!\n";
  }

  print "Generated '$filename'\n" if ($debug > 1);

  return "Generated '$filename'\n";
}

#**********************************************************
=head2 iptv_user_channels_list($attr) - Show users channels

  Attributes:
    $attr
      TP_ID
      UID
      RETURN_PORTS - Return channels ports
  Result:
    Retust string of string (1,2,5)

=cut
#**********************************************************
sub iptv_user_channels_list{
  my ($attr) = @_;

  my %tp_channels_list = ();
  my %users_channels = ();
  my $tp_list = $Tariffs->list({
    INNER_TP_ID  => $attr->{TP_ID},
    %LIST_PARAMS,
    NEW_MODEL_TP => 1,
    PAYMENT_TYPE => '_SHOW',
    MODULE       => 'Iptv',
    COLS_NAME    => 1
  });

  foreach my $tp ( @{$tp_list} ){
    my $TP_ID = $tp->{tp_id};
    $Tariffs->ti_list( { TP_ID => $TP_ID, COLS_NAME => 1 } );
    if ( $Tariffs->{TOTAL} == 0 ){
      next;
    }

    my $channels_list = $Iptv->channel_ti_list({
      INTERVAL_ID => $Tariffs->{list}->[0]->{id},
      MANDATORY   => 1,
      COLS_NAME   => 1
    });

    foreach my $line ( @{$channels_list} ){
      $tp_channels_list{ $line->{channel_num} } = ($attr->{RETURN_PORTS}) ? $line->{port} : $line->{channel_id};
    }

    #Main users list
    my $ulist = $Iptv->user_list({
      LOGIN          => '_SHOW',
      ACTIVATE       => "<=$DATE",
      EXPIRE         => "0000-00-00,>$DATE",
      SERVICE_STATUS => '_SHOW',
      LOGIN_STATUS   => '_SHOW',
      DEPOSIT        => '_SHOW',
      CREDIT         => '_SHOW',
      TP_ID          => $TP_ID,
      SORT           => 1,
      PAGE_ROWS      => 1000000,
      COLS_NAME      => 1,
      UID            => $attr->{UID} || $LIST_PARAMS{UID}
    });

    foreach my $u ( @{$ulist} ){
      if ( ($tp->{payment_type} || $u->{deposit} + $u->{credit} > 0) && $u->{login_status} + $u->{service_status} == 0 ){
        %{ $users_channels{ $u->{uid} } } = %tp_channels_list;
      }
    }

    # Custom channels users list
    my $list = $Iptv->user_list({
      LOGIN          => '_SHOW',
      PAGE_ROWS      => 1000000,
      DVCRYPT_ID     => '>0',
      ACTIVATE       => "<=$DATE",
      EXPIRE         => "0000-00-00,>$DATE",
      SERVICE_STATUS => '_SHOW',
      LOGIN_STATUS   => '_SHOW',
      DEPOSIT        => '_SHOW',
      CREDIT         => '_SHOW',
      TP_ID          => $TP_ID,
      SORT           => 1,
      SHOW_CHANNELS  => 1,
      COLS_NAME      => 1,
      UID            => $attr->{UID} || $LIST_PARAMS{UID}
    });

    foreach my $u ( @{$list} ){
      if ( ($tp->{payment_type} || $u->{deposit} + $u->{credit} > 0) && $u->{login_status} + $u->{service_status} == 0 ){
        $users_channels{ $u->{uid} }{ $u->{channel_num} } = $u->{channel_id};
      }
    }
  }

  if ( !$attr->{UID} || !defined( $users_channels{ $attr->{UID} } ) ){
    return '';
  }
  elsif ( $attr->{RETURN_PORTS} ){
    return join( ',', values %{ $users_channels{ $attr->{UID} } } );
  }
  else{
    return join( ',', keys %{ $users_channels{ $attr->{UID} } } );
  }
}

#**********************************************************
=head2 iptv_show_channels($num, $attr)

=cut
#**********************************************************
sub iptv_show_channels{
  my ($num) = @_;

  my $show = $num;

  if ( $channel_list{$num} ){
    $show .= ' : ' . $html->button( $channel_list{$num}, "index=" . get_function_index( 'iptv_channels' ) . "&NUM=$num",
      { class => '' } );
  }

  return $show;
}

#**********************************************************
=head2 iptv_show_tp($id, $attr) - Iptv show tp info

  Arguments:
    $id
    $attr

  Results:
    $tp_name

=cut
#**********************************************************
sub iptv_show_tp{
  my ($id) = @_;

  my $tp_name;
print " $id // ";

  print %tp_list;

  if ( $tp_list{$id} ){
    $tp_name = $html->button( $id, "index=" . get_function_index( 'iptv_tp' ) . "&TP_ID=$tp_list{$id}",
      { BUTTON => 1 } );
  }
  else{
    $tp_name = $id;
  }

  return $tp_name;
}

#**********************************************************
=head2 iptv_user_activate($Iptv_info, $attr) - User Service activate, Screen activate, Channels activate

  Arguments:
    $Iptv_info
    $attr
      USER
      REACTIVATE  - Reactivate service
      ACCOUNT_DISABLE

  Returns:
    TRUE or FALSE

=cut
#**********************************************************
sub iptv_user_activate {
  my ($Iptv_info, $attr) = @_;

  my $user           = $attr->{USER};
  my %users_services = ();
  my $debug_output   = '';
  my $debug          = 0;
  my $d = (split(/-/, $DATE))[2];

  my %FEES_DSC = (
    MODULE            => "Iptv",
    SERVICE_NAME      => $lang{TV},
    TP_ID             => $Iptv_info->{TP_NUM},
    TP_NAME           => $Iptv_info->{TP_NAME},
    FEES_PERIOD_MONTH => $lang{MONTH_FEE_SHORT},
    #FEES_METHOD       => $FEES_METHODS{ $tp->{fees_method} }
  );

  push @{ $users_services{$Iptv_info->{UID}} },
    {
      SUM       => $Iptv_info->{MONTH_FEE},
      DESCRIBE  => fees_dsc_former( \%FEES_DSC ),
      FILTER_ID => $Iptv_info->{TP_FILTER_ID}
    };

  my %users_services_channels = ();
  my %users_services_screens  = ();
  my @result_message          = ();

  $debug_output .= iptv_channels_fees({
    UID            => $Iptv_info->{UID},
    TP_ID          => $Iptv_info->{TP_ID},
    TP_NUM         => $Iptv_info->{TP_NUM},
    TP             => $Iptv_info,
    DEBUG          => $debug,
    USERS_SERVICES => \%users_services_channels,
  });

  $debug_output .= iptv_screen_fees({
    UID            => $Iptv_info->{UID},
    TP_ID          => $Iptv_info->{TP_ID},
    TP_NUM         => $Iptv_info->{TP_NUM},
    TP             => $Iptv_info,
    DEBUG          => $debug,
    USERS_SERVICES => \%users_services_screens,
  });

  my $total_sum = 0;
  foreach my $service ( @{ $users_services{$Iptv_info->{UID}} }, @{ $users_services_channels{$Iptv_info->{UID}} },
    @{ $users_services_screens{$Iptv_info->{UID}} } ){
    $total_sum += $service->{SUM};
  }

  if ( $Iptv_info->{STATUS} && $Iptv_info->{STATUS} == 5 && $user->{DEPOSIT} + $user->{CREDIT} < $total_sum ){
    $html->message( 'err', "$lang{TV} $lang{ERROR}",
      $lang{NEGATIVE_DEPOSIT} . "\n $lang{DEPOSIT}: $user->{DEPOSIT}\n$lang{SUM}: " . sprintf( "%.2f", $total_sum ), { ID => 810 } );
    return 0;
  }
  elsif ( $Iptv_info->{STATUS} == 0 && ! $attr->{REACTIVATE} ){
    $html->message( 'info', $lang{INFO}, "$lang{TV} $lang{ACTIVATE}");
    return 0;
  }

  foreach my $service ( @{ $users_services{$Iptv_info->{UID}} } ){
    iptv_account_action({
      add          => 1,
      UID          => $Iptv_info->{UID},
      ID           => $Iptv_info->{ID},
      TP_FILTER_ID => $Iptv_info->{TP_FILTER_ID},
      BUNDLE_TYPE  => 'subs_renew',
      USER_INFO    => $user,
      DEBUG        => $debug
    });

    my $sum = $service->{SUM};
    if($Iptv_info->{ABON_DISTRIBUTION}) {
      my $days_in_month = days_in_month();
      $sum = sprintf("%.6f", $sum / $days_in_month);
    }
    elsif($Iptv_info->{PERIOD_ALIGNMENT}) {
      my $days_in_month = days_in_month({ DATE => $DATE });
      $sum = sprintf("%.6f", ($sum / $days_in_month) * ($days_in_month - $d + 1));
      $service->{DESCRIBE} .=  ', ' . $lang{MONTH_ALIGNMENT};
    }

    push @result_message, "$service->{DESCRIBE} $lang{SUM}: $sum";

    print qq{
      $sum
      $service->{DESCRIBE}
      $service->{FILTER_ID}
      <br>
    } if ($debug);
  }

  foreach my $service ( @{ $users_services_screens{$Iptv_info->{UID}} } ){
    iptv_account_action( {
      SCREEN_ID    => $service->{SCREEN_ID},
      BUNDLE_TYPE  => 'subs_renew',
      TP_FILTER_ID => $service->{FILTER_ID},
      ID           => $Iptv_info->{ID},
      UID          => $Iptv_info->{UID},
      USER_INFO    => $user,
      DEBUG        => $debug
    });

    my $sum = $service->{SUM};
    if($Iptv_info->{PERIOD_ALIGNMENT}) {
      my $days_in_month = days_in_month({ DATE => $DATE });
      $sum = sprintf("%.2f", ($sum / $days_in_month) * ($days_in_month - $d + 1));
      $service->{DESCRIBE} .=  ', ' . $lang{MONTH_ALIGNMENT};
    }

    push @result_message, "$service->{DESCRIBE} $lang{SUM}: $sum";

    print qq{
      $sum
      $service->{DESCRIBE}
      $service->{FILTER_ID}
      <br>
    } if ($debug);
  }

  my @channels_ids = ();
  foreach my $service ( @{ $users_services_channels{$Iptv_info->{UID}} } ){
    push @channels_ids, $service->{ID};

    my $sum = $service->{SUM};
    if($Iptv_info->{PERIOD_ALIGNMENT}) {
      my $days_in_month = days_in_month({ DATE => $DATE });
      $sum = sprintf("%.2f", (($sum / $days_in_month) * ($days_in_month - $d + 1)));
      $service->{DESCRIBE} .=  ', ' . $lang{MONTH_ALIGNMENT};
    }

    push @result_message, "$service->{DESCRIBE} $lang{SUM}: $sum";

    print qq{
      $sum
      $service->{DESCRIBE}
      $service->{FILTER_ID}
      ID: $service->{ID}
      <br>
    } if ($debug);
  }

  if($#channels_ids > -1) {
    iptv_account_action({
      channels     => 1,
      ADD_ID       => \@channels_ids,
      BUNDLE_TYPE  => 'subs_renew',
      TP_FILTER_ID => $Iptv_info->{TP_FILTER_ID},
      ID           => $Iptv_info->{ID},
      UID          => $Iptv_info->{UID},
      USER_INFO    => $user,
      DEBUG        => $debug
    });
  }

  push @{ $users_services{$Iptv_info->{UID}} }, @{ $users_services_screens{$Iptv_info->{UID}} };
  push @{ $users_services{$Iptv_info->{UID}} }, @{ $users_services_channels{$Iptv_info->{UID}} };

  #Get fees
  get_service_fee(
    $user,
    \%users_services,
    {
      DATE   => $DATE,
      METHOD => 1,
      DEBUG  => $debug,
      PERIOD_ALIGNMENT => $Iptv_info->{PERIOD_ALIGNMENT},
      #Fixme
      ABON_DISTRIBUTION=> $Iptv_info->{ABON_DISTRIBUTION}
    }
  );

  $Iptv->user_change({
    ID     => $Iptv_info->{ID},
    STATUS => 0
  });

  $html->message( 'info', $lang{TV}, "$lang{ACTIVATE} \n" . join( "\n", @result_message ), { ID => 803 } );

  return 1;
}


#**********************************************************
=head2 iptv_users_screens($Iptv_info, $attr) - User screens show

=cut
#**********************************************************
sub iptv_users_screens{
  my ($Iptv_info, $attr) = @_;

  if ( !$FORM{chg} ){
    return 0;
  }

  my $uid = $FORM{UID} || 0;

  if ( $FORM{screen} ){
    $Iptv->{ACTION}     = 'add_screen';
    $Iptv->{LNG_ACTION} = $lang{CHANGE};
    $Iptv->{NUM}        = $FORM{screen} if ($FORM{screen});

    if ( $FORM{del_screen} ){
      iptv_account_action({
        %FORM,
        DEL       => 1,
        SCREEN_ID => $FORM{screen}
      });

      $Iptv->users_screens_del( \%FORM );
      if ( !_error_show($Iptv, { SILENT_MODE => 1 }) ){
        delete $Iptv->{SCREEN_ID};
        $html->message( 'info', $lang{INFO}, $lang{DELETED} );
      }
    }
    elsif ( $FORM{add_screen} ){
      my $list = $Iptv->screens_list( {
        TP_ID     => $Iptv_info->{TP_ID},
        NUM       => $FORM{screen},
        FILTER_ID => '_SHOW',
        COLS_NAME => 1
      });

      if ($FORM{chg}) {
        my $service_id = $Iptv->{SERVICE_ID};
        $Iptv->users_screens_info( $FORM{chg}, { SCREEN_ID => $FORM{screen} } );
        $Iptv->{SERVICE_ID}=$service_id;

        if ($Iptv->{CID} && $Iptv->{CID} ne $FORM{CID}) {
          $FORM{OLD_CID}=$Iptv->{CID};
        }
      }

      my $result = iptv_account_action( {
        %FORM,
        SCREEN_ID    => $FORM{screen},
        TP_FILTER_ID => $list->[0]->{filter_id},
        ID           => $Iptv_info->{ID}
      });

      if ( $result ){
        $Iptv->users_screens_add({
          SERVICE_ID => $FORM{chg},
          SCREEN_ID  => $FORM{screen},
          %FORM
        });

        if ( !$Iptv->{errno} ){
          $html->message( 'info', $lang{INFO}, "$lang{SCREENS} $lang{ADDED} \n ID: $result" );

          my %users_services = ();
          iptv_screen_fees({
            UID            => $FORM{UID},
            TP_ID          => $Iptv_info->{TP_ID},
            TP_NUM         => $Iptv_info->{TP_NUM},
            TP             => $Iptv_info,
            #DEBUG          => $debug,
            USERS_SERVICES => \%users_services,
          });

          #Get fees
          get_service_fee(
            $users,
            \%users_services,
            {
              %$Iptv_info,
              METHOD => 1,
              #DEBUG  => $debug
            }
          );
        }
      }
    }

    $Iptv->users_screens_info( $FORM{chg}, { SCREEN_ID => $FORM{screen} } );
    if (! $Iptv->{TOTAL} ){
      $Iptv->{CID} = undef;
      $Iptv->{LNG_ACTION} = $lang{ADD};
    }
  }
  my $list = $Iptv->users_screens_list({
    TP_ID      => $Iptv->{TP_ID},
    NAME       => '_SHOW',
    NUM        => '_SHOW',
    DATE       => '_SHOW',
    SERVICE_ID => $FORM{chg},
    COLS_NAME  => 1
  });

  if ( $Iptv->{TOTAL} < 1 ){
    return 0;
  }

  if ( $attr->{SHOW_FULL} ){
    my @info_panel = ();
    my $screen_num = 0;

    foreach my $line ( @{$list} ){
      if ( !$line->{service_id} ){
        next;
      }

      my $screen_name = ($line->{name}) ? $line->{name} : q{};

      if($attr->{SHOW_FULL} == 2) {
        $screen_name = $html->button($lang{CHANGE},
          "index=$index$pages_qs&SERVICE_ID=$Iptv->{ID}&chg=$FORM{chg}&SCREEN_ID=$line->{num}&screen=$line->{num}"
          , { ICON => 'glyphicon glyphicon-pencil' } );
      }

      push @info_panel, {
        ID     => mk_unique_value( 10 ),
        NUMBER => $lang{SCREEN} .' '. $line->{num} || ' 0',
        ICON   => 'glyphicon glyphicon-picture',
        TEXT   => $screen_name,
        COLOR  => 'green',
        SIZE   => 3
      };
      $screen_num++;
    }

    if($attr->{SHOW_FULL} == 2 && $screen_num <= $#{$list} ) {
      $screen_num++;
      push @info_panel, {
        ID     => mk_unique_value( 10 ),
        NUMBER => '',
        ICON   => 'glyphicon glyphicon-plus',
        TEXT   => $html->button("$lang{ADD} $lang{SCREENS}", "index=$index&screen=$screen_num&UID=$uid&chg=$FORM{chg}"),
        COLOR  => 'blue',
        SIZE   => 3
      };
    }


    $html->short_info_panels_row( \@info_panel );
  }
  else{
    my @screens_arr = ("$lang{SERVICE}:index=$index&UID=$uid&chg=$FORM{chg}&MODULE=Iptv");
    foreach my $line ( @{$list} ){
      if ( $line->{date} ){
        push @screens_arr,
          (($line->{name}) ? $line->{name} : "$lang{SCREENS} $line->{num}") . ":index=$index&screen=$line->{num}&UID=$uid&chg=$FORM{chg}&MODULE=Iptv";
      }
      else{
        push @screens_arr,
          "$lang{ADD} $lang{SCREENS}:index=$index&screen=$line->{num}&UID=$uid&chg=$FORM{chg}&MODULE=Iptv:class=glyphicon glyphicon-picture";
        last;
      }
    }
    print $html->table_header( \@screens_arr, { TABS => 1 } );
  }

  if ( $FORM{screen} ){
    if ( $Iptv->{SCREEN_ID} ){
      $Iptv->{DELETE} = $html->button($lang{DEL},
        "index=$index$pages_qs&del_screen=1&SERVICE_ID=$Iptv->{ID}&chg=$FORM{chg}&SCREEN_ID=$Iptv->{NUM}&screen=$FORM{screen}"
        , { MESSAGE => "$lang{DEL} [$Iptv->{NUM}] ?", class => 'btn btn-default btn-danger pull-right' } );
    }

    if ( $Tv_service && $Tv_service->{SERVICE_USER_SCREEN_FORM} ){
      my $fn = $Tv_service->{SERVICE_USER_SCREEN_FORM};
      &{ \&$fn }( $attr );
    }
    else {
      $html->tpl_show( _include( 'iptv_user_screens', 'Iptv' ), $Iptv );
    }
  }

  return 1;
}

#**********************************************************
=head2 iptv_payments_maked($attr) - Cross module payment maked

=cut
#**********************************************************
sub iptv_payments_maked{
  my ($attr) = @_;

  my $user;
  $user = $attr->{USER_INFO} if ($attr->{USER_INFO});

  #return '' if ($FORM{DISABLE});

  my $list = $Iptv->user_list( {
    UID        => $user->{UID},
    COLS_NAME  => 1,
    SERVICE_ID => '_SHOW'
  } );

  if ( $Iptv->{TOTAL} < 1 ){
    return 0;
  }

  foreach my $service_user ( @{$list} ){
    $Iptv->user_info( $service_user->{id} );

    if ($FORM{newpassword}) {
      iptv_account_action({
        %{($Iptv && ref $Iptv eq 'HASH') ? $Iptv : {}},
        PASSWORD  => $FORM{newpassword},
        change    => 1,
        USER_INFO => $user
      });

      next;
    }

    if ( !$Iptv->{TP_NUM} ){
      return 0;
    }
    #my $deposit = $attr->{USER_INFO}->{DEPOSIT} + (($attr->{USER_INFO}->{CREDIT} > 0) ? $attr->{USER_INFO}->{CREDIT} : $Iptv->{TP_CREDIT});
    #my $abon_fees = (defined( $attr->{USER_INFO}->{REDUCTION} ) && $attr->{USER_INFO}->{REDUCTION} == 0) ? ($Iptv->{MONTH_FEE} + $Iptv->{DAY_FEE}) * (100 - $attr->{USER_INFO}->{REDUCTION}) / 100 : $Iptv->{MONTH_FEE} + $Iptv->{DAY_FEE};
    #if ($conf{DV_FULL_MONTH}) {
    #  $abon_fees = ($attr->{USER_INFO}->{REDUCTION} == 0) ? $Iptv->{MONTH_FEE} + $Iptv->{DAY_FEE} * 30 : ($Iptv->{MONTH_FEE} + $Iptv->{DAY_ABON} * 30) * (100 - $attr->{USER_INFO}->{REDUCTION}) / 100;
    #}

    # Use all status
    #if ( $Iptv->{STATUS} > 3 ){

    if($FORM{DISABLE}) {
      $Iptv->{STATUS}=1;
      iptv_account_action({
        %{($Iptv && ref $Iptv eq 'HASH') ? $Iptv : {}},
        change    => 1,
        USER_INFO => $user,
        STATUS    => 1,
      });
    }
    else {
      iptv_user_activate( $Iptv, {
        USER       => $user,
        #REACTIVATE => $attr->{SUM} #(! $attr->{SUM}) ? 1 : 0,
      } );
    }
  }

  return 1;
}

#**********************************************************
=head2 iptv_docs($attr) - get services for invoice

  Arguments:
    UID
  Results:

=cut
#**********************************************************
sub iptv_docs{
  my ($attr) = @_;

  my $uid = $attr->{UID};
  my @services = ();
  my %info = ();

  my $list = $Iptv->user_list(
    {
      UID             => $uid,
      SERVICE_DISABLE => 0,
      ACCOUN_DISABLE  => 0,
      MONTH_FEE       => '_SHOW',
      DAY_FEE         => '_SHOW',
      TP_ID           => '_SHOW',
      TP_NAME         => '_SHOW',
      FEES_METHOD     => '_SHOW',
      COLS_NAME       => 1
    }
  );

  foreach my $line ( @{$list} ){
    #    if ($line->{discount} > 0) {
    #      $line->{price} = $line->{price} * ((100 - $line->{discount}) / 100);
    #    }
    if(! defined($line->{month_fee})) {
      next;
    }
    if ( $line->{month_fee} > 0 ){
      my %FEES_DSC = (
        MODULE          => "Iptv",
        SERVICE_NAME    => $lang{TV},
        TP_ID           => $line->{tp_id},
        TP_NAME         => $line->{tp_name},
        FEES_PERIOD_DAY => $lang{MONTH_FEE_SHORT},
        #        FEES_METHOD     => $FEES_METHODS{ $line->{fees_method} },
      );

      push @services, fees_dsc_former( \%FEES_DSC ) . "||$line->{month_fee}||$line->{tp_name}";
    }

    if ( $line->{day_fee} && $line->{day_fee} > 0 ){
      my $next_month = next_month( { DATE => $DATE } );
      my $days_in_month = days_in_month( { DATE => $next_month } );
      push @services,
        "Tv: $lang{MONTH_FEE_SHORT}: $line->{tp_name} ($line->{tp_id})|$days_in_month $lang{DAY}|"
          . sprintf( "%.2f",  ($line->{day_fee} * $days_in_month) ) . "||$line->{tp_name}";
    }
  }

  #Channels
  my %services_info = (
    UID            => $uid,
  );

  iptv_channels_fees(\%services_info);

  if($services_info{USERS_SERVICES} && $uid) {
    foreach my $service (@{$services_info{USERS_SERVICES}->{ $uid }}) {
      push @services,
        "Tv: $service->{DESCRIBE}||$service->{SUM}||$service->{DESCRIBE}";
    }
  }

  if ( $attr->{FEES_INFO} ){
    return \%info;
  }

  return \@services;
}

#**********************************************************
=head iptv_quick_info($attr) - Quick information

  Arguments:
    $attr

=cut
#**********************************************************
sub iptv_quick_info {
  my ($attr) = @_;
  my $result;

  my $uid = $attr->{UID} || $FORM{UID};

  if ($attr->{UID}) {
    my $list = $Iptv->user_list({
      UID        => $uid,
      TP_NAME    => '_SHOW',
      MONTH_FEE  => '_SHOW',
      CID        => '_SHOW',
      TP_COMMENTS=> '_SHOW',
      STATUS     => '_SHOW',
      IP         => '_SHOW',
      COLS_NAME  => 1,
      COLS_UPPER => 1
    });

    $result = $list->[0];
    my $service_status = sel_status({ HASH_RESULT => 1 });
    $result->{STATUS} = (defined($result->{STATUS})) ? $service_status->{ $result->{STATUS} } : '';

    return $result;
  }
  elsif($attr->{GET_PARAMS}) {
    $result = {
      HEADER    => $lang{TV},
      QUICK_TPL => 'iptv_qi_box',
      FIELDS => {
        TP_NAME     => $lang{TARIF_PLAN},
        IP          => 'IP',
        STATUS      => $lang{STATUS},
        MONTH_FEE   => $lang{MONTH_FEE},
        TP_COMMENTS => $lang{COMMENTS},
      }
    };

    return $result;
  }

  $Iptv->user_list({
    UID        =>  $uid,
    TP_NAME    => '_SHOW',
    MONTH_FEE  => '_SHOW',
    CID        => '_SHOW',
    TP_COMMENTS=> '_SHOW',
    STATUS     => '_SHOW',
    IP         => '_SHOW',
    COLS_NAME  => 1,
    COLS_UPPER => 1
  });

  return ($Iptv->{TOTAL} > 0) ? $Iptv->{TOTAL} : '';
}

#**********************************************************
=head iptv_password_change($attr) - Password change for plugins

  Arguments:
    $attr

=cut
#**********************************************************
sub iptv_password_change {
  #my ($attr) = @_;


  return 1;
}

#**********************************************************
=head iptv_devices($attr)

  Arguments:
    $attr

=cut
#**********************************************************
sub iptv_devices {

  my $services = $html->form_main(
    {
      CONTENT => tv_services_sel(),
      HIDDEN  => { index => $index },
      SUBMIT  => { show  => $lang{SHOW} },
      class   => 'navbar-form navbar-right',
    }
  );

  func_menu({ $lang{NAME} => $services });

  if($FORM{SERVICE_ID}) {
    my %other_attr = ();

    if ($FORM{add}) {
      $Iptv->device_info({
        DEVICE_ID  => $FORM{DEVICE_ID},
        SERVICE_ID => $FORM{SERVICE_ID},
      });

      if (!$Iptv->{TOTAL}) {
        $Iptv->device_add({
          DEV_ID        => $FORM{DEVICE_ID},
          UID           => $FORM{USER_SELECT},
          ENABLE        => (defined($FORM{ENABLE})) ? 0 : 1,
          DATE_ACTIVITY => POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime()),
          IP_ACTIVITY   => $FORM{IP_ACTIVITY} || '',
          SERVICE_ID    => $FORM{SERVICE_ID},
          CODE          => $FORM{CODE},
        });
      }
      else {
        $html->message('error', $lang{ERROR}, "Device is already exist");
      }
      $other_attr{BTN_ACTION} = "add";
      $other_attr{BTN_LNG} = "$lang{ADD}";
      $other_attr{DEVICE_ACTION} = "$lang{ADD} $lang{DEVICE}";
    }
    elsif ($FORM{chg}) {
      $Iptv->device_info({
        DEVICE_ID  => $FORM{DEVICE_ID},
        SERVICE_ID => $FORM{SERVICE_ID},
      });

      if (($FORM{DEV_ID} && $Iptv->{TOTAL} == 1 && $Iptv->{ID} eq $FORM{DEV_ID}) || (!$Iptv->{TOTAL})) {
        $Iptv->device_change({
          ID            => $FORM{DEV_ID},
          CODE          => $FORM{CODE},
          DEV_ID        => $FORM{DEVICE_ID},
          UID           => $FORM{USER_SELECT},
          ENABLE        => (defined($FORM{ENABLE})) ? 0 : 1,
          DATE_ACTIVITY => POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime()),
          IP_ACTIVITY   => $FORM{IP_ACTIVITY} || '',
        });
      }
      elsif ($Iptv->{TOTAL} == 1) {
        $html->message('error', $lang{ERROR}, "Device is already exist");
      }

      $other_attr{BTN_ACTION} = "add";
      $other_attr{BTN_LNG} = "$lang{ADD}";
      $other_attr{DEVICE_ACTION} = "$lang{ADD} $lang{DEVICE}";
    }
    elsif ($FORM{delete}) {
      $Iptv->device_del($FORM{DEVICE_ID});
      $other_attr{BTN_ACTION} = "add";
      $other_attr{BTN_LNG} = "$lang{ADD}";
      $other_attr{DEVICE_ACTION} = "$lang{ADD} $lang{DEVICE}";
    }
    elsif ($FORM{change}) {
      my $chg_device = $Iptv->device_list({
        ID            => $FORM{DEVICE_ID},
        UID           => '_SHOW',
        ENABLE        => '_SHOW',
        DATE_ACTIVITY => '_SHOW',
        IP_ACTIVITY   => '_SHOW',
        DEV_ID        => '_SHOW',
        CODE          => '_SHOW',
      });

      $other_attr{DEVICE_ID} = $chg_device->[0]{DEV_ID};
      $other_attr{IP_ACTIVITY} = $chg_device->[0]{IP_ACTIVITY};
      $other_attr{UID} = $chg_device->[0]{UID};
      $other_attr{BTN_ACTION} = "chg";
      $other_attr{BTN_LNG} = "$lang{CHANGE}";
      $other_attr{DEVICE_ACTION} = "$lang{CHANGE} $lang{DEVICE}";
      $other_attr{DEV_ID} = $FORM{DEVICE_ID};
      $other_attr{CODE} = $chg_device->[0]{CODE};
      if (! $chg_device->[0]{ENABLE} || $chg_device->[0]{ENABLE} ne '1'){
        $other_attr{ENABLE} = 1
      }
    }
    else{
      $other_attr{BTN_ACTION} = "add";
      $other_attr{BTN_LNG} = "$lang{ADD}";
      $other_attr{DEVICE_ACTION} = "$lang{ADD} $lang{DEVICE}";
    }

    my $access_users = $Iptv->device_list({
      UID           => '_SHOW',
      SERVICE_ID    => $FORM{SERVICE_ID},
      USERS         => 1,
      COLS_NAME     => 1,
      PAGE_ROWS     => 99999,
    });

    my $select_users = $html->form_select(
      'USER_SELECT',
      {
        SELECTED    => $other_attr{UID} || 0,
        SEL_LIST    => $access_users,
        SEL_KEY     => 'uid',
        SEL_VALUE   => 'LOGIN',
        NO_ID       => 1,
        SEL_OPTIONS => { '' => '--' },
      }
    );

    $html->tpl_show( _include( 'iptv_devices_main', 'Iptv' ), {
      USERS_LIST => $select_users,
      SERVICE_ID => $FORM{SERVICE_ID},
      %other_attr,
    });

    my $devices = $Iptv->device_list({
      UID           => '_SHOW',
      ENABLE        => '_SHOW',
      DATE_ACTIVITY => '_SHOW',
      IP_ACTIVITY   => '_SHOW',
      DEV_ID        => '_SHOW',
      CODE          => '_SHOW',
      SERVICE_ID    => $FORM{SERVICE_ID},
    });

    my $table = $html->table(
      {
        width      => '100%',
        title      => [ "ID", $lang{USER}, $lang{DEVICE}, $lang{DATE}, "IP", $lang{ENABLE}, $lang{CODE}, $lang{CHANGE}, $lang{REMOVE} ],
        caption    => $lang{DEVICE},
        ID         => 'IPTV_DEVICE',
        DATA_TABLE => 1,
      }
    );

    my $change_buttons = '';
    my $delete_buttons = '';
    foreach my $element (@$devices) {
      my $enable = ($element->{ENABLE} && $element->{ENABLE} eq '1') ? $lang{DISABLE} : $lang{ENABLE};
      my $device_id = $element->{ID} || '';
      $change_buttons = $html->button($lang{CHANGE}, "index=$index&change=1&DEVICE_ID=$device_id&SERVICE_ID=$FORM{SERVICE_ID}", { class => 'change' });
      $delete_buttons = $html->button($lang{REMOVE}, "index=$index&delete=1&DEVICE_ID=$device_id&SERVICE_ID=$FORM{SERVICE_ID}", { class => 'del' });
      $table->addrow($element->{ID}, $element->{LOGIN} || "", $element->{DEV_ID} || "", $element->{DATE_ACTIVITY} || "",
        $element->{IP_ACTIVITY} || "", $enable, $element->{CODE} || "", $change_buttons, $delete_buttons);
    }
    print $table->show();
  }

  return 1;
}

1
