=head1 NAME

  Docs functions

  Error ID: 5xx

=cut

use warnings FATAL => 'all';
use strict;
use Docs;
use Fees;
use Abills::Base qw(int2ml in_array sendmail date_format cmd mk_unique_value);
use Abills::Defs;

our ($db,
  $admin,
  $users,
  %conf,
  %lang,
  $html,
  @MONTHES_LIT,
  @MONTHES,
  @WEEKDAYS,
  %err_strs,
  @units, # ??
  %permissions,

  @one,
  @ones,
  @onest,
  @twos,
  @fifth,
  @ten,
  @tens,
  @hundred,
  @money_unit_names,
  $Conf,
  %ADMIN_REPORT
); # ??

our Docs $Docs    = Docs->new( $db, $admin, \%conf );
my $Fees     = Fees->new( $db, $admin, \%conf );
my $Payments = Payments->new( $db, $admin, \%conf );
#Default 20% VAT
$conf{DOCS_VAT_INCLUDE} = 20 if (!defined( $conf{DOCS_VAT_INCLUDE} ));
my @service_status_colors = ($_COLORS[9], $_COLORS[6]);
my @service_status = ($lang{ENABLE}, $lang{DISABLE});


if($permissions{3}) {
  require Docs::Reports;
}

if(%ADMIN_REPORT) {
  require Docs::Periodic;
}

require Docs::Invoices;
require Docs::Receipts;
require Docs::Tax;
require Docs::Acts;

#***********************************************************
=head2 docs_user_del() - Delete user from module

=cut
#***********************************************************
sub docs_user_del{
  my ($uid) = @_;

  $Docs->{UID} = $uid;
  $Docs->del( { UID => $uid } );

  return 1;
}

#**********************************************************
=head2 docs_contract($attr) - show user contract

  Arguments:
    $attr

=cut
#**********************************************************
sub docs_contract{
  my ($attr) = @_;

  my $contract_tpl = 'contract';
  if ( $FORM{UID} ){
    if ( !$users && $user ){
      $users = $user;
    }

    $Docs->{UID} = $FORM{UID};

    my $user_main_info = $users->info( $FORM{UID}, { SHOW_PASSWORD => 1 } );
    $users->pi( { UID => $FORM{UID} } );

    $FORM{DOMAIN_ID}        = $users->{DOMAIN_ID} if ($users->{DOMAIN_ID});
    $Docs->{CONTRACT_DATE}  = $users->{CONTRACT_DATE};
    $Docs->{CONTRACT_SUFIX} = $users->{CONTRACT_SUFIX};

    $attr = { %{$user_main_info}, %{ ($attr) ? $attr : {}  } };
  }
  else{
    $Docs->{CONTRACT_DATE} = $attr->{CONTRACT_DATE};
    $Docs->{CONTRACT_SUFIX} = $attr->{CONTRACT_SUFIX};
    $contract_tpl = 'contract_company';
  }

  my ($y, $m, $d) = split( /-/, $Docs->{CONTRACT_DATE} || $DATE, 3 );
  $Docs->{CONTRACT_DATE_LIT} = "$d " . $MONTHES_LIT[ int( $m ) - 1 ] . " $y $lang{YEAR_SHORT}";
  if ( $y =~ /(\d{2})$/ ){
    $users->{CONTRACT_YY} = $1;
  }
  #User Tp info
  my $Internet;

  if(in_array('Internet', \@MODULES)) {
    require Internet;
    Internet->import();
    $Internet = Internet->new($db, $admin, \%conf);
  }
  else {
    require Dv;
    Dv->import();
    $Internet = Dv->new($db, $admin, \%conf);
  }

  my $internet_info = $Internet->info($Docs->{UID});
  $Docs->{DOCS_TPNAME_INTERNET} = $internet_info->{TP_NAME};

  my $docs_service_info = docs_module_info({ UID => $Docs->{UID} });

  #User Contacts info
  my $contacts = _docs_user_contacts_info( { UID => $Docs->{UID}, } );

  if ( $Docs->{CONTRACT_SUFIX} ){
    if ( $conf{DOCS_CONTRACT_TYPES} ){
      #PREFIX:SUFIX:NAME;
      $conf{DOCS_CONTRACT_TYPES} =~ s/\n//g;
      my (@contract_types_list) = split( /;/, $conf{DOCS_CONTRACT_TYPES} );
      foreach my $line ( @contract_types_list ){
        my (undef, $sufix, undef, $tpl_name) = split( /:/, $line );
        if ( $sufix eq $Docs->{CONTRACT_SUFIX} ){
          $contract_tpl = $tpl_name;
          $Docs->{CONTRACT_ID} .= $Docs->{CONTRACT_SUFIX};
          last;
        }
      }
    }
  }

  return docs_print( $contract_tpl, {
    %{$admin},
    %{$users},
    %{$Docs},
    %{$docs_service_info},
    %{$contacts},
    %{($attr) ? $attr : {}}
  } );
}

#**********************************************************
=head2 docs_preview($type, $attr)

  Arguments:
    $type
    $attr

  Returns:
    True or  FALSE

=cut
#**********************************************************
sub docs_preview{
  my ($type, $attr) = @_;

  my $template = $type;

  $html->tpl_show( _include( "docs_$template.tpl", 'Docs' ), $attr );

  return 1;
}

#**********************************************************
=head2 docs_print($type, $attr)

  Arguments:
    $type
    $attr
      OUTPUT2RETURN
      SEND_EMAIL
      CERT
      FILE_NAME
      EMAIL_ATTACH_FILENAME
      DOCS  - Docs obj

  Returns:
    TRUE or FALSE

=cut
#**********************************************************
sub docs_print{
  my ($type, $attr) = @_;

  if($attr->{DOCS}) {
    $Docs = $attr->{DOCS};
  }

  $conf{DOCS_LANGUAGE} = $conf{default_language} if (!$conf{DOCS_LANGUAGE});
  my $filestore_dir = $conf{DOCS_STORE_DIR} || '/usr/abills/Abills/temlates/Docs/';

  if ( $conf{DOCS_LANGUAGE} && $html->{language} ne $conf{DOCS_LANGUAGE} ){
    if ( -f "../Abills/modules/Docs/lng_$conf{DOCS_LANGUAGE}.pl" ){
      do "../language/$conf{DOCS_LANGUAGE}.pl";
      do "../Abills/modules/Docs/lng_$conf{DOCS_LANGUAGE}.pl";
    }
    elsif ( -f $Bin . "/../Abills/modules/Docs/lng_$conf{DOCS_LANGUAGE}.pl" ){
      do $Bin . "/../language/$conf{DOCS_LANGUAGE}.pl";
      do $Bin . "/../Abills/modules/Docs/lng_$conf{DOCS_LANGUAGE}.pl";
    }
    else{
      do "../../language/$conf{DOCS_LANGUAGE}.pl";
      do "../../Abills/modules/Docs/lng_$conf{DOCS_LANGUAGE}.pl";
    }
  }

  my $value_list = $Conf->config_list({
    CUSTOM   => 1,
    COLS_NAME=> 1
  });

  foreach my $line (@$value_list){
    $attr->{"$line->{param}"}=$line->{value};
  }

  if ( @MONTHES_LIT && $attr->{DATE} ){
    my ($y, $m, $d) = split( /-/, $attr->{DATE}, 3 );

    $attr->{FROM_DATE_LIT} = "$d " . $MONTHES_LIT[ int( $m ) - 1 ] . " $y $lang{YEAR_SHORT}";
    $attr->{DAY} = $d;
    $attr->{MONTH_LIT} = $MONTHES_LIT[ int( $m ) - 1 ];
    $attr->{YEAR} = $y;
    $attr->{DATE_EURO_STANDART} = "$d.$m.$y";
  }

  $attr->{A_FIO} = $admin->{A_FIO} if ($admin->{A_FIO});
  my $MONEY_UNIT_NAMES = [];
  if ( $conf{MONEY_UNIT_NAMES} ){
    $MONEY_UNIT_NAMES = $conf{MONEY_UNIT_NAMES};
  }
  elsif ( @money_unit_names ){
    $MONEY_UNIT_NAMES = \@money_unit_names;
  }


  if($attr->{TOTAL_SUM}) {
    ($attr->{SUM_MAIN}, $attr->{SUM_SUB}) = split(/\./, $attr->{TOTAL_SUM});

    $attr->{SUM_LIT} = int2ml(
      $attr->{TOTAL_SUM},
      {
        ONES             => \@ones,
        TWOS             => \@twos,
        FIFTH            => \@fifth,
        ONE              => \@one,
        ONEST            => \@onest,
        TEN              => \@ten,
        TENS             => \@tens,
        HUNDRED          => \@hundred,
        MONEY_UNIT_NAMES => $MONEY_UNIT_NAMES,
        LOCALE           => $conf{LOCALE} || ''
      }
    );
  }

  if ( $attr->{TOTAL_ALT_SUM} ){
    $attr->{SUM_ALT_LIT} = int2ml( $attr->{TOTAL_ALT_SUM},
      {
        ONES             => \@ones,
        TWOS             => \@twos,
        FIFTH            => \@fifth,
        ONE              => \@one,
        ONEST            => \@onest,
        TEN              => \@ten,
        TENS             => \@tens,
        HUNDRED          => \@hundred,
        MONEY_UNIT_NAMES => $MONEY_UNIT_NAMES,
        LOCALE           => $conf{LOCALE}
      } );
  }

  if ( $Docs->{ORDER_TOTAL_SUM_VAT} ){
    $attr->{ORDER_TOTAL_SUM_VAT_LIT} = int2ml( $attr->{ORDER_TOTAL_SUM_VAT},
      {
        ONES             => \@ones,
        TWOS             => \@twos,
        FIFTH            => \@fifth,
        ONE              => \@one,
        ONEST            => \@onest,
        TEN              => \@ten,
        TENS             => \@tens,
        HUNDRED          => \@hundred,
        MONEY_UNIT_NAMES => $MONEY_UNIT_NAMES,
        LOCALE           => $conf{LOCALE}
      }
    );
  }

  my $template = $type;
  if ( $FORM{qindex} && !$attr->{NO_HEADER} ){
    print $html->header();
  }

  if ( $LIST_PARAMS{COMPANY_ID} ){

  }
  else{
    $users = $user if ($user && $user->{UID});
  }

  if ( $Docs->{UID} ){
    $users->info( $Docs->{UID} ) if (!$users->{BILL_ID});
    $users->pi( { UID => $Docs->{UID} } );
    $users->{ADDRESS_FULL} = "$users->{ADDRESS_STREET} $conf{BUILD_DELIMITER} $users->{ADDRESS_BUILD} $conf{BUILD_DELIMITER} $users->{ADDRESS_FLAT}" if ($users->{ADDRESS_STREET});

    if ( $users->{GID} ){
      $users->group_info( $users->{GID} );
      if ( $users->{SEPARATE_DOCS} ){
        $attr->{SUFIX} = $users->{GID};
      }
    }

    $Docs->user_info( $Docs->{UID} );
    if ( $Docs->{TOTAL} > 0 ){
      $users->{EMAIL} = $Docs->{EMAIL} if ($Docs->{EMAIL});
      $attr->{SEND_EMAIL} = $Docs->{SEND_DOCS} if (!defined( $attr->{SEND_EMAIL} ) && $Docs->{SEND_DOCS});
    }
  }

  #Make individual templates for paments methods
  if ( $attr->{PAYMENT_METHOD_ID} && $FORM{pdf} ){
    my $new_template = $template . '_' . $attr->{PAYMENT_METHOD_ID};
    my $template_content = _include( 'docs_' . $new_template, 'Docs', { $FORM{pdf} => 1 } );
    if ( $template_content !~ /No such / && $template_content ne '' ){
      $template = $new_template;
    }
    elsif ( $attr->{SUFIX} ){
      $attr->{SUFIX} = '_' . $attr->{SUFIX};
    }
  }
  elsif ( $attr->{SUFIX} ){
    $attr->{SUFIX} = '_' . $attr->{SUFIX};
  }

  my %tpl_attributtes = ();

  # Make qrcode with organization params
  if ($conf{'DOCS_QRCODE_INCLUDE_' . uc($type)}) {

    my @qrcode_params = split(/:/, $conf{'DOCS_QRCODE_INCLUDE_' . uc($type)});
    my $pdf_params = pop @qrcode_params; # Shift from the end

    # Will create file, so should run it only in need
    my $get_qrcode_filename = sub {
      my $qrcode_filename = _docs_make_qrcode(\@qrcode_params, \%conf, $users, $attr);
      $qrcode_filename;
    };

    if ( $FORM{pdf} || $html->{pdf_output} ) {
        $tpl_attributtes{EXTEND_TPL_DESCRIBE} = {
          QR_CODE => {
            PARAMS   => $pdf_params . '; img=' . &{$get_qrcode_filename}(),
          }
        };
    }
    else {
      my $qrcode_filename = &{$get_qrcode_filename}();
      $attr->{QR_CODE} = $html->img('/images/' . $qrcode_filename, 'qrcode', {
          class => 'img-responsive center-block'
        });
    }
  }

  my $filename = $attr->{FILE_NAME} || $attr->{EMAIL_ATTACH_FILENAME} || $template;
  $filename .= '_'. ($attr->{UID} || q{});
  $filename .= '_'. ($attr->{DOC_ID} || q{});

  my $save_file = $filestore_dir . $filename . (($FORM{pdf}) ? '.pdf' : '.htm');
  my $content = '';

  if(! -f $save_file) {
    my $html_old;
    if ($FORM{pdf} && !$html->{pdf_output}) {
      $html_old = $html;
      require Abills::PDF;
      my $pdf = Abills::PDF->new(
        {
          #IMG_PATH => $IMG_PATH,
          NO_PRINT => defined($attr->{'NO_PRINT'}) ? $attr->{'NO_PRINT'} : 1,
          CONF     => \%conf,
          CHARSET  => $conf{default_charset}
        }
      );
      $html = $pdf;
    }

    eval {
      $content = $html->tpl_show(
        _include(
          "docs_$template",
          'Docs',
          {
            pdf   => $FORM{pdf},
            SUFIX => $attr->{SUFIX}
          }
        ),
        { %{$users},
          %{$attr},
        },
        { TITLE         => $template,
          SUBJECT       => $template,
          ID            => 'docs_' . $template,
          FILENAME      => $filename,
          OUTPUT2RETURN => $attr->{CERT} || $attr->{OUTPUT2RETURN},
          %tpl_attributtes
        }
      );
    };

    $html = $html_old if ($html_old);

    if($conf{DOCS_CERT_CMD}) {
      if (open(my $fh, '>', $save_file)) {
        print $fh $content;
        close($fh);
      }
#      else {
#        print "Content-Type: text/plain\n\n";
#        print "Can't create doc file '$save_file' $!;";
#      }
    }
  }
  else {
    $content = q{};

    if($FORM{pdf}) {
      $content .= "Content-type: application/pdf; filename=$filename.pdf\n";
      $content .= "Cache-Control: no-cache\n";
      $content .= "Content-disposition: inline; name=\"$filename.pdf\"\n\n";
    }

    open(my $fh, '<', $save_file);
    while(<$fh>) {
      $content .= $_;
    }
    close($fh);
  }

  if ( $@ ){
    $html->message( 'err', "Template $lang{ERROR}", "$@" );
  }

  my @ATTACHMENTS = ();
  if ( $FORM{pdf} ){
    @ATTACHMENTS = (
      {
        CONTENT      => $content,
        CONTENT_TYPE => 'Content-Type: application/pdf',
        FILENAME     => $filename . '.pdf'
      }
    );
    delete $FORM{pdf};
  }
  else{
    @ATTACHMENTS = (
      {
        CONTENT      => $content,
        CONTENT_TYPE => 'Content-Type: text/html',
        FILENAME     => $filename . '.htm'
      }
    );
  }

  if($attr->{CERT}) {
    $content = docs_certs({
      CONTENT  => $content,
      FILENAME => $filename
    });

    push @ATTACHMENTS, {
      CONTENT      => $content,
      CONTENT_TYPE => 'Content-Type: application/file',
      FILENAME     => $filename . '.pdf.sig'
    };

    if(! $attr->{OUTPUT2RETURN}) {
      print "Content-Type: application/file; \n"
       ."Content-Disposition: attachment; filename=\"$filename.pdf.sig\""
       ."\n\n";
    }
  }

  if ( $conf{DOCS_LANGUAGE} && $html->{language} ne $conf{DOCS_LANGUAGE} ){
    if ( -f "../Abills/modules/Docs/lng_$html->{language}.pl" ){
      do "../language/$html->{language}.pl";
      do "../Abills/modules/Docs/lng_$html->{language}.pl";
    }
    elsif ( -f $Bin . "/../Abills/modules/Docs/lng_$html->{language}.pl" ){
      do $Bin . "/../language/$html->{language}.pl";
      do $Bin . "/../Abills/modules/Docs/lng_$html->{language}.pl";
    }
    else{
      delete $INC{"../../language/$html->{language}.pl"};
      do "../../language/$html->{language}.pl";
      do "../../Abills/modules/Docs/lng_$html->{language}.pl";
    }
  }

  if ( $attr->{SEND_EMAIL} && !$attr->{OUTPUT2RETURN} ){
    # Email not specified
    if ( !$attr->{EMAIL} && !$users->{EMAIL} ){
      $FORM{ERR_MESSAGE} = "E-mail $lang{NOT_EXIST}";
      return 0;
    }
    elsif ( !$content ){
      $FORM{ERR_MESSAGE} = "No content";
      return 0;
    }

    sendmail(
      $conf{ADMIN_MAIL},
      $attr->{EMAIL} || $users->{EMAIL},
      $attr->{EMAIL_MSG_SUBJECT} || "ABillS",
      $attr->{EMAIL_MSG_TEXT},
      "$conf{MAIL_CHARSET}",
      '',
      {
        ATTACHMENTS => \@ATTACHMENTS,
        TEST        => $FORM{DEBUG} || undef
      }
    );

    return 1;
  }
  else{
    return $content;
  }
}

#**********************************************************
=head2 docs_payments_maked($attr) - Cross ,odule calls

  Arguments:
    $attr
      CHANGE_CREDIT


=cut
#**********************************************************
sub docs_payments_maked{
  my ($attr) = @_;

  if ( $attr->{CHANGE_CREDIT} ){
    return 0;
  }
  #Add invoice number
  elsif ( !$FORM{SUM} || $FORM{SUM} == 0 ){
    if ( $FORM{APPLY_TO_INVOICE} || $FORM{INVOICE_ID} ){
      print %FORM;
      $html->message( 'err', "$lang{DOCS}:$lang{ERROR}", "$lang{ERR_WRONG_SUM}", { ID => 561  });
    }
    return 0;
  }

  if ( $FORM{APPLY_TO_INVOICE} || ($FORM{INVOICE_ID} && $FORM{INVOICE_ID} ne 'create') ){
    delete( $FORM{INVOICE_ID} ) if (defined( $FORM{INVOICE_ID} ) && $FORM{INVOICE_ID} == 0);
    my $list = $Docs->invoices_list( {
      UNPAIMENT => ($FORM{INVOICE_ID}) ? undef : 1,
      ID        => $FORM{INVOICE_ID},
      UID       => $FORM{UID},
      PAGE_ROWS => 50,
      COLS_NAME => 1,
      SORT      => 1,
      DESC      => 'ASC'
    } );

    my $total_payment_sum = $FORM{SUM};
    my $payment_sum       = $FORM{SUM};

    if ( $Docs->{TOTAL} > 0 ){
      foreach my $doc ( @{$list} ){
        if ( $doc->{payment_sum} && $doc->{total_sum} < $doc->{payment_sum} ){
          print " //     my $payment_sum       = $FORM{SUM}; // $doc->{total_sum} < $doc->{payment_sum} ";
          next;
        }

        if ( $FORM{SUM} > $doc->{total_sum} - ($doc->{payment_sum} || 0) ){
          $payment_sum = $doc->{total_sum} - ($doc->{payment_sum} || 0);
          print "Pre link: Total: $doc->{total_sum} Payments: ". ($doc->{payment_sum} || 0) ." Doc id: $doc->{id}\n";
        }

        $Docs->invoices2payments( {
          PAYMENT_ID => $attr->{PAYMENT_ID},
          INVOICE_ID => $doc->{id},
          SUM        => $payment_sum
        } );

        if ( _error_show( $Docs, { MESSAGE => "$lang{INVOICE}", ID => 562 } ) ){
        }
        elsif ( !$conf{PAYMENTS_NOT_CHECK_INVOICE_SUM} && $Docs->{TOTAL_SUM} != $FORM{SUM} ){
          $html->message( 'warn', $lang{ERROR}, "$lang{PAYMENTS_NOT_EQUAL_DOC} \n  $lang{INVOICE} $lang{SUM}: $Docs->{TOTAL_SUM} \n$lang{PAYMENTS} $lang{SUM}: $FORM{SUM}" );
        }

        if ( $total_payment_sum - $payment_sum == 0 ){
          last;
        }
      }
    }
    else{
      print "Invoice not found ($Docs->{TOTAL})";
    }
  }

  if ( $FORM{CREATE_RECEIPT} ){
    docs_receipt_add({
      DATE         => $DATE,
      CUSTOMER   => '-',
      PHONE      => '',
      UID        => $FORM{UID},
      ORDER      => $FORM{DESCRIBE} || '-',
      SUM        => $FORM{SUM},
      create     => 1,
      PAYMENT_ID => $attr->{PAYMENT_ID},
      SEND_EMAIL => $FORM{SEND_EMAIL}
    });
  }

  return 1;
}

#**********************************************************
=head2 docs_users_list($attr) - Docs user

=cut
#**********************************************************
sub docs_users_list{

  if ( $FORM{search_form} ){
    $Docs->{INVOICE_PERIOD_SEL} = $html->form_select(
      'INVOICING_PERIOD',
      {
        SELECTED     => $Docs->{INVOICING_PERIOD},
        SEL_HASH     => {
          '' => $lang{ALL},
          1  => "1 $lang{MONTH}",
          3  => "3 $lang{MONTH}",
          6  => "6 $lang{MONTH}",
          12 => "12 $lang{MONTH}",
        },
        NO_ID        => 1,
        SORT_KEY_NUM => 1
      }
    );

    $Docs->{PERIODIC_CREATE_DOCS} = 'checked' if ($FORM{PERIODIC_CREATE_DOCS});
    $Docs->{SEND_DOCS} = 'checked' if ($FORM{SEND_DOCS});
    $Docs->{PERSONAL_DELIVERY} = 'checked' if ($FORM{PERSONAL_DELIVERY});

    $Docs->{INVOICE_DATE} = $html->date_fld2(
      'INVOICE_DATE',
      {
        MONTHES         => \@MONTHES,
        FORM_NAME       => 'form_search',
        WEEK_DAYS       => \@WEEKDAYS,
        NO_DEFAULT_DATE => 1,
      }
    );

    $Docs->{PRE_INVOICE_DATE} = $html->date_fld2(
      'PRE_INVOICE_DATE',
      {
        MONTHES         => \@MONTHES,
        FORM_NAME       => 'form_search',
        WEEK_DAYS       => \@WEEKDAYS,
        NO_DEFAULT_DATE => 1,
      }
    );

    $Docs->{STATUS_SEL} = $html->form_select(
      'LOGIN_STATUS',
      {
        SELECTED => $FORM{LOGIN_STATUS} || 0,
        SEL_HASH => {
          '' => "$lang{ALL}",
          0  => $service_status[0],
          1  => $service_status[1],
        },
        NO_ID    => 1,
        STYLE    => \@service_status_colors,
      }
    );

    form_search( { SEARCH_FORM => $html->tpl_show( _include( 'docs_users_search', 'Docs' ),
        { %FORM, %{$Docs} },
        { OUTPUT2RETURN => 1 } ),
        ADDRESS_FORM           => 1
      } );
  }

  result_former( {
    INPUT_DATA       => $Docs,
    FUNCTION       => 'user_list',
    BASE_FIELDS    => 0,
    DEFAULT_FIELDS => 'LOGIN,FIO,DEPOSIT,CREDIT,LOGIN_STATUS,INVOICE_DATE,NEXT_INVOICE_DATE',
    BASE_FIELDS    => 1,
    #FUNCTION_FIELDS => 'form_payments, dv_stats',
    EXT_TITLES     => {
      login_status      => $lang{STATUS},
      invoice_date      => $lang{LAST_INVOICE_DATE},
      pre_invoice_date  => "$lang{PRE} $lang{DATE}",
      invoicing_period  => "$lang{PERIOD} ($lang{MONTH})",
      next_invoice_date => "$lang{NEXT_INVOICE_DATE}",
      send_docs         => "$lang{SEND} $lang{DOCS}"
    },
    TABLE          => {
      width      => '100%',
      caption    => "$lang{USERS}",
      qs         => $pages_qs,
      ID         => 'DOCS_USERS',
      EXPORT     => 1,
      MENU       => "$lang{SEARCH}:index=$index&search_form=1:search",
    },
    MAKE_ROWS      => 1,
    MODULE         => 'Docs',
    TOTAL          => 1
  } );

  return 1;
}

#**********************************************************
=head2 docs_user($attr) - User settings

=cut
#**********************************************************
sub docs_user{
  my ($attr) = @_;

  if ( $FORM{STATEMENT_OF_ACCOUNT} ){
    docs_statement_of_account();
    return 0;
  }
  elsif ( $FORM{add} ){
    if ( !$permissions{0}{1} ){
      $html->message( 'err', $lang{ERROR}, $lang{ERR_ACCESS_DENY} );
      return 0;
    }

    $Docs->user_add( { %FORM } );
    if ( !$Docs->{errno} ){
      $html->message( 'info', $lang{INFO}, $lang{ADDED} );
      if ( $attr->{REGISTRATION} ){
        return 0;
      }
    }
  }
  elsif ( $FORM{change} ){
    if ( !$permissions{0}{4} ){
      $html->message( 'err', $lang{ERROR}, $lang{ERR_ACCESS_DENY} );
      return 0;
    }

    $Docs->user_change( { %FORM } );

    if ( !$Docs->{errno} ){
      $html->message( 'info', $lang{INFO}, $lang{CHANGED} );
      if ( $attr->{REGISTRATION} ){
        return 0;
      }
    }
  }
  elsif ( $FORM{del} ){
    $Docs->user_del();
    if ( !$Docs->{errno} ){
      $html->message( 'info', $lang{INFO}, $lang{DELETED} );
    }
  }

  if ( _error_show( $Docs ) ){
    if ( $attr->{REGISTRATION} ){
      return 1;
    }
  }

  $Docs->user_info( $FORM{UID} );

  if ( $Docs->{TOTAL} < 1 ){
    if ( $attr->{ACTION} ){
      $Docs->{ACTION} = 'add';
      $Docs->{LNG_ACTION} = $attr->{LNG_ACTION};
    }
    else{
      $html->message( 'warn', '', $lang{NOT_ACTIVE} );
      $Docs->{ACTION} = 'add';
      $Docs->{LNG_ACTION} = $lang{ACTIVATE};
    }
  }
  else{
    if ( $attr->{ACTION} ){
      $Docs->{ACTION} = 'change';
      $Docs->{LNG_ACTION} = $attr->{LNG_ACTION};
    }
    else{
      $Docs->{ACTION} = 'change';
      $Docs->{LNG_ACTION} = $lang{CHANGE};
    }
  }

  $Docs->{INVOICE_PERIOD_SEL} = $html->form_select(
    'INVOICING_PERIOD',
    {
      SELECTED     => $Docs->{INVOICING_PERIOD},
      SEL_HASH     => {
        1  => "1 $lang{MONTH}",
        3  => "3 $lang{MONTH}",
        6  => "6 $lang{MONTH}",
        12 => "12 $lang{MONTH}",
      },
      NO_ID        => 1,
      SORT_KEY_NUM => 1
    }
  );

  $Docs->{PERIODIC_CREATE_DOCS} = ($Docs->{PERIODIC_CREATE_DOCS}) ? 'checked' : '';
  $Docs->{SEND_DOCS} = ($Docs->{SEND_DOCS}) ? 'checked' : '';
  $Docs->{PERSONAL_DELIVERY} = ($Docs->{PERSONAL_DELIVERY}) ? 'checked' : '';

  if ( !$Docs->{INVOICE_DATE} ){
    if ( $users->{ACTIVATE} && $users->{ACTIVATE} ne '0000-00-00' ){
      $Docs->{INVOICE_DATE} = $users->{ACTIVATE};
    }
    else{
      $Docs->{INVOICE_DATE} = $DATE;
    }
  }

  #  $Docs->{INVOICE_DATE}         = $html->date_fld2(
  #    'INVOICE_DATE',
  #    {
  #      MONTHES   => \@MONTHES,
  #      FORM_NAME => 'receipt_add',
  #      WEEK_DAYS => \@WEEKDAYS,
  #      DATE      => $invoice_date
  #    }
  #  );

  my $user_service_form = $html->tpl_show( _include( 'docs_user', 'Docs' ), { %{$attr}, %{$Docs} }, { ID => 'docs_user', OUTPUT2RETURN => 1 } );

  if($attr->{PROFILE_MODE}) {
    return $user_service_form;
  }

  print $user_service_form;

  return 1;
}

#**********************************************************
=head2 docs_pre_payment($attr)

=cut
#**********************************************************
sub docs_pre_payment{

  if ( $FORM{INVOICE_ID} && $FORM{INVOICE_ID} eq 'create' ){
    delete $FORM{INVOICE_ID};
    docs_invoice({
      INVOICE_DATA => {
        INCLUDE_DEPOSIT   => 1,
        create            => 1,
        CUSTOMER          => '-',
        ORDER             => $FORM{DESCRIBE},
        $LIST_PARAMS{UID} => $FORM{UID},
        SUM               => $FORM{SUM}
    } });
  }
  elsif ( $FORM{INVOICE_ID} ){
    $Docs->invoice_info( $FORM{INVOICE_ID} );
    if ( $Docs->{TOTAL} == 0 ){
      $FORM{INVOICE_SUM} = 0;
    }
    else{
      $FORM{INVOICE_SUM} = $Docs->{TOTAL_SUM};
    }
  }

  return 1;
}

#**********************************************************
=head2 docs_statement_of_account($attr)

=cut
#**********************************************************
sub docs_statement_of_account{

  if($FORM{download}) {
    print "Content-Type: text/html; filename=\"statement_of_account.htm\"\n"
      . "Content-Disposition: attachment; filename=\"statement_of_account.htm\"\n\n";
    print $html->header();
  }

  my $year_date = $FORM{DATE} || $DATE;

  $LIST_PARAMS{DATE}='>='. date_format($year_date, "%Y-01-01");

  if($year_date ne $DATE) {
    my($y) = split(/-/, $year_date);
    $LIST_PARAMS{DATE}.=';<'. date_format($year_date, ($y+1) ."-01-01");
  }

  $LIST_PARAMS{PAGE_ROWS}=1000;
  if($FORM{ALL}) {
    $LIST_PARAMS{PAGE_ROWS}=10000;
    delete $LIST_PARAMS{DATE};
  }

  $Fees->{debug}=1 if($FORM{DEBUG} && $FORM{DEBUG} > 5);
  my $fees_list = $Fees->list({
    DATETIME   => '_SHOW',
    DSC        => '_SHOW',
    DEPOSIT    => '_SHOW',
    SUM        => '_SHOW',
    LAST_DEPOSIT=>'_SHOW',
    %LIST_PARAMS,
    COLS_NAME  => 1,
    COLS_UPPER => 1
  });

  my %operations = ();
  foreach my $line ( @$fees_list ) {
    push @{ $operations{$line->{datetime}} },  { %$line, FEES => 1 };
  }

  $Payments->{debug}=1 if($FORM{DEBUG} && $FORM{DEBUG} > 5);
  my $payments_list = $Payments->list({
    DATETIME    => '_SHOW',
    DSC         => '_SHOW',
    DEPOSIT     => '_SHOW',
    INVOICE_NUM => '_SHOW',
    LAST_DEPOSIT=> '_SHOW',
    %LIST_PARAMS,
    COLS_NAME   => 1,
    COLS_UPPER  => 1
  });

  foreach my $line ( @$payments_list ) {
    push @{ $operations{$line->{datetime}} }, $line;
  }

#  my $list = $Docs->statement_of_account( {
#    %LIST_PARAMS,
#    COLS_NAME  => 1,
#    COLS_UPPER => 1
#  });
#
#  foreach my $line ( @{$list} ){
#    $Docs->{ROWS} .= $html->tpl_show( _include( 'docs_statement_of_account_row', 'Docs' ),
#      { %{$line} }, { OUTPUT2RETURN => 1 } );
#  }
  $users->pi( { UID => $LIST_PARAMS{UID} } );

  foreach my $date ( sort keys %operations ) {

    foreach my $money_operation ( @{ $operations{$date} } ) {
      $Docs->{ROWS} .= $html->tpl_show( _include( 'docs_statement_of_account_row', 'Docs' ),
        {
          date        =>
            ($money_operation->{FEES}) ? $money_operation->{datetime} : $html->b(($money_operation->{datetime})),
          login       => ($money_operation->{FEES}) ? $users->{LOGIN} : $html->b($users->{LOGIN}),
          invoice_num => $html->b($money_operation->{invoice_num}),
          fio         => ($money_operation->{FEES}) ? $users->{FIO} : $html->b($users->{FIO}),
          fees_sum    => ($money_operation->{FEES}) ? sprintf("%.2f", $money_operation->{sum}) : '',
          payment_sum => ($money_operation->{FEES}) ? '' : $html->b(sprintf("%.2f", $money_operation->{sum})),
          describe    => ($money_operation->{FEES}) ? $money_operation->{dsc} : $html->b($money_operation->{dsc}),
          deposit     =>
            ($money_operation->{FEES}) ? sprintf("%.2f", $money_operation->{last_deposit}) : $html->b(sprintf("%.2f", $money_operation->{last_deposit}))
          ,
        },
        { OUTPUT2RETURN => 1 } );
    }
  }

  my ($y)=split(/-/, $DATE);
  my %date_list = ();
  for (my $i = $y; $i>($y-3); $i--) {
    $date_list{"$i-01-01"}="$i-01-01";
  }

  $Docs->{YEAR_SEL} = $html->form_select('DATE',
    {
      SELECTED  => $FORM{DATE} || $DATE,
      SEL_HASH  => \%date_list,
      NO_ID     => 1,
      EX_PARAMS => "onchange='autoReload()'",
    }
  );

  $html->tpl_show( _include( 'docs_statement_of_account', 'Docs' ),
    { %{$users},
      %{$Docs},
      DATE => $DATE },
    { } );

  return 1;
}


#***************************************************************
=head2 docs_start_page($attr)

=cut
#***************************************************************
sub docs_start_page{
  my %START_PAGE_F = (
    'docs_sp_invoice_summary' => "$lang{INVOICES}",
  );

  return \%START_PAGE_F;
}


#***************************************************************
=head2 docs_sp_invoice_summary($attr)

=cut
#***************************************************************
sub docs_sp_invoice_summary{
  my ($Y, $M, $D) = split( /-/, $DATE, 3 );

  $Docs->invoices_list({
    FROM_DATE => "$Y-$M-01",
    TO_DATE   => "$Y-$M-$D",
    UNPAIMENT => 1
  });

  my $qs = "&FROM_DATE=$Y-$M-01&TO_DATE=$Y-$M-$D&search=1";

  my $table = $html->table(
    {
      width   => '100%',
      caption => "$lang{INVOICES}",
      ID      => 'DOCS_INVOICE',
      rows    => [
        [ "$lang{TOTAL}:", $html->button( $Docs->{TOTAL_}, 'index=' . get_function_index( 'docs_invoices_list' ) . $qs ) ],
        [ "$lang{USERS}:", $html->b( $Docs->{TOTAL_USERS} || 0 ) ],
        #["$lang{SUM}:",   $html->b(sprintf("%.2f", $Docs->{TOTAL_SUM})) ],
        [ "$lang{UNPAID}:", $html->button( (($Docs->{TOTAL_} || 0) - ($Docs->{PAYMENT_COUNT} || 0)),
            "UNPAIMENT=1&index=" . get_function_index( 'docs_invoices_list' ) . $qs ) ]
      ]
    }
  );

  my $reports = $table->show();

  return $reports;
}

#**********************************************************
=head2 docs_registration_create()

=cut
#**********************************************************
sub docs_registration_create{

  if ( $FORM{print} ){
    # Prepare QRCode
    my $base_url = $SELF_URL;
    $base_url =~ s/\/admin\/index\.cgi//g;
    my $registration_url = "$base_url/registration.cgi";

    eval { require Control::Qrcode };

    if($@) {
      print $@;
    }

    $Docs->{QR_CODE} = qr_make( $SELF_URL, {
        SHOW_IMG      => 1,
        GLOBAL_URL    => $registration_url,
        OUTPUT2RETURN    => 1,
        size          => 5,
        margin        => 0,
        WRITE_TO_DISK => ($FORM{OUTPUT} eq 'pdf') ? 1 : 0
    });
    $Docs->{BASE_LINK} = $registration_url;

    # If HTML we need to load bootstrap
    if ( $FORM{OUTPUT} eq 'html' ){
      print $html->header();
      $html->tpl_show( templates( 'metatags' ), { HTML_STYLE => 'default_adm' } );
    }

    docs_print( 'registration', { %{$Docs}, %FORM, NO_HEADER => 1 } );
    return 1;
  }

  $FORM{OUTPUT} = $FORM{OUTPUT} || 'html';

  $html->tpl_show( _include( 'docs_registration_form_create', 'Docs' ), {
      HTML_CHECKED => $FORM{OUTPUT} eq 'html' ? "checked='checked'" : '',
      PDF_CHECKED  => $FORM{OUTPUT} eq 'pdf' ? "checked='checked'" : '',
      %FORM
    } );

  if ( $FORM{generate} ){
    docs_registration_preview();
  }

  return 1;
}

#**********************************************************
=head2 docs_registration_preview()

=cut
#**********************************************************
sub docs_registration_preview{
  my ($attr) = @_;

  my $base_url = $SELF_URL;
  $base_url =~ s/\/admin\/index\.cgi//g;
  my $registration_url = "$base_url/registration.cgi";

  eval { require Control::Qrcode };

  if($@){
    print $@;
  }

  $attr->{QR_CODE} = qr_make( $SELF_URL, {
      SHOW_IMG   => 1,
      GLOBAL_URL => $registration_url,
      OUTPUT2RETURN => 1,
      size       => 8,
      margin     => 0
    } );

  $attr->{BASE_LINK} = $registration_url;

  docs_print( 'registration', { %{$Docs}, %{$attr}, %FORM } );

  return 1;
}

#**********************************************************
=head2 _docs_user_contacts_info() Get information tags about user phones for docs

  Arguments:
    $attr
      UID
      TYPE  - Contacts type; default '1;2' Cell phone and home phone

  Returns:
    $attr
      CELL_PHONE_1 = User cell phone number
      HOME_PHONE_1 = User home phone number
      CELL_PHONE_2++
      HOME_PHONE_2++
=cut
#**********************************************************
sub _docs_user_contacts_info {
  my ($attr) = @_;

  return {} unless ( $attr->{UID} );


  require Contacts;
  Contacts->import();
  my $Contacts = Contacts->new($db, $admin, \%conf);

  my $user_phones = $Contacts->contacts_list({
    UID   => $attr->{UID},
    VALUE => '_SHOW',
    TYPE  => $attr->{TYPE} ? $attr->{TYPE} : '1;2',
  });
  _error_show($Contacts);

  my %result_hash = ();

  for ( my $i = 0; $i < scalar @{$user_phones}; $i++ ) {
    my $user_contact = $user_phones->[$i];

    if ( $user_contact->{type_id} == 1 ) {
      $result_hash{"CELL_PHONE_" . $i} = $user_contact->{value};
    }
    elsif ( $user_contact->{type_id} == 2 ) {
      $result_hash{"HOME_PHONE_" . $i} = $user_contact->{value};
    }

  }

  return \%result_hash;
}

#**********************************************************
=head2 _alt_sum_filter($alt_sum, $currency);

=cut
#**********************************************************
sub _alt_sum_filter {
  my ($alt_sum, $currency) = @_;

  $currency = ($currency) ? "($currency)" : q{};

  return "$alt_sum $currency";
}

#**********************************************************
=head2 docs_certs($attr);

  Arguments:
    $attr
      CONTENT
      DEBUG
      FILE_NAME

  Returns:
    TRUE or FALSE

=cut
#**********************************************************
sub docs_certs {
  my ($attr) = @_;

  my $content  = $attr->{CONTENT} || q{};
  my $uni_id   = mk_unique_value(6);
  my $tmp_file = $attr->{FILE_NAME} || '/tmp/docs.'.$uni_id;

  if (! -f $tmp_file.'.sig') {
    if(open(my $fh, '>', $tmp_file)) {
      print $fh $content;
      close($fh);
    }

    my $cmd = $conf{DOCS_CERT_CMD};

    $cmd =~ s/\%INPUT_FILE\%/$tmp_file/g;
    $cmd =~ s/\%CERT_FILE\%/$tmp_file.sig/g;

    my $debug = $attr->{DEBUG} || 0;
    if ($debug > 2) {
      print "Content-Type: text/html\n\n";
    }

    cmd($cmd, { DEBUG => $debug });
  }

  $content = q{};

  if(open(my $fh, '<', $tmp_file.'.sig')) {
    while (<$fh>) {
      $content .= $_;
    }
    close($fh);
  }

  return $content;
}

#**********************************************************
=head2 _docs_make_qrcode($data)

  Arguments:
    $data - array_ref

  Returns
    string - file path

=cut
#**********************************************************
sub _docs_make_qrcode {
  my ($params, $config, $client_info, $document_info) = @_;

  return if ( !$params || ref $params ne 'ARRAY' );
  
  my @data = _docs_collect_qrcode_data($params, $config, $client_info, $document_info);

  # Calculate md5 from array data
  require Digest::MD5;
  my $digest = Digest::MD5->new();

  $digest->add($_) foreach ( @data );
  my $filename = $digest->hexdigest() . '.jpg';

  # Check if already have such file
  my $docs_qrcode_directory = ($conf{TPL_DIR} || '/usr/abills/Abills/templates') . '/docs_qr';
  if (!-d $docs_qrcode_directory && !mkdir $docs_qrcode_directory){
    print "Content-Type: text/html\n\n";
    die "Can't open directory $docs_qrcode_directory \n";
  }

  my $full_filename = "$docs_qrcode_directory/$filename";

  if ( !-f $full_filename ) {
    # It's not exists so should create image
    require Control::Qrcode;
    open(my $qrcode_file, '>', $full_filename) or do {
      print "Content-Type: text/html\n\n";
      die "Can't open $full_filename for write : $!\n";
    };
    my $qrcode_image = qr_make_image_from_string(join("|", @data));
    print $qrcode_file $qrcode_image;
  };

  # Return file
#  return $filename;
  return '/docs_qr/' . $filename;
}

#**********************************************************
=head2 _docs_collect_qrcode_data($qrcode_params)

  Arguments:
    $qrcode_params - params to include in qrcode

  Returns:
    array - values for given params

=cut
#**********************************************************
sub _docs_collect_qrcode_data {
  my ($qrcode_params, $config, $client_info, $document_info) = @_;
  
  return '' if ( !$qrcode_params || !ref $qrcode_params eq 'ARRAY' );
  my ($text_prefix, $config_params, $client_params, $document_params) = @{$qrcode_params};
  
  my @data = ();
  push (@data, $text_prefix) if $text_prefix;
  
  my $collect_data = sub {
    my ($keys_string, $hash) = @_;
    my @keys = split(',\s?', $keys_string);
    
    foreach my $key ( @keys ) {
      my ($name, $value) = ($key, $hash->{$key});
      
      if ($key =~ /([a-zA-Z0-9_.]+)\(([a-zA-Z0-9_.]+)\)/){
        $value = $hash->{$1 || ''};
        $name = $2 || '';
      }
      
      if ( defined $value ) {
        push @data, "$name=$value";
      }
    }
  };
  
  # Each of it can be empty
  if ( $config_params ) {
    &{$collect_data}($config_params, $config);
  }
  if ( $client_params ) {
    &{$collect_data}($client_params, $client_info);
  }
  if ( $document_params ) {
    &{$collect_data}($document_params, $document_info);
  }
  
  return @data;
}

#**********************************************************
=head2 docs_module_info($attr)

  Arguments:
    $attr

  Return:
    \%docs - Docs modulei nfo

=cut
#**********************************************************
sub docs_module_info {
  my($attr)=@_;

  my %doc = ();

  #Modules info
  my $cross_modules_return = cross_modules_call('_docs', { UID => $attr->{UID} });

  my $service_num = 1;
  foreach my $module (sort keys %$cross_modules_return) {
    if (ref $cross_modules_return->{$module} eq 'ARRAY') {
      next if ($#{$cross_modules_return->{$module}} == -1);
      my $module_num = 1;
      foreach my $line (@{$cross_modules_return->{$module}}) {
        #$name, $describe, sum, $tp_id, tp_name
        my (undef, undef, $sum, undef, $tp_name) = split(/\|/, $line);
        my $module_info = uc($module) . (($module_num) ? "_$module_num" : '');
        $doc{"DOCS_ABON_" . $module_info }   = $sum || 0;
        $doc{"DOCS_TPNAME_" . $module_info } = $tp_name || q{};
        $doc{"DOCS_SERVICE_SUM_" . $service_num } = $sum || 0;
        $doc{"DOCS_SERVICE_NAME_" . $service_num } = $tp_name || q{};
        $service_num++;
        $module_num++;
      }
    }
  }

  return \%doc;
}

1
