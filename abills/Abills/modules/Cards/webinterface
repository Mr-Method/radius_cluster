#! perl

=head1 NAME

  Card System


  Error ID: 6xx

=cut

use strict;
use warnings FATAL => 'all';
use Abills::Defs;
use Abills::Base qw(in_array mk_unique_value check_time gen_time sendmail _bp);
use Payments;
use Fees;
use Tariffs;

our ($db,
  %conf,
  $admin,
  $html,
  %lang,
  %permissions,
  @MONTHES,
  @WEEKDAYS,
  @bool_vals,
  @state_colors,
  @PERIODS,
  %err_strs,
  %MAIL_PRIORITY
);

if (form_purchase_module({
    HEADER          => $user->{UID} || $html->{show_header},
      MODULE          => 'Cards',
      REQUIRE_VERSION => 7.22
  })) {
  exit;
}

my $tariffs   = Tariffs->new($db, \%conf, $admin);
my $payments  = Payments->new($db, $admin, \%conf);
my $Cards     = Cards->new($db, $admin, \%conf);
my @status    = ($lang{ENABLE}, $lang{DISABLE}, $lang{USED}, $lang{DELETED}, $lang{RETURNED}, $lang{PROCESSING});
my @status_colors = ($_COLORS[9], $_COLORS[6], '#0000FF', '#808080', '#FF8000', '#008040');

$conf{CARDS_PIN_SYMBOLS} = '0123456789' if (!$conf{CARDS_PIN_SYMBOLS});

#**********************************************************
=head2 cards_card_info($attr) - Cards info form

  Arguments:
    $attr
      PIN
      INFO_ONLY
      UID        - Skip card seach show only user

  Returns:

=cut
#**********************************************************
sub cards_card_info {
  my ($attr) = @_;

  if($attr->{UID}) {
    $Cards->{UID}=$attr->{UID};
  }
  else {
    $Cards->cards_info( $attr );

    if ($Cards->{TOTAL} < 1) {
      $html->message( 'err', $lang{ERROR}, "PIN: $attr->{PIN} $lang{NOT_EXIST}", { ID => 610 } );
      return 0;
    }
  }
  if ($Cards->{UID} > 0) {
    $Cards->cards_service_info({ UID => $Cards->{UID} });
    if ($Cards->{errno}) {
      return 0;
    }

    $Cards->{AGE}        = $lang{UNLIMITED} if (!$Cards->{AGE});
    $Cards->{TIME_LIMIT} = $lang{UNLIMITED} if (!$Cards->{TIME_LIMIT});
    $Cards->{TRAF_LIMIT} = $lang{UNLIMITED} if (!$Cards->{TRAF_LIMIT});
    $Cards->{SPEED}      = $lang{UNLIMITED} if (!$Cards->{SPEED});
  }
  $FORM{LOGIN}    = $Cards->{LOGIN};
  $FORM{PASSWORD} = $Cards->{PASSWORD};

  if($attr->{INFO_ONLY}) {
    return 1;
  }

  $html->tpl_show(_include('cards_card_info', 'Cards'), {
      FOOTER_TEXT => $attr->{FOOTER_TEXT},
      HEADER_TEXT => $attr->{HEADER_TEXT},
      %$Cards }, { ID => 'cards_card_info' });

  return 1;
}

#**********************************************************
=head2 cards_main() - Cards main interface

=cut
#**********************************************************
sub cards_main {

  if (form_purchase_module({
    HEADER          => $user->{UID},
    MODULE          => 'Cards',
    REQUIRE_VERSION => 7.10,
    })) {
    return 0;
  }

  if ($FORM{change}) {
    my $list;
    my $FROM = '';

    $Cards->cards_change({ %FORM });
    if (!$Cards->{errno}) {
      $html->message('info', $lang{CHANGED} . ':' . $status[ ($FORM{STATUS} - 1) ], "$lang{CHANGED}: $FORM{IDS} ");
    }

    #Add receipt for diller
    if ($FORM{DILLER_ID}) {
      $Cards->cards_diller_info({ ID => $FORM{DILLER_ID} });

      if (in_array('Docs', \@MODULES) && $FORM{INVOICE}) {
        load_module('Docs', $html);

        $list = $Cards->cards_list({ IDS    => $FORM{IDS},
                                     SERIAL => '_SHOW',
                                     NUMBER => '_SHOW',
                                     SUM    => '_SHOW',
                                     ROWS   => 1000000,
                                     COLS_NAME => 1 });

        my %CARDS_GROUPS = ();
        foreach my $line (@$list) {
          $CARDS_GROUPS{"$line->{serial}:$line->{sum}"} += $line->{number};
        }

        my $i   = 1;
        my @ids = ();
        while (my ($k, $v) = each(%CARDS_GROUPS)) {
          my ($seria, $price) = split(/:/, $k, 2);
          $price = ($v > 0) ? $price / $v : $price;
          $FORM{'SUM_'. $i}    = $price;
          $FORM{'COUNTS_'. $i} = $v;
          $FORM{'UNIT_'. $i}   = 1;
          $FORM{'ORDER_'. $i}  = "$lang{ICARDS} $lang{SERIAL}: $seria";
          push @ids, $i;
          $i++;
        }

        $FORM{IDS} = join(', ', @ids);

        $FORM{create}    = 1;
        $FORM{UID}       = $Cards->{UID};
        docs_invoice (
          {
            FROM      => $FROM,
            DATE      => $DATE,
            SKIP_LIST => 1
          }
        );
      }
      return 0;
    }
  }
  elsif ($FORM{del} && $FORM{COMMENTS}) {
    $Cards->cards_del(
      {
        SERIA => $FORM{SERIAL},
        ID    => $FORM{ID},
      }
    );
    if (!$Cards->{errno}) {
      $html->message('info', $lang{DELETED}, "$lang{SERIAL}: ". ($FORM{SERIAL} || q{}) . (($FORM{ID}) ? " ID: ". $FORM{ID} : q{} ) );
    }
  }

  _error_show($Cards, { ID => 650 });

  if ($FORM{print_cards}) {
    cards_print();
    exit;
  }

  $Cards->defaults();

  #Domains sel
  if (in_array('Multidoms', \@MODULES) && $permissions{10}) {
    load_module('Multidoms', $html);
    $Cards->{DOMAIN_SEL} = multidoms_domains_sel();
  }
  else {
    $Cards->{DOMAIN_SEL} = '';
  }

  $Cards->{ADMINS_SEL} = $html->form_select(
    'AID',
    {
      SELECTED   => $FORM{AID},
      SEL_LIST   => $admin->list({%LIST_PARAMS, COLS_NAME => 1 }),
      SEL_KEY    => 'aid',
      SEL_VALUE  => 'login',
      SEL_OPTIONS=> { '' => '' },
      FORM_ID    => 'cards_list'
    }
  );

  if ($FORM{info}) {
    $Cards->{DILLERS_SEL} = '';
  }
  else {
    $Cards->{DILLERS_SEL} = cards_dillers_sel({ FORM_ID => 'cards_list'  });
  }

  if (!$FORM{pdf} && $FORM{search_form}) {
    delete $Cards->{ID};
    $Cards->{SERIAL}       = '*' if(! $FORM{SERIAL});
    $Cards->{SUM}          = undef if (!$FORM{SUM});
    $Cards->{EXPIRE}       = undef if (!$FORM{EXPIRE});
    $Cards->{DATE}         = $html->date_fld2('DATE',         { MONTHES => \@MONTHES, FORM_NAME => 'form_search', WEEK_DAYS => \@WEEKDAYS, NO_DEFAULT_DATE => 1 });
    $Cards->{CREATED_DATE} = $html->date_fld2('CREATED_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'form_search', WEEK_DAYS => \@WEEKDAYS, NO_DEFAULT_DATE => 1 });
    $Cards->{EXPIRE_DATE}  = $html->date_fld2('EXPIRE_DATE',  { MONTHES => \@MONTHES, FORM_NAME => 'form_search', WEEK_DAYS => \@WEEKDAYS, NO_DEFAULT_DATE => 1 });

    $Cards->{STATUS_SEL} = $html->form_select(
    'STATUS',
    {
      SELECTED     => ($FORM{STATUS}) ? $FORM{STATUS} : '',
      SEL_ARRAY    => \@status,
      STYLE        => \@status_colors,
      SEL_OPTIONS  => { '' => $lang{ALL} },
      ARRAY_NUM_ID => 1,
      FORM_ID      => 'form_search'
    }
    );

    form_search({ SEARCH_FORM => $html->tpl_show(_include('cards_search', 'Cards'), { %$Cards, %FORM }, { OUTPUT2RETURN => 1 }),
    NO_DEFAULT_DATE => 1 });
  }

  $Cards->{STATUS_SEL} = $html->form_select(
    'STATUS',
    {
      SELECTED     => (defined($FORM{STATUS})) ? $FORM{STATUS} : '',
      SEL_ARRAY    => \@status,
      STYLE        => \@status_colors,
      SEL_OPTIONS  => { '' => $lang{ALL} },
      ARRAY_NUM_ID => 1,
      FORM_ID      => 'cards_list'
    }
  );

  my $form_name = 'CARDS_LIST';
  my $total_cards = 0;
  my $total_sum   = 0;
  my @total_arr   = 0;

  my $service_status = sel_status({ HASH_RESULT => 1 });

  if (defined($FORM{SERIAL})) {
    $LIST_PARAMS{PIN}='_SHOW' if ($conf{CARDS_SHOW_PINS});
    $LIST_PARAMS{SERIAL}=$FORM{SERIAL};
    $pages_qs        .= "&SERIAL=$FORM{SERIAL}" if (! $FORM{search});
    $form_name       .= '_SERIAL';
  }

  my Abills::HTML $table;
  my $cards_list;
  delete $FORM{STATUS};
  delete ($Cards->{error});
  ($table, $cards_list) = result_former({
     INPUT_DATA      => $Cards,
     FUNCTION        => 'cards_list',
     BASE_FIELDS     => 1,
     DEFAULT_FIELDS  => (defined($FORM{SERIAL})) ? 'SERIAL,NUMBER,LOGIN,SUM,STATUS,EXPIRE,CREATED,USED_DATE,DILLER_NAME,DILLER_DATE,DILLER_SOLD_DATE' : 'SERIAL,CARDS_COUNT,CARDS_SUM,CARDS_ACTIVE,CARDS_DILLERS,LAST_CREATED',
     FUNCTION_FIELDS => (defined($FORM{SERIAL})) ? 'del' : 'show,del',
     EXT_TITLES      => {
      'number'       => $lang{NUM},
      'date'         => $lang{DATE},
      'sum'          => $lang{SUM},
      'cards_count'  => $lang{COUNT},
      'cards_sum'    => $lang{SUM},
      'cards_active' => $lang{ACTIV},
      'cards_dillers'=> $lang{DILLERS_USE},
      'deposit'      => $lang{CURRENT_DEPOSIT},
      'ip'           => 'IP',
      'admin_name'   => $lang{ADMIN},
      'serial'       => "$lang{SERIAL}",
      'sum'          => "$lang{SUM}",
      'status'       => "$lang{STATUS}",
      'created'      => "$lang{CREATED}",
      'used_date'    => "$lang{USED} $lang{DATE}",
      'dillers'      => "$lang{DILLERS}",
      'dillers_date' => "$lang{DILLERS} $lang{DATE}",
      'sold'         => "$lang{SOLD}",
      'pin'          => 'PIN'
     },
     TABLE => {
        width      => '100%',
        caption    => (defined($FORM{SERIAL})) ? "$lang{SERIAL}: '$FORM{SERIAL}'" : $lang{ICARDS},
        qs         => $pages_qs,
        pages      => $Cards->{TOTAL},
        ID         => $form_name,
        SELECT_ALL => (! defined($FORM{SERIAL})) ? '' : ($permissions{4}) ? "cards_list:IDS:$lang{SELECT_ALL}" : undef,
        header     => (! defined($FORM{SERIAL})) ? '' : $html->button("$lang{PRINT} PDF", "qindex=$index&PAGE_ROWS=100000&pdf=1&print_cards=1&$pages_qs" . (($FORM{SERIAL} && $pages_qs !~ /SERIAL/) ? "&SERIA=$FORM{SERIAL}" : ''), { BUTTON => 2, ex_params => 'target=_new' }),
        EXPORT     => (! defined($FORM{SERIAL})) ? '' : 1,
        MENU       => "$lang{ADD}:index=". get_function_index('cards_add') ."&$pages_qs:add;$lang{SEARCH}:index=$index&search_form=1:search",
      }
  });
  foreach my $line (@$cards_list) {
    my $delete = ($permissions{4}{2}) ? $html->button($lang{DEL}, "index=$index&del=1&". ((defined($FORM{SERIAL})) ? "ID=$line->{id}&" : "" ) ."SERIAL=$line->{serial}", { MESSAGE => "$lang{DEL} ID: $line->{id}?", class => 'del' }) : '';

    my @fields_array = ();

    if (! $FORM{EXPORT_CONTENT} && defined($FORM{SERIAL}) && $permissions{4} )  {
      push @fields_array, $html->form_input("IDS", $line->{id}, { TYPE => 'checkbox', FORM_ID => 'cards_list' });
    }

    for (my $i = 0; $i < 1+$Cards->{SEARCH_FIELDS_COUNT}; $i++) {
      my $field_name = $Cards->{COL_NAMES_ARR}->[$i];
      my $val;
      if (defined($FORM{SERIAL}) && $field_name eq 'serial') {
        $val = $html->b($line->{serial});
      }
      elsif($field_name eq 'deleted') {
        $val = $html->color_mark($bool_vals[ $line->{deleted} ], ($line->{deleted} == 1) ? $state_colors[ $line->{deleted} ] : '');
      }
      elsif($field_name eq 'status') {
        $val = $html->color_mark($status[ $line->{status} ], $status_colors[ $line->{status} ]),
      }
      elsif($field_name eq 'login' && $line->{uid}) {
        $val = $html->button($line->{login}, "index=15&UID=$line->{uid}");
      }
      elsif($field_name =~ /deposit/) {
        $val = ($line->{$field_name} < 0) ? $html->color_mark($line->{$field_name}, $_COLORS[6]) : $line->{$field_name};
      }
      elsif($field_name eq 'diller_name') {
        $val = ($line->{diller_id}) ? $html->button($line->{diller_name}, "index=11&UID=$line->{diller_uid}") : '';
      }
      elsif($field_name eq 'login_status') {
        my ($status, $color) = split( /:/, $service_status->{ $line->{login_statu} } );
        $val = $html->color_mark( $status, $color );
      }
      elsif($field_name eq 'login' && $line->{uid}) {
        $val = $html->button($line->{login}, "&index=11&UID=$line->{uid}");
      }
      elsif($field_name eq 'number') {
        $val = ($line->{status}==2) ? $html->button($line->{number}, "index=2&search=1&EXT_ID=$line->{serial}$line->{number}") : $line->{number};
      }
      else {
        $val = $line->{$field_name};
      }

      push @fields_array, $val;
    }

    my @funct_fields = ();
    if (! defined($FORM{SERIAL})) {
      if (! $line->{serial}) {
        $line->{serial} = 'empty';
      }

      push @funct_fields, $html->button($lang{SHOW}, "index=$index$pages_qs&SERIAL=$line->{serial}", { class => 'show' });
      $total_cards += ($line->{cards_count} || 0);
      $total_sum   += ($line->{cards_count} && $line->{cards_sum}) ? $line->{cards_count} * $line->{cards_sum} : 0;
    }

    push @funct_fields, $delete;

    $table->addrow(@fields_array,
      join(' ', @funct_fields));
  }

  my $op_sid = mk_unique_value(8);

  if (defined($FORM{SERIAL}) && ! $FORM{EXPORT_CONTENT}) {
    my $managment = $html->tpl_show(_include('cards_managment', 'Cards'), {
        DILLERS_SEL     => $Cards->{DILLERS_SEL},
        STATUS_SEL      => $Cards->{STATUS_SEL}
        },
        { OUTPUT2RETURN => 1 });

    print $html->form_main(
        {
          CONTENT => $table->show() . $managment,
          HIDDEN => {
            index  => $index,
            SERIAL => $FORM{SERIAL},
            OP_SID => $op_sid,
            info   => $FORM{info},
            UID    => $FORM{UID},
        },
        NAME   => 'cards_list',
        ID     => 'cards_list',
      }
    );
  }
  else {
    print $table->show();
    @total_arr = ("$lang{SERIAL}:", $Cards->{SERIAL}, '');
  }

  $table = $html->table(
    {
      width       => '100%',
      caption     => $lang{TOTAL},
      title_plain => [ $lang{STATUS}, "$lang{COUNT}", "$lang{SUM}" ],
      cols_align  => [ 'right', 'right', 'right' ],
      rows        => [
        ($#total_arr>-1) ? \@total_arr : undef,
        [ $html->b("$lang{TOTAL}:"), $html->b($Cards->{TOTAL_CARDS}), $html->b($Cards->{TOTAL_SUM}) ],
        [ $html->color_mark("$lang{USED}:", $status_colors[2]), $Cards->{USED}, $Cards->{USED_SUM} ],
        [ "$lang{ENABLE}:", $Cards->{ENABLED}, $Cards->{ENABLED_SUM} ],
        [ $html->color_mark("$lang{DISABLE}:", $_COLORS[6]), $Cards->{DISABLED}, $Cards->{DISABLED_SUM} ],
        [ $html->color_mark("$lang{RETURNED}", '#FF8000'), $Cards->{RETURNED}, $Cards->{RETURNED_SUM} ],
        [ "$lang{SOLD}:", $Cards->{DILLER_SOLD}, $Cards->{DILLER_SOLD_SUM} ]
      ]
    }
  );

  print $table->show();

  return 1;
}

#**********************************************************
=head2 cards_add()

=cut
#**********************************************************
sub cards_add {

  $Cards->defaults();
  if ($FORM{create}) {
    if (!$FORM{SUM} || $FORM{SUM} <= 0) {
      $html->message('err', $lang{ERROR}, "$lang{ERR_WRONG_SUM}");
    }
    else {
      my $export      = '';
      my $begin       = $FORM{BEGIN} || 0;
      my $count       = $FORM{COUNT} || 0;
      my $pin_symbols = $FORM{PASSWD_SYMBOLS} || $conf{CARDS_PIN_SYMBOLS};
      my $pin_length  = $FORM{PASSWD_LENGTH} || $conf{CARDS_PAYMENT_PIN_LENGTH} || 8;
      my @add_arr     = ();

      for (my $i = $begin ; $i < $begin + $count ; $i++) {
        my $pin    = mk_unique_value($pin_length, { SYMBOLS => $pin_symbols || undef });
        my $cards_number_length = $conf{CARDS_NUMBER_LENGTH} || 11;
        my $serial = sprintf("%s%." . $cards_number_length . "d", $FORM{SERIAL}, $i);
        my $sum    = sprintf("%.2f", $FORM{SUM});

        push @add_arr, [
          $FORM{SERIAL},
          $i,
          '',
          $pin,
          0,
          $FORM{EXPIRE},
          $admin->{AID},
          $FORM{DILLER_ID},
          $FORM{DILLER_ID},
          $sum,
          0,
          $admin->{DOMAIN_ID},
          $FORM{COMMISSION} ];

        if (defined($FORM{EXPORT}) && $FORM{EXPORT} eq 'XML') {
          $export .= "<CARD SERIA='$serial' PIN='$pin' SUM='$sum'";
          $export .= sprintf(" COMMISSION='%.2f' ", $FORM{COMMISSION}) if ($FORM{COMMISSION});
          $export .= "EXPIRE='$FORM{EXPIRE}'/>\n";
        }
        else {
          $export .= "$serial\t$pin\t$sum\t";
          $export .= sprintf("%.2f\t", $FORM{COMMISSION}) if ($FORM{COMMISSION});
          $export .= "$FORM{EXPIRE}\n";
        }
      }

      $Cards->cards_add({ MULTI_ADD => \@add_arr });

      if (_error_show($Cards)) {
        return 0;
      }

      $export = "<?xml version=\"1.0\" encoding=\"$html->{CHARSET}\"?>\n<CARDS>\n$export</CARDS>" if ($FORM{EXPORT} eq 'XML');

      if ($FORM{qindex}) {
        $export = ($FORM{EXPORT} eq 'XML') ? "Content-Type: text/xml\n\n$export" : "Content-Type: text/plain\n\n$export";
        print "$export";
        return 0;
      }
      else {
        $html->message('info', $lang{INFO}, "$lang{ADDED}: $Cards->{TOTAL} $lang{CARD_SERVICE}");
        print $html->form_textarea(
          'CARDS_EXPORT',
          $export,
          {
            COLS => 70,
            ROWS => 30
          }
        );
        return 0;
      }
    }
  }

  $Cards->{DILLERS_SEL}    = cards_dillers_sel();
  $Cards->{PASSWD_LENGTH}  = $conf{CARDS_PAYMENT_PIN_LENGTH} if ($conf{CARDS_PAYMENT_PIN_LENGTH});
  $Cards->{PASSWD_SYMBOLS} = $conf{CARDS_PIN_SYMBOLS} if ($conf{CARDS_PIN_SYMBOLS});

  $Cards->{CARDS_TYPE} = $html->tpl_show(_include('cards_payment', 'Cards'), { %$Cards, %FORM }, { notprint => 1 });
  $Cards->{TYPE_CAPTION} = $lang{PAYMENTS};
  $html->tpl_show(_include('cards_add', 'Cards'), { %$Cards, %FORM });

  return 1;
}

#**********************************************************
=head2 cards_bruteforce_clean()

=cut
#**********************************************************
sub cards_bruteforce_clean {
  my ($attr) = @_;

  my $debug = $attr->{DEBUG} || 0;
  my $debug_output = '';

  $debug_output .= "Cards: Bruteforce Clean\n" if ($debug > 1);

  $conf{CARDS_BRUTE_CLEAN_PERIOD} = 2 if (!$conf{CARDS_BRUTE_CLEAN_PERIOD});

  $Cards->bruteforce_del({ PERIOD => $conf{CARDS_BRUTE_CLEAN_PERIOD} });
  $DEBUG .= $debug_output;
  return $debug_output;
}

#**********************************************************
=head2 cards_bruteforce()

=cut
#**********************************************************
sub cards_bruteforce {

  if ($FORM{del} && $FORM{COMMENTS}) {
    $Cards->bruteforce_del({ UID => $FORM{del} });
    if (!$Cards->{errno}) {
      $html->message('info', $lang{DELETED}, "$lang{DELETED} ");
    }
  }
  elsif ($FORM{UID}) {

    $LIST_PARAMS{UID} = $FORM{UID};
    my $list  = $Cards->bruteforce_list({%LIST_PARAMS});
    my $table = $html->table(
      {
        width      => '100%',
        title      => [ "$lang{USER}", "PIN", "$lang{DATE}" ],
        cols_align => [ 'left', 'left', 'right' ],
        qs         => $pages_qs,
        pages      => $Cards->{TOTAL}
      }
    );

    foreach my $line (@$list) {
      $table->addrow($html->button($line->[0], "index=15&UID=". ($line->[4] || q{})), $line->[1], $line->[2]);
    }

    print $table->show();
    $table = $html->table(
      {
        width      => '100%',
        cols_align => [ 'right', 'right' ],
        rows       => [ [ "$lang{TOTAL}:", $html->b($Cards->{TOTAL}) ] ]
      }
    );
    print $table->show();

    return 0;
  }

  my $list  = $Cards->bruteforce_list({%LIST_PARAMS});
  my $table = $html->table(
    {
      width      => '100%',
      title      => [ "$lang{USER}", "$PERIODS[0]", "$lang{TOTAL}", "$lang{DATE}", '-', '-' ],
      cols_align => [ 'left', 'right', 'right', 'right', 'center', 'center' ],
      qs         => $pages_qs,
      pages      => $Cards->{TOTAL},
      ID         => 'CARDS_BRUTEFORCE_LIST'
    }
  );

  foreach my $line (@$list) {
    $table->addrow(
      $html->button($line->[0], "index=15&UID=$line->[4]"),
      $line->[1],
      $line->[2],
      $line->[3],
      $html->button("$lang{SHOW}", "index=$index&UID=$line->[4]", { class => 'show' }),
      $html->button($lang{DEL}, "index=$index$pages_qs&del=$line->[4]", { MESSAGE => "$lang{DEL} [$line->[0]] ?", class => 'del' })
    );
  }

  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ],
      rows       => [ [ "$lang{TOTAL}:", $html->b($Cards->{TOTAL}) ] ]
    }
  );
  print $table->show();

  return 1;
}

#**********************************************************
=head2 cards_users_add($attr)

=cut
#**********************************************************
sub cards_users_add {
  my ($attr) = @_;

  if ($FORM{create}) {
    my $export       = '';
    my $begin        = $FORM{BEGIN} || 0;
    my $count        = $FORM{COUNT} || 0;
    my $LOGIN_NUMBER = $FORM{LOGIN_BEGIN} || 0;
    my $SERIAL       = $FORM{SERIAL} || '';
    my $generated    = 0;
    my @DATA_ARRAY   = ();

    $FORM{LOGIN_LENGTH}  = 6 if (!$FORM{LOGIN_LENGTH});
    $FORM{PASSWD_LENGTH} = 6 if (!$FORM{PASSWD_LENGTH});

    if ($FORM{LOGIN_FILE}) {
      $html->message('info', $lang{INFO}, "$lang{FILE}: $FORM{LOGIN_FILE}{filename}");
    }

    #Create service cards from file
    if (defined($FORM{FILE_DATA})) {
      my @rows = split(/[\r]{0,1}\n/, $FORM{"FILE_DATA"}{'Contents'});

      foreach my $line (@rows) {
        my $other     = '';
        my %USER_HASH = ();
        my @params    = split(/\t/, $line);
        $USER_HASH{LOGIN}     = $params[0];
        $USER_HASH{DILLER_ID} = $FORM{DILLER_ID} || 0;
        $USER_HASH{SERIAL}    = $SERIAL;
        $USER_HASH{NUMBER}    = $begin;
        $USER_HASH{PIN}       = ($FORM{PAYMENT_OPERATION}) ? $params[1] : '';

        next if (!$USER_HASH{LOGIN});

        if ($params[1] && $params[1] eq '-') {
          $USER_HASH{PASSWORD} = mk_unique_value($FORM{PASSWD_LENGTH}, { SYMBOLS => $FORM{PASSWD_SYMBOLS} || $conf{PASSWD_SYMBOLS} || undef });
        }
        else {
          $USER_HASH{PASSWORD} = $params[1];
        }

        for (my $i = 2 ; $i <= $#params ; $i++) {
          my ($k, $v) = split(/=/, $params[$i], 2);
          $v =~ s/\"//g;
          $USER_HASH{$k} = $v;
          if (defined($FORM{EXPORT}) && $FORM{EXPORT} eq 'XML') {
            $other .= "<$k>$v</$k>";
          }
          else {
            $other .= "\t$k: $v";
          }
        }

        $export .= (defined($FORM{EXPORT}) && $FORM{EXPORT} eq 'XML') ? "<LOGIN>$USER_HASH{LOGIN}</LOGIN><PASSWORD>$USER_HASH{PASSWORD}</PASSWORD><ID>$USER_HASH{SERIAL}</ID><EXPIRE>$FORM{EXPIRE}</EXPIRE>\n" : "$USER_HASH{LOGIN}\t$USER_HASH{PASSWORD}\t$USER_HASH{SERIAL}\t$FORM{EXPIRE}$other\n";
        push @DATA_ARRAY, {%USER_HASH};
        $generated++;
        $begin++;
      }

      my $message = "$lang{NAME}: $FORM{FILE_DATA}{filename}\n"
                    . "$lang{TOTAL}: ". ($#DATA_ARRAY + 1) ."\n"
                    . "$lang{SIZE}: $FORM{FILE_DATA}{Size}";

      $html->message('info', $lang{INFO}, $message);
    }

    #Get last number if begin not set
    if ($begin == 0) {
      my $list = $Cards->cards_list(
        {
          SERIAL     => $SERIAL || 'empty',
          NUMBER     => '_SHOW',
          PAGE_ROWS  => 1,
          SORT       => 'number',
          DESC       => 'DESC',
          SKIP_TOTALS=> 1,
          COLS_NAME  => 1
        }
      );
      $begin = ($list->[0]->{number}) ? int($list->[0]->{number}) + 1 : 0;
    }

    $LOGIN_NUMBER = $begin;
    my $cards_number_length = $conf{CARDS_NUMBER_LENGTH} || 11;

    #Create numeric or random logins
    for (my $i = $begin ; $i < $begin + $count ; $i++) {
      my $LOGIN_LENGTH = (length(($FORM{LOGIN_PREFIX} || q{}). $LOGIN_NUMBER) < $FORM{LOGIN_LENGTH}) ? $FORM{LOGIN_LENGTH} - length($FORM{LOGIN_PREFIX} || q{}) : $FORM{LOGIN_LENGTH};
      my $password = mk_unique_value($FORM{PASSWD_LENGTH}, { SYMBOLS => $FORM{PASSWD_SYMBOLS} || $conf{PASSWD_SYMBOLS} || $conf{CARDS_PIN_SYMBOLS}});
      my $serial   = sprintf("%s%." . $cards_number_length . "d", $FORM{SERIAL},       $i);
      my $login    = sprintf("%s%." . $LOGIN_LENGTH . "d", ($FORM{LOGIN_PREFIX} || q{}), $LOGIN_NUMBER);

      if ($conf{CARDS_LOGIN_PASSWD_SAME}) {
        $login = $password;
      }

      if (_error_show($Cards, { MESSAGE => "$lang{LOGIN}: '$login' / $lang{ADDED}: $generated" })) {
        return 0;
      }

      $export .= ($FORM{EXPORT} && $FORM{EXPORT} eq 'XML') ? "<CARD LOGIN='$login' PASSWORD='$password' ID='$serial' EXPIRE='". ($FORM{EXPIRE} || q{}) ."'/>\n"
                                                           : "$login\t$password\t$serial\t". ($FORM{EXPIRE} || q{}) ."\n";
      $LOGIN_NUMBER++;
      $generated++;
      push @DATA_ARRAY,
      {
        LOGIN     => $login,
        PASSWORD  => $password,
        SERIAL    => $FORM{SERIAL},
        NUMBER    => $i,
        DILLER_ID => $FORM{DILLER_ID},
        PIN       => ($FORM{PAYMENT_OPERATION}) ? "$password" : $password,
        EXPIRE    => $FORM{EXPIRE}
      };
    }

    if ($generated > 0 && !$attr->{NO_PRINT}) {
      if ($FORM{EXPORT} && $FORM{EXPORT} eq 'XML') {
        $export = "<?xml version=\"1.0\" encoding=\"$html->{CHARSET}\"?>\n<CARDS>\n$export</CARDS>";
      }
      else {
        $export = "$lang{LOGIN}\t$lang{PASSWD}\t$lang{SERIAL}\t$lang{EXPIRE}\n=====================================================\n$export";
      }

      #$html->message('info', $lang{INFO}, "$lang{CREATED}: $generated");
      print $html->form_textarea(
        'CARDS_EXPORT',
        $export,
        {
          COLS => 70,
          ROWS => 30,
          HIDE => 1,
        }
      );
    }

    return \@DATA_ARRAY;
  }
  elsif ($FORM{del} && $FORM{COMMENTS}) {
    $Cards->cards_del({ SERIA => $FORM{SERIA} });
    if (!$Cards->{errno}) {
      $html->message('info', $lang{DELETED}, "$lang{SERIAL}: $FORM{SERIA} ");
    }
  }

  $Cards                = $Cards->defaults();
  $Cards->{EXPARAMS}    = $attr->{EXTRA_TPL};
  $Cards->{DILLERS_SEL} = cards_dillers_sel();
  $Cards->{STATUS_SEL}  = $html->form_select(
    'STATUS',
    {
      SEL_ARRAY    => [ '', @status ],
      STYLE        => [ '', @status_colors ],
      ARRAY_NUM_ID => 1,
      NO_ID        => 1
    }
  );

  $Cards->{CARDS_TYPE} = $html->tpl_show(_include('cards_logins', 'Cards'), $Cards, { OUTPUT2RETURN => 1 });
  $html->tpl_show(_include('cards_add', 'Cards'), $Cards);

  return 1;
}

#*******************************************************************
=head2 cards_users_gen_confim($attr)

=cut
#*******************************************************************
sub cards_users_gen_confim {
  my ($attr) = @_;

  $Cards->cards_add({ %$attr });

  if (_error_show($Cards, { MODULE_NAME => 'Cards', MESSAGE => "$lang{SERIAL}: '". ($attr->{SERIA} || q{}) ."'$lang{NUM}: ". ($attr->{NUMBER} || q{} ) })) {
    return 0;
  }

  $FORM{CARD_ID}=$Cards->{INSERT_ID};

  return 1;
}

#**********************************************************
=head2 cards_user_payment() - Clietn cards rechrge

=cut
#**********************************************************
sub cards_user_payment  {

  my $begin_time = check_time();
  if ($conf{CARDS_SKIP_COMPANY} && $user->{COMPANY_ID}) {
    $html->message('err', $lang{INFO}, "$lang{ERR_COMPANY_DISABLE}");
    return 0;
  }

  my $rand = rand();
  my DBI $_db = $db->{db};
  if (($FORM{PIN} && $FORM{SERIAL}) || ($FORM{PIN} && $conf{CARDS_PIN_ONLY})) {
    $_db->{AutoCommit} = 0;

    my $BRUTE_LIMIT = ($conf{CARDS_BRUTE_LIMIT}) ? $conf{CARDS_BRUTE_LIMIT} : 5;
    $Cards->bruteforce_list({ UID => $LIST_PARAMS{UID} });
    if ($Cards->{BRUTE_COUNT} && $Cards->{BRUTE_COUNT} >= $BRUTE_LIMIT) {
      $html->message('err', $lang{ERROR}, "$lang{BRUTE_ATACK} $Cards->{BRUTE_COUNT}) >= $BRUTE_LIMIT", { ID => 601 });
      return 0;
    }

    $Cards->cards_info({ %FORM, UID => $LIST_PARAMS{UID}, PAYMENTS => 1 });

    if ($Cards->{errno}) {
      if ($Cards->{errno} == 2) {
        $html->message('err', "$lang{CARD_SERVICE}:$lang{ERROR}", "$lang{NOT_EXIST}/ $Cards->{BRUTE_COUNT} /", { ID => 603 });
        $Cards->bruteforce_add({ UID => $LIST_PARAMS{UID}, PIN => $FORM{PIN} });
        $_db->commit();
      }
      else {
        $html->message('err', $lang{ERROR}, "$lang{ERR_SUPPORT} / $lang{ERR_SUPPORT} ($Cards->{errstr})", { ID => 600 });
      }
      return 0;
    }
    elsif ($Cards->{EXPIRE_STATUS} == 1) {
      $html->message('err', $lang{ERROR}, "$lang{EXPIRE} '$Cards->{EXPIRE}'", { ID => 602 });
      return 0;
    }
    elsif ($Cards->{TOTAL} < 1) {
      $html->message('err', "$lang{CARD_SERVICE}:$lang{ERROR}", "$lang{NOT_EXIST}", { ID => 603 });
      $Cards->bruteforce_add({ UID => $LIST_PARAMS{UID}, PIN => $FORM{PIN} });
      $_db->commit();
    }
    elsif ($Cards->{SUM} < 1) {
      $html->message('err', $lang{ERROR}, "$lang{SUM}: $Cards->{SUM}", { ID => 604 });
      return 0;
    }
    elsif ($Cards->{UID} == $LIST_PARAMS{UID}) {
      $html->message('err', $lang{ERROR}, "$lang{ERR_WRONG_DATA}", { ID => 605 });
      return 0;
    }
    elsif ($Cards->{STATUS} != 0) {
      if ($Cards->{STATUS} == 5) {
        $html->message('info', $lang{INFO}, "$status[$Cards->{STATUS}]");
      }
      else {
        $html->message('err', $lang{ERROR}, "$status[$Cards->{STATUS}]", { ID => 606 });
      }

      return 0;
    }
    else {
      if ($Cards->{UID}) {
        my $user_new = Users->new($db, $admin, \%conf);
        $user_new->info($Cards->{UID});
        require Log;
        Log->import();
        my $Log = Log->new($db, \%conf);

        $Log->log_list({ USER => $user->{LOGIN} });
        if ($Log->{TOTAL} > 0) {
          $html->message('err', $lang{ERROR}, "$status[2]", { ID => 607 });
          return 0;
        }
      }

      if (! $user->{BILL_ID}) {
        $user=$users;
        $user->info($LIST_PARAMS{UID});
      }

      if ($conf{CARDS_DEBUG}) {
        my $gt = '';
        if ($begin_time > 0) {
          $gt = gen_time($begin_time);
        }

        my $output = '';
        while (my ($k, $v) = each %FORM) {
          $output .= "$k=$v;" if ($FORM{$k} ne '__BUFFER');
        }

        `echo "$DATE $TIME $user->{LOGIN} :$rand  $Cards->{SERIAL}$Cards->{NUMBER} A:$ENV{HTTP_USER_AGENT} QS:$ENV{QUERY_STRING} RA:$ENV{REMOTE_ADDR} $output  ($gt)"  >> /tmp/cards_debug`;
      }

      my $cards_number_length = $conf{CARDS_NUMBER_LENGTH} || 11;
      $payments->add(
        $user,
        {
          SUM          => $Cards->{SUM},
          METHOD       => 2,
          DESCRIBE     => sprintf("%s%." . $cards_number_length . "d", $Cards->{SERIAL}, $Cards->{NUMBER}),
          EXT_ID       => "$Cards->{SERIAL}$Cards->{NUMBER}",
          CHECK_EXT_ID => "$Cards->{SERIAL}$Cards->{NUMBER}",
          TRANSACTION  => 1
        }
      );

      if (!$payments->{errno}) {
        $user->{DEPOSIT} += $Cards->{SUM} - $Cards->{COMMISSION};

        $Cards->cards_change(
          {
            ID       => $Cards->{ID},
            STATUS   => 2,
            UID      => $user->{UID},
            DATETIME => "$DATE $TIME",
          }
        );

        if ($Cards->{errno}) {
          $_db->rollback();
          $html->message('err', $lang{ERROR}, "$status[$Cards->{STATUS}]", { ID => 607 });
          return 0;
        }

        $html->message('info', $lang{PAYMENTS}, "$lang{ADDED}\n$lang{SUM}: $Cards->{SUM} \n " . (($Cards->{COMMISSION} > 0) ? "$lang{COMMISSION} $Cards->{COMMISSION}\n" : '') . "\n $lang{DEPOSIT}: $user->{DEPOSIT}\n");

        #Make external script
        if ($conf{CARDS_PAYMENTS_EXTERNAL}) {
          _external("$conf{CARDS_PAYMENTS_EXTERNAL}", { %$Cards, %$user });
        }

        if ($Cards->{COMMISSION}) {
          my $Fees = Finance->fees($db, $admin, \%conf);
          $Fees->take(
            $user,
            $Cards->{COMMISSION},
            {
              DESCRIBE => "$lang{COMMISSION} $lang{ICARDS}: $Cards->{SERIAL}$Cards->{NUMBER}",
              METHOD   => 0,
            }
          );
        }

        #Disable universal card after payment
        if ($Cards->{UID} > 0) {
          my $user_new = Users->new($db, $admin, \%conf);
          $user_new->info($Cards->{UID});
          $user_new->del();
        }

        if ($Cards->{DILLER_ID}) {
          $Cards->cards_diller_info({ ID => $Cards->{DILLER_ID} });
          my $diller_fees = 0;
          if ($Cards->{PAYMENT_TYPE} == 2 && $Cards->{OPERATION_PAYMENT} > 0) {
            $diller_fees=$Cards->{SUM} / 100 * $Cards->{OPERATION_PAYMENT};
          }
          elsif ($Cards->{DILLER_PERCENTAGE} > 0) {
            $diller_fees=$Cards->{DILLER_PERCENTAGE};
          }

          if ($diller_fees > 0) {
            my $user_new = Users->new($db, $admin, \%conf);
            $user_new->info($Cards->{UID});

            my $Fees = Finance->fees($db, $admin, \%conf);
            $Fees->take(
              $user_new,
              $diller_fees,
              {
                DESCRIBE => "Card activate: $Cards->{ID}",
                METHOD   => 0,
                #                                  EXT_ID       => "$Cards->{SERIAL}$Cards->{NUMBER}",
                #                                  CHECK_EXT_ID => "$Cards->{SERIAL}$Cards->{NUMBER}"
              }
            );
          }
        }

        # Check if not card exist
        $payments->list({ EXT_ID => "$Cards->{SERIAL}$Cards->{NUMBER}" });
        if ($payments->{TOTAL} <= 1) {
          $_db->commit();
        }

        if ($conf{CARDS_DEBUG}) {
          my $gt = '';
          if ($begin_time > 0) {
            $gt = gen_time($begin_time);
          }

          `echo "$DATE $TIME $user->{LOGIN} R: $rand $Cards->{SERIAL}$Cards->{NUMBER} A:$ENV{HTTP_USER_AGENT} QS:$ENV{QUERY_STRING} RA:$ENV{REMOTE_ADDR} ADDED ($gt)"   >> /tmp/cards_debug`;
        }

        $_db->{AutoCommit} = 1;
        cross_modules_call('_payments_maked', {
          USER_INFO    => $user,
          SUM          => $Cards->{SUM},
          SKIP_MODULES => 'Cards,Sqlcmd',
          QUITE        => 1,
          SILENT       => 1,
          METHOD       => 2
        });

        return 0;
      }
      elsif ($payments->{errno}) {
        $_db->rollback();
        if ($payments->{errno} == 7) {
          $html->message('err', $lang{ERROR}, "$status[2]", { ID => 608 });
          if ($Cards->{STATUS} != 2) {
            $Cards->cards_change(
              {
                ID       => "$Cards->{ID}",
                STATUS   => 2,
                UID      => $user->{UID},
                DATETIME => "$DATE $TIME",
              }
            );
          }
        }
        else {
          $html->message('err', $lang{ERROR}, "$lang{ERROR} ". (($user->{UID}) ? '' : "$payments->{errno} $payments->{errstr}"), { ID => 609 });
        }
      }
    }
  }

  $db->{AutoCommit} = 1;
  $html->tpl_show(_include('cards_payment_add', 'Cards'), $Cards);

  return 1;
}

#**********************************************************
=head2 cards_dillers_sel($attr)

=cut
#**********************************************************
sub cards_dillers_sel {
  my ($attr) = @_;

  my $dillers_sel = '';

  $dillers_sel = $html->form_select(
    'DILLER_ID',
    {
      SELECTED   => $FORM{DILLER_ID},
      SEL_LIST   => $Cards->cards_dillers_list({ DISABLE => 0, SORT => 2, PAGE_ROWS => 10000, COLS_NAME => 1 }),
      SEL_KEY    => 'id',
      SEL_VALUE  => 'login,fio',
      SEL_OPTIONS=> { '' => '--' },
      MAIN_MENU  => get_function_index('cards_dillers_list'),
      FORM_ID    => ($attr->{FORM_ID}) ? $attr->{FORM_ID} : ''
    }
  );

  return $dillers_sel;
}

#**********************************************************
=head2 cards_dillers() - Cards diller interface

=cut
#**********************************************************
sub cards_dillers {

  $Cards->{ACTION}     = 'add';
  $Cards->{LNG_ACTION} = $lang{ADD};

  if ($FORM{info}) {
    $pages_qs = "&info=$FORM{info}";
    $LIST_PARAMS{DILLER_ID} = $FORM{info};

    $Cards = $Cards->cards_diller_info({ ID => $FORM{info} });
    $html->tpl_show(_include('cards_diller_info', 'Cards'), $Cards);
    cards_main();
    return 0;
  }
  elsif ($FORM{add}) {
    $Cards->cards_diller_add({%FORM});
    if (!$Cards->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{ADDED}");
    }
  }
  elsif ($FORM{change}) {
    $Cards->cards_diller_change({%FORM});
    if (!$Cards->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{CHANGED}");
    }
  }
  elsif ($FORM{chg}) {
    $Cards->cards_diller_info({ ID => $FORM{chg} });
    if (!$Cards->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{CHANGING}");
    }
    $Cards->{ACTION}     = 'change';
    $Cards->{LNG_ACTION} = $lang{CHANGE};
  }
  elsif ($FORM{del} && $FORM{COMMENTS}) {
    $Cards->cards_diller_del({ ID => $FORM{del} });
    if (!$Cards->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{DELETED}");
    }
  }

  _error_show($Cards);

  $Cards->{TARIF_PLAN_SEL} = $html->form_select(
    'TP_ID',
    {
      SELECTED => $Cards->{TP_ID},
      SEL_LIST => $Cards->dillers_tp_list({ COLS_NAME => 1 }),
    }
  );

  $Cards->{DISABLE} = ($Cards->{DISABLE} == 1) ? 'checked' : '';
  $html->tpl_show(_include('cards_dillers', 'Cards'), $Cards);

  my $list = $Cards->cards_dillers_list({%LIST_PARAMS});
  my $table = $html->table(
    {
      width      => '100%',
      caption    => $lang{DILLERS},
      title      => [ 'ID', "$lang{NAME}", "$lang{ADDRESS}", "E-Mail", "$lang{REGISTRATION}", "$lang{PERCENTAGE}", "$lang{STATE}", "$lang{COUNT}", "$lang{ENABLE}", '-', '-', '-' ],
      cols_align => [ 'right', 'left', 'left', 'left', 'right', 'right', 'right', 'right', 'center:noprint', 'center:noprint', 'center:noprint' ],
      qs         => $pages_qs,
      pages      => $Cards->{TOTAL},
      ID         => 'DILLER_LIST'
    }
  );

  foreach my $line (@$list) {
    $table->addrow(
      $line->[0],
      $line->[1],
      $line->[2],
      $line->[3],
      $line->[4],
      $line->[5],
      $status[ $line->[6] ],
      $line->[7],
      $line->[8],
      $html->button($lang{INFO},   "index=$index$pages_qs&info=$line->[0]", { class => 'show' }),
      $html->button($lang{CHANGE}, "index=$index$pages_qs&chg=$line->[0]",  { class => 'change' }),
      $html->button($lang{DEL}, "index=$index$pages_qs&del=$line->[0]", { MESSAGE => "$lang{DEL} [$line->[0]] ?", class => 'del' })
    );
  }

  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ],
      rows       => [ [ "$lang{TOTAL}:", $html->b($Cards->{TOTAL}) ] ]
    }
  );
  print $table->show();

  return 1;
}

#**********************************************************
=head2 cards_report()

=cut
#**********************************************************
sub cards_report {
  reports(
    {
      DATE        => $FORM{DATE},
      REPORT      => '-----------------',
      EX_PARAMS   => { 1 => $lang{DILLERS}, 2 => $lang{ICARDS} },
      PERIOD_FORM => 1
    }
  );

  if ($FORM{DATE} && (!$FORM{DILLER_ID} && !$FORM{SERIAL})) {
    if ($FORM{EX_PARAMS} && $FORM{EX_PARAMS} == 2) {
      $LIST_PARAMS{GROUP} = 'c.serial';

      cards_report_dillers({ CAPTION => "$lang{ICARDS} / $lang{SERIAL}" });
    }
    else {
      cards_report_dillers({ CAPTION => "$lang{DILLERS}" });
    }
  }
  else {
    my $report_hash = $Cards->cards_report_days({%LIST_PARAMS});

    if (_error_show($Cards)) {
      return 0;
    }

    if ($FORM{DILLER_ID}) {
      $Cards = $Cards->cards_diller_info({ ID => $FORM{DILLER_ID} });
      $html->tpl_show(_include('cards_diller_info', 'Cards'), $Cards);
    }

    my $table = $html->table(
      {
        width      => '100%',
        caption    => "$lang{SERIAL} : " . ($FORM{SERIAL} || q{}),
        cols_align => [ 'left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right' ],
        qs         => $pages_qs
      }
    );

    $table->addtd(
      $table->td($lang{DATE},     {  rowspan => 2 }),
      $table->td($lang{ENABLE},   {  colspan => 2 }),
      $table->td($lang{PAYMENTS}, {  colspan => 2 }),
      $table->td($lang{DISABLE},  {  colspan => 2 }),
      $table->td($lang{RETURNED}, {  colspan => 2 }),
      $table->td($lang{LOGIN},    {  colspan => 2 }),
      $table->td($lang{DILLERS},  {  colspan => 2 }),
      $table->td($lang{SOLD},     {  colspan => 2 })
    );

    #$table->{rowcolor} = $_COLORS[0];
    $table->addrow("$lang{COUNT}", "$lang{SUM}", "$lang{COUNT}", "$lang{SUM}", "$lang{COUNT}", "$lang{SUM}", "$lang{COUNT}", "$lang{SUM}", "$lang{COUNT}", "$lang{SUM}", "$lang{COUNT}", "$lang{SUM}", "$lang{COUNT}", "$lang{SUM}");

    $table->{rowcolor} = undef;

    my @days_arr = sort keys %$report_hash;

    for (my $i = $#days_arr ; $i >= 0 ; $i--) {
      my $k = $days_arr[$i];
      my $v = $report_hash->{$k};

      $table->addrow(
        $html->button($k, "index=$index&DATE=$k"),
        ($v->{ENABLE})     ? $v->{ENABLE}     : 0,
        ($v->{ENABLE_SUM}) ? $v->{ENABLE_SUM} : 0.00,

        ($v->{USED})     ? $v->{USED}     : 0,
        ($v->{USED_SUM}) ? $v->{USED_SUM} : 0.00,

        ($v->{DISABLE})     ? $v->{DISABLE}     : 0,
        ($v->{DISABLE_SUM}) ? $v->{DISABLE_SUM} : 0.00,

        ($v->{RETURNED})     ? $v->{RETURNED}     : 0,
        ($v->{RETURNED_SUM}) ? $v->{RETURNED_SUM} : 0.00,

        ($v->{LOGIN})     ? $v->{LOGIN}     : 0,
        ($v->{LOGIN_SUM}) ? $v->{LOGIN_SUM} : 0.00,

        ($v->{DILLERS})     ? $v->{DILLERS}     : 0,
        ($v->{DILLERS_SUM}) ? $v->{DILLERS_SUM} : 0.00,

        ($v->{DILLERS_SOLD})     ? $v->{DILLERS_SOLD}     : 0,
        ($v->{DILLERS_SOLD_SUM}) ? $v->{DILLERS_SOLD_SUM} : 0.00,

        #$val
      );

    }

    $table->{rowcolor} = $_COLORS[3];
    $table->addrow(
      "$lang{TOTAL}:",

      ($Cards->{ENABLE_TOTAL})     ? $Cards->{ENABLE_TOTAL}     : 0,
      ($Cards->{ENABLE_TOTAL_SUM}) ? $Cards->{ENABLE_TOTAL_SUM} : 0.00,

      ($Cards->{USED_TOTAL})     ? $Cards->{USED_TOTAL}     : 0,
      ($Cards->{USED_TOTAL_SUM}) ? $Cards->{USED_TOTAL_SUM} : 0.00,

      ($Cards->{DISABLE_TOTAL})     ? $Cards->{DISABLE_TOTAL}     : 0,
      ($Cards->{DISABLE_TOTAL_SUM}) ? $Cards->{DISABLE_TOTAL_SUM} : 0.00,

      ($Cards->{RETURNED_TOTAL})     ? $Cards->{RETURNED_TOTAL}     : 0,
      ($Cards->{RETURNED_TOTAL_SUM}) ? $Cards->{RETURNED_TOTAL_SUM} : 0.00,

      ($Cards->{LOGIN_TOTAL})     ? $Cards->{LOGIN_TOTAL}     : 0,
      ($Cards->{LOGIN_TOTAL_SUM}) ? $Cards->{LOGIN_TOTAL_SUM} : 0.00,

      ($Cards->{DILLERS_TOTAL})     ? $Cards->{DILLERS_TOTAL}     : 0,
      ($Cards->{DILLERS_TOTAL_SUM}) ? $Cards->{DILLERS_TOTAL_SUM} : 0.00,

      ($Cards->{DILLERS_SOLD_TOTAL})     ? $Cards->{DILLERS_TOTAL}     : 0,
      ($Cards->{DILLERS_SOLD_TOTAL_SUM}) ? $Cards->{DILLERS_TOTAL_SUM} : 0.00
    );

    print $table->show();
  }

  return 1;
}

#**********************************************************
#
#**********************************************************
sub cards_report_dillers {
  my ($attr) = @_;

  if ($FORM{DILLER_ID}) {
    $LIST_PARAMS{DILLER_ID} = $FORM{DILLER_ID};

    cards_report();
    return 0;
  }
  elsif ($FORM{SERIAL}) {
    $LIST_PARAMS{SERIAL} = $FORM{SERIAL};

    cards_report();
    return 0;
  }

  if (!$FORM{DATE}) {
    reports(
      {
        DATE        => $FORM{DATE},
        REPORT      => '',
        EX_PARAMS   => { 1 => $lang{DILLERS}, 2 => $lang{ICARDS} },
        PERIOD_FORM => 1
      }
    );
    delete $LIST_PARAMS{MONTH};
  }

  my $list = $Cards->cards_report_dillers({%LIST_PARAMS});
  my $table = $html->table(
    {
      width      => '100%',
      caption    => $attr->{CAPTION} || $lang{DILLERS},
      cols_align => [ 'left', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right' ],
      qs         => $pages_qs,
      pages      => $Cards->{TOTAL},
      ID         => 'CARDS_REPORT_DILLERS'
    }
  );

  $table->addtd(
    $table->td($attr->{CAPTION}, { bgcolor => 'title_color', rowspan => 2 }),
    $table->td($lang{ENABLE},         { bgcolor => 'title_color', colspan => 2 }),
    $table->td($lang{DISABLE},        { bgcolor => $_COLORS[0],   colspan => 2 }),
    $table->td($lang{PAYMENTS},       { bgcolor => $_COLORS[0],   colspan => 2 }),
    $table->td($lang{LOGIN},          { bgcolor => $_COLORS[0],   colspan => 2 }),

    #$table->td($lang{TAKE}, { bgcolor => $_COLORS[0], colspan => 2 } ),
    $table->td($lang{SOLD},     { bgcolor => $_COLORS[0], colspan => 3 }),
    $table->td($lang{RETURNED}, { bgcolor => $_COLORS[0], colspan => 2 }),
    $table->td($lang{TOTAL},    { bgcolor => $_COLORS[0], colspan => 2 })
  );

  $table->{rowcolor} = $_COLORS[0];
  $table->addrow(
    "$lang{COUNT}", "$lang{SUM}",
    "$lang{COUNT}", "$lang{SUM}",
    "$lang{COUNT}", "$lang{SUM}",
    "$lang{COUNT}", "$lang{SUM}",

    #"$lang{COUNT}", "$lang{SUM}",
    "$lang{COUNT}", "$lang{SUM}", "$lang{PERCENTAGE}",
    "$lang{COUNT}", "$lang{SUM}",
    "$lang{COUNT}", "$lang{SUM}"
  );

  $table->{rowcolor} = undef;

  foreach my $line (@$list) {
    my $button = ($LIST_PARAMS{GROUP}) ? $html->button($line->[0], "index=$index&SERIAL=$line->[0]$pages_qs") : $html->button($line->[0], "index=" . get_function_index('cards_diller') . "&UID=$line->[19]$pages_qs");

    $table->addrow(
      $button,
      $line->[1],
      $line->[2],
      $line->[3],
      $line->[4],
      $line->[5],
      $line->[6],
      $line->[7],
      $line->[8],

      #$line->[9],
      #$line->[10],
      $line->[11],
      $line->[12],
      $line->[13],
      $line->[14],
      $line->[15],
      $line->[16],
      $line->[17]
    );
  }

  $table->{rowcolor} = $_COLORS[3];
  $table->addrow(
    "$lang{TOTAL}:",
    $Cards->{ENABLE_TOTAL},
    $Cards->{ENABLE_TOTAL_SUM},
    $Cards->{DISABLE_TOTAL},
    $Cards->{DISABLE_TOTAL_SUM},
    $Cards->{PAYMENT_TOTAL},
    $Cards->{PAYMENT_TOTAL_SUM},
    $Cards->{LOGIN_TOTAL},
    $Cards->{LOGIN_TOTAL_SUM},

    #$Cards->{TAKE_TOTAL},
    #$Cards->{TAKE_TOTAL_SUM},
    $Cards->{SOLD_TOTAL},
    $Cards->{SOLD_TOTAL_SUM},
    $Cards->{SOLD_TOTAL_PERCENTAGE},

    $Cards->{RETURN_TOTAL},
    $Cards->{RETURN_TOTAL_SUM},
    $Cards->{COUNT_TOTAL},
    $Cards->{COUNT_TOTAL_SUM}
  );

  print $table->show();

  return 1;
}

#**********************************************************
#
#**********************************************************
sub cards_reseller_face {
  #my ($attr) = @_;
  $Cards->cards_diller_info({ UID => $user->{UID} });

  if ($Cards->{TOTAL} < 1) {
    $html->set_cookies('sid', "", "Fri, 1-Jan-2038 00:00:01");
    $html->header() if ($FORM{qindex});
    $html->message('info', $lang{INFO}, "$lang{ACCOUNT} $lang{NOT_EXIST}");
    return 0;
  }

  if ($user->{DEPOSIT} + $user->{CREDIT} > 0) {

    #Generate Cards
    if (cards_diller_add({ RESELLER => 1 }) > 0) {
      return 0;
    }
  }
  else {
    print "Content-Type: text/html\n\n" if ($FORM{qindex});
    $html->message('info', $lang{INFO}, "$lang{ERR_SMALL_DEPOSIT}");
  }

  $Cards->{DISABLE} = $status[ $Cards->{DISABLE} ];
  $html->tpl_show(_include('cards_diller_info', 'Cards'), { %$Cards, %$user }, { ID => 'DILLER_INFO' });

  return 0;
}

#**********************************************************
=head2 cards_diller_face()

=cut
#**********************************************************
sub cards_diller_face {
  my ($attr) = @_;

  $users = $attr->{USER_INFO};
  $Cards->cards_diller_info({ UID => $users->{UID} });

  if (! $Cards->{ID}) {
    $html->set_cookies('sid', "", "Fri, 1-Jan-2038 00:00:01");
    $html->header() if ($FORM{qindex});
    $html->message('info', $lang{INFO}, "- $lang{ACCOUNT} $lang{NOT_EXIST}", { ID => 671 });
    return 0;
  }

  if (($users->{DEPOSIT} + $users->{CREDIT} > 0 && $Cards->{PAYMENT_TYPE} == 0) || $Cards->{PAYMENT_TYPE} > 0) {
    if (cards_diller_add() > 0) {
      return 0;
    }
  }
  else {
    print "Content-Type: text/html\n\n" if ($FORM{qindex});
    $html->message('info', $lang{INFO}, "$lang{ERR_SMALL_DEPOSIT}", { ID => 672  });
  }

  $Cards->{DISABLE} = $status[ $Cards->{DISABLE} ];
  $html->tpl_show(_include('cards_diller_info', 'Cards'), { %$Cards, %$user }, { ID => 'DILLER_INFO' });

  return 1;
}

#**********************************************************
=head2 cards_diller()

=cut
#**********************************************************
sub cards_diller {
  $Cards->{ACTION}     = 'add';
  $Cards->{LNG_ACTION} = $lang{ADD};

  #my $fees = Finance->fees($db, $admin, \%conf);

  if ($FORM{change_permits}) {
    $Cards->diller_permissions_set({%FORM});
    if (!$Cards->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{ADDED}");
    }
  }
  elsif (!$FORM{SERIA}) {
    if ($FORM{add}) {
      $Cards->cards_diller_add({%FORM});
      if (!$Cards->{errno}) {
        $html->message('info', $lang{INFO}, "$lang{ADDED}");
      }
      delete($FORM{add});
    }
    elsif ($FORM{change}) {
      $Cards->cards_diller_change({%FORM});
      if (!$Cards->{errno}) {
        $html->message('info', $lang{INFO}, "$lang{CHANGED}");
      }
      delete($FORM{change});
    }
    elsif ($FORM{del} && $FORM{COMMENTS}) {
      $Cards->cards_diller_del({ UID        => $FORM{UID},
                                 DILELR_ID  => $FORM{DILLER_ID}
                               });

      if (!$Cards->{errno}) {
        $html->message('info', $lang{INFO}, "$lang{DELETED}");
      }
      return 0;
    }
  }

  _error_show($Cards);

  $Cards->cards_diller_info(\%FORM);
  my $diller_id = 0;

  if ($Cards->{TOTAL} > 0) {
    $Cards->{ACTION}        = 'change';
    $Cards->{LNG_ACTION}    = $lang{CHANGE};
    $diller_id              = $Cards->{ID};
    $pages_qs               = "&UID=$FORM{UID}&DILLER_ID=$Cards->{ID}";
    $LIST_PARAMS{DILLER_ID} = $Cards->{ID};
    cards_main();
  }

  $Cards->{TARIF_PLAN_SEL} = $html->form_select(
    'TP_ID',
    {
      SELECTED       => $Cards->{TP_ID} || 0,
      SEL_LIST       => $Cards->dillers_tp_list({ COLS_NAME => 1 }),
      NO_ID          => 1,
      MAIN_MENU      => get_function_index('cards_dillers_tp'),
      MAIN_MENU_ARGV => $Cards->{TP_ID} ? "chg=$Cards->{TP_ID}" : ''
    }
  );

  $Cards->{DEL_BUTTON} = "$lang{CONFIRM}:" . $html->form_input('COMMENTS', "1", { TYPE => 'checkbox' }) . $html->form_input('del', "$lang{DEL}", { TYPE => 'submit' });
  $Cards->{DISABLE} = ($Cards->{DISABLE} && $Cards->{DISABLE} == 1) ? 'checked' : '';

  $html->tpl_show(_include('cards_dillers', 'Cards'), { %$Cards, ID => $diller_id });

  if (in_array('Multidoms', \@MODULES) && $LIST_PARAMS{DILLER_ID}) {
    my %ACTIONS = (
      $lang{ICARDS}      => 1,
      $lang{TARIF_PLANS} => 2,
      $lang{NAS}         => 3,
      $lang{DILLERS}     => 4,
      $lang{TEMPLATES}   => 5,
      $lang{REPORTS}     => 6,
      $lang{FINANCES}    => 7
    );

    my $permits = $Cards->diller_permissions_list({ %FORM, DILLER_ID => $LIST_PARAMS{DILLER_ID} });
    my $table = $html->table(
      {
        width      => '400',
        caption    => $lang{PERMISSION},
        title      => [ $lang{ACTION}, $lang{COMMENTS}, '-' ],
        cols_align => [ 'left', 'left', 'center' ],
      }
    );

    foreach my $key (sort keys %ACTIONS) {
      $table->addrow(
        $key, '',
        $html->form_input(
          'PERMITS',
          $ACTIONS{$key},
          {
            TYPE  => 'checkbox',
            STATE => ($permits->{ $ACTIONS{$key} }) ? 'checked' : undef
          }
        )
      );
    }

    print $html->form_main(
      {
        CONTENT => $table->show(),
        HIDDEN  => {
          index     => $index,
          DILLER_ID => $LIST_PARAMS{DILLER_ID},
          UID       => $FORM{UID}
        },
        SUBMIT => { change_permits => "$lang{CHANGE}" },
      }
    );
  }

  return 1;
}

#**********************************************************
=head2 cards_diller_add($attr)

=cut
#**********************************************************
sub cards_diller_add {
  my ($attr) = @_;

  $Cards->{ACTION}     = 'add';
  $Cards->{LNG_ACTION} = $lang{ADD};
  $FORM{EXPORT}        = '' if (!$FORM{EXPORT});
  my $EXPIRE_DATE      = q{};

  if(! $FORM{SUM}){
    $FORM{SUM} = $FORM{SUM_NEW};
  }

  if ($FORM{add}) {
    if (!$FORM{TYPE} && defined($FORM{SUM}) && $FORM{SUM} <= 0) {
      if ($FORM{EXPORT} && $FORM{EXPORT} eq 'cards_server') {
        return { ERROR => 'ERR_WRONG_SUM' };
      }
      else {
        print $html->header();
        $html->message('err', $lang{ERROR}, "$lang{SUM}: $FORM{SUM} \n $lang{ERR_WRONG_SUM}", { ID => 673 });
        print $html->{OUTPUT};
      }
      exit;
    }

    my $fees = Finance->fees($db, $admin, \%conf);

    if ($FORM{EXPORT}) {
      if ($FORM{EXPORT} eq 'xml') {
        print "Content-Type: text/xml; filename=\"cards_$DATE.xml\"\n" . "Content-Disposition: attachment; filename=\"cards_$DATE.xml\"; size=" . "\n\n";
        print "<?xml version=\"1.0\" encoding=\"$html->{CHARSET}\"?>\n";
      }
      elsif ($FORM{EXPORT} eq 'text') {
        print "Content-Type: text/plain; filename=\"cards_$DATE.csv\"\n" . "Content-Disposition: attachment; filename=\"cards_$DATE.csv\"; size=" . "\n\n";
      }
    }
    else {
      print $html->header();
    }

    if ($COOKIES{OP_SID} && $FORM{OP_SID} && $FORM{OP_SID} eq $COOKIES{OP_SID}) {
      if ($FORM{EXPORT} eq 'cards_server') {
        return { ERROR => 'EXIST' };
      }

      $html->message('err', $lang{ERROR}, "$lang{EXIST}");
      print "$lang{ICARDS} $lang{EXIST} Error id: 674 ($FORM{OP_SID} // $COOKIES{OP_SID})";
      exit;
    }

    my $list = $Cards->cards_list(
      {
        SERIAL    => $conf{CARDS_DILLER_SERIAL} || '',
        NUMBER    => '_SHOW',
        PAGE_ROWS => 1,
        SORT      => 2,
        DESC      => 'DESC',
        COLS_NAME => 1
      }
    );
    my $serial = 0;
    my $count = $FORM{COUNT} || 1;

    if ($Cards->{TOTAL} > 0) {
      $serial = $list->[0]->{number};
    }

    $serial++;

    if ($FORM{CARDS_PAYMENT_PIN_LENGTH}) {
      $FORM{CARDS_PAYMENT_PIN_LENGTH} = $conf{CARDS_PAYMENT_PIN_LENGTH} || 8;
    }

    #Get duiller TP info Take fees
    my $sum = 0;
    if ($Cards->{PERCENTAGE} && $Cards->{PERCENTAGE} > 0) {
    }
    else {
      $Cards->dillers_tp_info({ ID => $Cards->{TP_ID} });

      if ($Cards->{TOTAL} > 0) {
        if ($Cards->{PERCENTAGE} > 0) {
          $sum = $FORM{SUM} - ($FORM{SUM} / 100 * (100 - (100 - $Cards->{PERCENTAGE})));
        }

        if ($Cards->{OPERATION_PAYMENT} > 0) {
          $sum += $Cards->{OPERATION_PAYMENT};
        }
      }
      else {
        $sum = $FORM{SUM};
      }
    }

    my @CARDS_OUTPUT = ();
    my $diller = $Cards;
    #Import from other systems
    if ($FORM{import}) {
    }
    else {
      if ($FORM{TYPE} && !$FORM{TP_ID}) {
        $html->message('err', "$lang{INFO}", "$lang{ERR_SELECT_TARIF_PLAN}");
      }
      elsif ($FORM{TYPE}) {
        load_module('Dv', $html);
        $FORM{add}    = 1;
        $FORM{create} = 1;
        if (!$FORM{BEGIN}) {
          $list = $users->list(
            {
              PAGE_ROWS => 1,
              SORT      => 8,
              DESC      => 'DESC',
              COLS_NAME => 1
            }
          );
          $FORM{BEGIN}       = $list->[0]->{uid};
          $FORM{LOGIN_BEGIN} = $list->[0]->{uid};
        }

        my $return = cards_users_add(
          {
            #EXTRA_TPL => $dv_tpl,
            NO_PRINT  => 1
          }
        );

        my $added_count = 0;

        if (ref($return) eq 'ARRAY') {
          foreach my $line (@$return) {
            $FORM{'1.LOGIN'}       = $line->{LOGIN};
            $FORM{'1.PASSWORD'}    = $line->{PASSWORD};
            $FORM{'1.CREATE_BILL'} = 1;
            $FORM{'4.TP_ID'}       = $FORM{TP_ID};
            $line->{UID} = dv_wizard_user({ SHORT_REPORT => 1 });

            if ($line->{UID} < 1) {
              $html->message('err', "$lang{ERROR}", "$lang{LOGIN}: '$line->{LOGIN}'");
              last if (!$line->{SKIP_ERRORS});
            }
            else {

              #Confim card creation
              $added_count++;
              $line->{NUMBER} = sprintf("%.11d", $line->{NUMBER});
              push @CARDS_OUTPUT,
              {
                #PIN         => $pin,
                LOGIN       => $FORM{'1.LOGIN'},
                PASSWORD    => $FORM{'1.PASSWORD'},
                PIN         => $FORM{'1.PASSWORD'},
                NUMBER      => $line->{NUMBER},
                SERIA       => $line->{SERIA},
                EXPIRE_DATE => ($EXPIRE_DATE ne '0000-00-00') ? $EXPIRE_DATE : '',
                DATE        => "$DATE $TIME",
                SUM         => sprintf("%.2f", $FORM{SUM}),
                DILLER_ID   => $Cards->{ID},
                TARF_PLAN   => $FORM{TP_ID}
              };

              #If prepaid or postpaid service
              if ($Cards->{PAYMENT_TYPE} < 2) {
                if ($Cards->{PERCENTAGE} > 0) {
                  $sum = $FORM{SUM} - ($FORM{SUM} / 100 * (100 - (100 - $Cards->{PERCENTAGE})));
                }
                if ($sum > 0) {
                  $fees->take(
                    $user, $sum,
                    {
                      DESCRIBE     => "$lang{ICARDS} $line->{SERIA}$line->{NUMBER}",
                      METHOD       => 0,
                      EXT_ID       => "$Cards->{SERIAL}$line->{NUMBER}",
                      CHECK_EXT_ID => "$Cards->{SERIAL}$line->{NUMBER}"
                    }
                  );

                  _error_show($fees);
                }
              }

              if (cards_users_gen_confim({ %$line, SUM => ($FORM{'5.SUM'}) ? $FORM{'5.SUM'} : 0 }) == 0) {
                return 0;
              }
            }
          }
        }
      }
      else {
        for (my $i = $serial ; $i < $serial + $count ; $i++) {
          if ($FORM{TYPE}) {
            #my $password = mk_unique_value($FORM{PASSWD_LENGTH}, { SYMBOLS => $FORM{PASSWD_SYMBOLS} || $conf{PASSWD_SYMBOLS} || undef });
          }

          my $pin = mk_unique_value($FORM{CARDS_PAYMENT_PIN_LENGTH}, { SYMBOLS => $conf{CARDS_PIN_SYMBOLS} || '1234567890' });
          $EXPIRE_DATE = '0000-00-00';
          my $card_number =  sprintf("%.11d", $i);

          $Cards->cards_add(
            {
              SERIAL    => $conf{CARDS_DILLER_SERIAL} || '',
              NUMBER    => $card_number,
              PIN       => $pin,
              SUM       => $FORM{SUM},
              STATUS    => 0,
              EXPIRE    => $EXPIRE_DATE,
              DILLER_ID => $diller->{ID}
            }
          );

          if ($Cards->{errno}) {
            if ($FORM{EXPORT} eq 'cards_server') {
              return { ERROR => 'CARDS_GENERATION_ERROR' };
            }

            if ($Cards->{errno} == 7) {
              $html->message('err', $lang{ERROR}, "$lang{EXIST}\n$lang{CARD_SERVICE}: $card_number");
            }
            else {
              $html->message('err', $lang{ERROR}, "[$Cards->{errno}] $err_strs{$Cards->{errno}} $lang{CARD_SERVICE}: $card_number");
            }
            return 0;
          }
          else {
            if ($Cards->{PAYMENT_TYPE} < 2) {
              if ($diller->{PERCENTAGE} > 0) {
                $sum = $FORM{SUM} - ($FORM{SUM} / 100 * (100 - (100 - $diller->{PERCENTAGE})));
              }
              $fees->take(
                $user, $sum,
                {
                  DESCRIBE     => "$lang{ICARDS} $Cards->{SERIAL}$i",
                  METHOD       => 0,
                  EXT_ID       => "$Cards->{SERIAL}$i",
                  CHECK_EXT_ID => "$Cards->{SERIAL}$i"
                }
              );
            }

            push @CARDS_OUTPUT,
            {
              LOGIN       => '-',
              PIN         => $pin,
              NUMBER      => $card_number,
              EXPIRE_DATE => ($EXPIRE_DATE ne '0000-00-00') ? $EXPIRE_DATE : '',
              DATE        => "$DATE $TIME",
              SUM         => sprintf("%.2f", $FORM{SUM}),
              DILLER_ID   => $diller->{ID}
            };
          }
        }
      }
    }

    #Show cards
    if ($FORM{EXPORT} eq 'xml') {
      print "<CARDS>";
      foreach my $card_info (@CARDS_OUTPUT) {
        print "<CARD>
          <LOGIN>$card_info->{PIN}</LOGIN>
          <PIN>$card_info->{PIN}</PIN>
          <NUMBER>$card_info->{NUMBER}</NUMBER>
          <EXPIRE_DATE>$card_info->{EXPIRE_DATE}</EXPIRE_DATE>
          <CREATED_DATE>$card_info->{DATE}</CREATED_DATE>
          <SUM>$card_info->{SUM}</SUM>
          <DILLER_ID>$card_info->{DILLER_ID}</DILLER_ID></CARD>\n";
      }
      print "</CARDS>";
    }
    elsif ($FORM{EXPORT} eq 'text') {
      foreach my $card_info (@CARDS_OUTPUT) {
        print "$card_info->{LOGIN}\t$card_info->{PIN}\t$card_info->{NUMBER}\t$card_info->{EXPIRE_DATE}\t$card_info->{DATE}\t$card_info->{SUM}\t$card_info->{DILLER_ID}\n";
      }
    }
    elsif ($FORM{EXPORT} eq 'order_print') {
      my $content = "Print Cards\n";
      foreach my $card_info (@CARDS_OUTPUT) {
        $content .= "$card_info->{PIN}\t$card_info->{NUMBER}\t$card_info->{EXPIRE_DATE}\t$card_info->{DATE}\t$card_info->{SUM}\t$card_info->{DILLER_ID}\n";
      }
      sendmail("$user->{FROM}", "$conf{ADMIN_MAIL}", "Cards Print", "$content", "$conf{MAIL_CHARSET}", "$FORM{PRIORITY} ($MAIL_PRIORITY{$FORM{PRIORITY}})");
      $html->message('info', "$lang{INFO}", "$lang{SENDED} $lang{ORDER_PRINT}");
    }
    elsif ($FORM{EXPORT} eq 'cards_server') {
      foreach my $card_info (@CARDS_OUTPUT) {
        return {
          LOGIN       => $card_info->{LOGIN},
          PIN         => $card_info->{PIN},
          NUMBER      => $card_info->{NUMBER},
          EXPIRE_DATE => $card_info->{EXPIRE_DATE},
          DATE        => $card_info->{DATE},
          SUM         => $card_info->{SUM},
          DILLER_ID   => $card_info->{DILLER_ID}
        };
      }
    }
    else {
      foreach my $card_info (@CARDS_OUTPUT) {
        $html->tpl_show(_include('cards_check', 'Cards'), $card_info);
      }
    }

    return 1;
  }

  $Cards->{OP_SID} = mk_unique_value(16);

  if ($attr->{RESELLER}) {
    $Cards->{TYPE_SEL} = $html->form_select(
      'TYPE',
      {
        SELECTED     => $FORM{TYPE},
        SEL_ARRAY    => [ $lang{PAYMENTS}, "$lang{SERVICES} ($lang{LOGIN} + $lang{PASSWD})" ],
        ARRAY_NUM_ID => 1,
        EX_PARAMS    => 'onchange=\'samechanged(this)\''
      }
    );

    $Cards->{TP_SEL} = $html->form_select(
      'TP_ID',
      {
        SELECTED   => $FORM{TP_ID},
        SEL_LIST   => $tariffs->list(
              {
                PAGE_ROWS => 1,
                SORT      => 1,
                DESC      => 'desc',
                DOMAIN_ID => $user->{DOMAIN_ID},
                COLS_NAME => 1
              }),
        EX_PARAMS         => '',    #'STYLE=\'background-color: #dddddd\' name=\'TP_ID\'',
        NO_ID             => 1
      }
    );

    $html->tpl_show(
      _include('cards_reseller_cod_gen', 'Cards'),
      {
        COUNT => 1,
        SUM   => 0.00,
        %$Cards
      },
      { ID => 'CARD_GEN' }
    );
  }
  else {
    $html->tpl_show(_include('cards_dillers_cod_gen', 'Cards'), { COUNT => 1, SUM => 0.00, %$Cards }, { ID => 'CARD_GEN' });
  }

  return 0;
}

#**********************************************************
=head2 cards_dillers_list()

=cut
#**********************************************************
sub cards_dillers_list {

  my $list  = $Cards->cards_dillers_list({%LIST_PARAMS});
  my $table = $html->table(
    {
      width   => '100%',
      caption => "$lang{DILLERS}",
      title   => [ 'ID', "$lang{LOGIN}", "$lang{NAME}", "$lang{ADDRESS}", "E-Mail", "$lang{REGISTRATION}", "$lang{PERCENTAGE}", "$lang{STATE}", "$lang{COUNT}", "$lang{ENABLE}" ],
      cols_align => [ 'right', 'left', 'left', 'left', 'right', 'right', 'right', 'right', ],
      qs         => $pages_qs,
      pages      => $Cards->{TOTAL},
      ID         => 'CARDS_DILLERS'
    }
  );

  foreach my $line (@$list) {
    $table->addrow($line->[0],
      $html->button($line->[1], "index=15&UID=$line->[10]&MODULE=Cards"),
      $line->[2],
      $line->[3],
      $line->[4],
      $line->[5],
      $line->[6],
      $status[ $line->[7] ],
      $line->[8],
      $line->[9]
    );
  }

  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ],
      rows       => [ [ "$lang{TOTAL}:", $html->b($Cards->{TOTAL}) ] ]
    }
  );
  print $table->show();

  return 1;
}

#**********************************************************
=head2 cards_dillers_tp($attr)

=cut
#**********************************************************
sub cards_dillers_tp {

  $Cards->{LNG_ACTION} = $lang{ADD};
  $Cards->{ACTION}     = 'add';

  my @Payment_Types = ($lang{PREPAID}, $lang{POSTPAID}, $lang{ACTIVATION_PAYMENTS});

  if ($FORM{add}) {
    $Cards->dillers_tp_add({%FORM});
    if (!$Cards->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{ADDED}");
    }
  }
  elsif ($FORM{change}) {
    $Cards->dillers_tp_change({%FORM});
    if (!$Cards->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{CHANGED}");
    }
  }
  elsif ($FORM{chg}) {
    $Cards->dillers_tp_info({ ID => $FORM{chg} });
    if (!$Cards->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{CHANGING}");
    }

    $FORM{add_form}      = 1;
    $Cards->{ACTION}     = 'change';
    $Cards->{LNG_ACTION} = $lang{CHANGE};
  }
  elsif ($FORM{del} && $FORM{COMMENTS}) {
    $Cards->dillers_tp_del({ ID => $FORM{del} });
    if (!$Cards->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{DELETED}");
    }
  }

  _error_show($Cards);

  $Cards->{PAYMENT_TYPE_SEL} = $html->form_select(
    'PAYMENT_TYPE',
    {
      SELECTED     => $Cards->{PAYMENT_TYPE},
      SEL_ARRAY    => \@Payment_Types,
      ARRAY_NUM_ID => 1
    }
  );

  $Cards->{NAS_TP} = ($Cards->{NAS_TP}) ? 'checked' : '';
  if($FORM{add_form}) {
    $html->tpl_show(_include('cards_dillers_tp', 'Cards'), $Cards);
  }

  my $list  = $Cards->dillers_tp_list({%LIST_PARAMS, COLS_NAME => 1 });
  my $table = $html->table(
    {
      width      => '100%',
      caption    => "$lang{TARIF_PLANS}",
      border     => 1,
      title      => [ $lang{NAME}, $lang{PERCENTAGE}, $lang{OPERATION_PAYMENT}, $lang{PAYMENT_TYPE}, '-', '-' ],
      cols_align => [ 'left', 'right', 'left', 'center', 'center', 'center', 'center:noprint', 'center:noprint' ],
      ID         => 'DILLERS_TARIF_PLANS',
      MENU       => "$lang{ADD}:index=$index&add_form=1:add;"
    }
  );

  my ($delete, $change);
  foreach my $line (@$list) {
    if ($permissions{4}{1}) {
      $delete = $html->button($lang{DEL}, "index=$index&del=$line->{id}", { MESSAGE => "$lang{DEL} $line->{name}?", class => 'del' });
      $change = $html->button($lang{CHANGE}, "index=$index&chg=$line->{id}", { class => 'change' });
    }

    if ($FORM{chg} && $FORM{chg} eq $line->{id}) {
      $table->{rowcolor} = 'bg-success';
    }
    else {
      delete($table->{rowcolor});
    }

    $table->addrow($html->button($line->{name}, "index=$index&TP_ID=$line->{id}"),
       $line->{percentage},
       $line->{operation_payment},
       $Payment_Types[ $line->{payment_type} ],
       $change,
       $delete);
  }

  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right' ],
      rows       => [ [ "$lang{TOTAL}:", $html->b($tariffs->{TOTAL}) ] ]
    }
  );
  print $table->show();

  return 1;
}

#**********************************************************
=head2 cards_diller_stats()

=cut
#**********************************************************
sub cards_diller_stats {

  %LIST_PARAMS = ();
  my $diller = $Cards;
  $LIST_PARAMS{DILLER_ID} = $diller->{ID};
  $LIST_PARAMS{SERIAL}    = '';

  $FORM{PAGE_ROWS} = $FORM{rows} if ($FORM{rows});

  if ($FORM{print}) {
    $LIST_PARAMS{CREATED_DATE} = $FORM{print};
    print "Content-Type: text/html\n\n";

    my $list = $Cards->cards_list({ COUNT     =>  '_SHOW',
                                    SUM       =>  '_SHOW',
                                    %LIST_PARAMS,
                                    PAGE_ROWS => 1000000,
                                    COLS_NAME => 1
                                  });

    my $total_count = 0;
    my $total_sum   = 0;

    foreach my $line (@$list) {
      $total_count += $line->{cards_count};
      $total_sum   += $line->{sum};
    }

    $html->tpl_show(
      _include('cards_diller_sum_check', 'Cards'),
      {
        DATE        => "$DATE $TIME",
        TOTAL_COUNT => $total_count,
        TOTAL_SUM   => sprintf("%.2f", $total_sum),
        DILLER_ID   => $diller->{ID},
        DETAILS     => undef
      }
    );
    return 0;
  }
  elsif ($FORM{print_cards}) {
    cards_print();
    exit;
  }

  my $table = $html->table(
    {
      width    => '100%',
      rows     => [
        [
          "$lang{FROM}: ",
          $html->date_fld2('CREATED_FROM_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'cards_list', WEEK_DAYS => \@WEEKDAYS }),
          "$lang{TO}: ",
          $html->date_fld2('CREATED_TO_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'cards_list', WEEK_DAYS => \@WEEKDAYS }),
          $html->form_select(
            'TYPE',
            {
              SELECTED => $FORM{TYPE},
              SEL_HASH => {
                CARDS => $lang{ICARDS},
                DAYS  => $lang{DAYS}
              },
              SORT_KEY => 1,
              NO_ID    => 1
            }
          ),
          "$lang{STATUS}: "
          . $html->form_select(
            'STATUS',
            {
              SELECTED => $FORM{STATUS},
              SEL_HASH => {
                '' => "$lang{ALL}",
                1  => "$lang{ENABLE}",
                3  => "$lang{USED}"
              },
              SORT_KEY => 1,
              NO_ID    => 1
            }
          ),
          "$lang{ROWS}: " . $html->form_input('rows', ($FORM{rows} || int($conf{list_max_recs})), { SIZE => 4, OUTPUT2RETURN => 1 }),
          $html->form_input('show', $lang{SHOW}, { TYPE => 'submit', OUTPUT2RETURN => 1 })

        ]
      ],
    }
  );

  print $html->form_main(
    {
      CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
      HIDDEN  => {
        index => "$index",
        SERIA => '',
        sid   => $sid,
        UID   => $FORM{UID},
      },
      NAME => 'cards_list'
    }
  );

  $LIST_PARAMS{LOGIN} = undef;

  my @pin = ();
  @pin = ("PIN") if ($conf{CARDS_SHOW_PINS});
  if ($FORM{ID}) {
    $FORM{ID}=~s/, /;/g;
    $LIST_PARAMS{ID} = $FORM{ID};
  }
  elsif ($FORM{CREATED_FROM_DATE} && $FORM{CREATED_TO_DATE}) {
    $pages_qs                       = "&CREATED_TO_DATE=$FORM{CREATED_TO_DATE}&CREATED_FROM_DATE=$FORM{CREATED_FROM_DATE}";
    $LIST_PARAMS{CREATED_FROM_DATE} = $FORM{CREATED_FROM_DATE};
    $LIST_PARAMS{CREATED_TO_DATE}   = $FORM{CREATED_TO_DATE};
    $LIST_PARAMS{PAGE_ROWS}         = $FORM{rows};
  }
  else {
    my ($Y, $M) = split(/-/, $DATE);
    $LIST_PARAMS{CREATED_MONTH} = "$Y-$M";
    $pages_qs = "&CREATED_MONTH=$Y-$M";
  }

  if (!$FORM{sort}) {
    $LIST_PARAMS{SORT} = 1;
    $LIST_PARAMS{DESC} = 'DESC';
  }

  if (defined($FORM{STATUS}) && $FORM{STATUS} ne '') {
    $LIST_PARAMS{STATUS} = $FORM{STATUS};
    $pages_qs .= "&STATUS=$FORM{STATUS}";
  }

  #Group by TP
  if ($FORM{TYPE} && $FORM{TYPE} eq 'TP') {
    $pages_qs .= "&TYPE=TP&PAGE_ROWS=$PAGE_ROWS";

    if ($FORM{CREATED_DATE}) {
      $LIST_PARAMS{CREATED_DATE} = "$FORM{CREATED_DATE}";
      $pages_qs .= "&CREATED_DATE=$LIST_PARAMS{CREATED_DATE}";
    }

    if ($FORM{TP_ID}) {
      $LIST_PARAMS{TP_ID} = $FORM{TP_ID};
      $pages_qs .= "&TP_ID=$FORM{TP_ID}";
    }

    $LIST_PARAMS{TYPE} = 'TP';

    if ($FORM{print_cards}) {
      cards_print();
      exit;
    }

    $table = $html->table(
      {
        width => '200',
        qs    => $pages_qs,
        ID    => 'PRINT_CARDS_LIST',
        rows  => [ [ $html->button("$lang{PRINT} PDF", "qindex=$index&pdf=1&print_cards=1&$pages_qs", { ex_params => 'target=_new', BUTTON => 1 }), $html->button('CSV', "qindex=$index&csv=1&print_cards=1&$pages_qs", { ex_params => 'target=_new', BUTTON => 1 }) ] ]
      }
    );
    print $table->show();

    my @caption = ("$lang{DATE}", "$lang{TARIF_PLAN}", "$lang{COUNT}", "$lang{SUM}", "-");
    %LIST_PARAMS = ( DATE => '_SHOW',
                     TP_ID=> '_SHOW',
                     COUNT=> '_SHOW',
                     SUM  => '_SHOW',
                     %LIST_PARAMS
                   );

    if ($FORM{TP_ID}) {
      @caption = ("$lang{NUM}", "$lang{LOGIN}", "$lang{PASSWD}", "$lang{TARIF_PLAN}", "$lang{USED} $lang{DATE}");
      %LIST_PARAMS = ( NUMBER => '_SHOW',
                       LOGIN  => '_SHOW',
                       PIN    => '_SHOW',
                       TP_ID  => '_SHOW',
                       USED   => '_SHOW',
                       %LIST_PARAMS
                    );
    }

    my $list = $Cards->cards_list({
                                    %LIST_PARAMS,
                                    COLS_NAME => 1
                                  });

    $table = $html->table(
      {
        width      => '100%',
        caption    => "$lang{LOG}",
        title      => \@caption,
        cols_align => [ 'right', 'left', 'right', 'right' ],
        qs         => $pages_qs,
        pages      => $Cards->{TOTAL},
        ID         => 'CARDS_LIST',
      }
    );

    my @rows = ();
    foreach my $line (@$list) {
      if ($FORM{TP_ID}) {
        @rows = ($line->{number},
                 $line->{login},
                 $line->{pin},
                 $line->{tp_name},
                 $line->{used}
                );
      }
      else {
        @rows = (
          $html->button($line->{date}, "&index=$index&CREATED_DATE=$LIST_PARAMS{CREATED_DATE}&PAGE_ROWS=$LIST_PARAMS{PAGE_ROWS}" . (($line->{tp_id} > 0) ? "&TYPE=TP&TP_ID=$line->{tp_id}" : '&TYPE=CARDS&PAYMENTS=1')),
          (!$line->{count}) ? $lang{PAYMENTS} : $html->button($line->{tp_name}, "&index=$index$pages_qs&TP_ID=$line->{tp_id}"),
          $line->{count},
          $line->{sum}
        );
      }

      $table->addrow(@rows);
    }

    print $table->show();

    $table = $html->table(
      {
        width      => '100%',
        cols_align => [ 'right', 'right' ],
        rows       => [ [ "$lang{TOTAL}:", $html->b($Cards->{TOTAL}), "$lang{SUM}:", $html->b($Cards->{TOTAL_SUM}) ] ]
      }
    );
    print $table->show();
  }
  elsif ($FORM{TYPE} && $FORM{TYPE} eq 'CARDS') {
    if (!$FORM{sort}) {
      $LIST_PARAMS{SORT} = 1;
      $LIST_PARAMS{DESC} = 'DESC';
    }

    $pages_qs .= "&TYPE=CARDS&PAGE_ROWS=$FORM{PAGE_ROWS}";

    if ($FORM{CREATED_DATE}) {
      $LIST_PARAMS{CREATED_DATE} = "$FORM{CREATED_DATE}";
      $pages_qs .= "&CREATED_DATE=$LIST_PARAMS{CREATED_DATE}";
    }

    if ($FORM{PAYMENTS}) {
      $LIST_PARAMS{PAYMENTS} = 1;
      $pages_qs .= "&PAYMENTS=1";
    }

    if ($FORM{print_cards}) {
      cards_print();
      exit;
    }

    my $list = $Cards->cards_list({ %LIST_PARAMS,
                                    SERIAL     => '',
                                    NUMBER     => '_SHOW',
                                    LOGIN      => '_SHOW',
                                    SUM        => '_SHOW',
                                    STATUS     => '_SHOW',
                                    EXPIRE     => '_SHOW',
                                    CREATED    => '_SHOW',
                                    UID        => '_SHOW',
                                    COLS_NAME  => 1
                                  });
    $table = $html->table(
      {
        width      => '100%',
        caption    => "$lang{LOG}",
        title      => [ "$lang{SERIAL}", "$lang{NUM}", "$lang{LOGIN}", "$lang{SUM}", "$lang{STATUS}", "$lang{EXPIRE}", "$lang{ADDED}", ],
        cols_align => [ 'right', 'right', 'right', 'right', 'center', 'right', 'right', 'left', ],
        qs         => $pages_qs,
        pages      => $Cards->{TOTAL},
        ID         => 'CARDS_LIST',
      }
    );

    foreach my $line (@$list) {
      @pin = ("$line->{pin}") if ($conf{CARDS_SHOW_PINS});
      $table->addrow(
        $html->form_input("ID", "$line->{id}", { TYPE => 'checkbox', OUTPUT2RETURN => 1 }).$line->{serial},
        $line->{number},
        ($user->{UID}) ? "$lang{PAYMENTS}" : $html->button($line->{login}, "&index=11&UID=$line->{uid}"),
        $line->{sum},
        $html->color_mark($status[ $line->{status} ],
        $status_colors[ $line->{status} ]),
        $line->{expire},
        $line->{created}
      );
    }

    my %hidden_params = ();
    my @p = split(/&/, $pages_qs);
    foreach my $l (@p) {
      my ($k, $v) = split(/=/, $l, 2);
      $hidden_params{$k}=$v if($k);
    }

    print $html->form_main(
        {
          CONTENT =>
          $html->form_input('pdf', 'pdf', { TYPE => 'submit', OUTPUT2RETURN => 1 }). ' '.
          $html->form_input('csv', 'csv', { TYPE => 'submit', OUTPUT2RETURN => 1 }). ' '.
          $table->show({ OUTPUT2RETURN => 1  }),
          #ENCTYPE => 'multipart/form-data',
          HIDDEN => { qindex     => $index,
                      print_cards=> 1,
                      %hidden_params
                      },
        }
      );

    $table = $html->table(
      {
        width      => '100%',
        cols_align => [ 'right', 'right' ],
        rows       => [ [ "$lang{TOTAL}:", $html->b($Cards->{TOTAL}), "$lang{SUM}:", $html->b($Cards->{TOTAL_SUM}) ] ]
      }
    );
    print $table->show();
  }
  else {
    $table = $html->table(
      {
        width       => '100%',
        caption     => "$lang{LOG}",
        title       => [ "$lang{DATE}", "$lang{COUNT}", "$lang{SUM}", '-' ],
        cols_align  => [ 'right', 'right', 'right', 'center:noprint' ],
        qs          => $pages_qs,
        pages       => $Cards->{TOTAL},
        ID          => 'CARDS_REPORTS_DAYS'
      }
    );

    my $list = $Cards->cards_report_days({ %LIST_PARAMS,
                                           SERIA       => '',
                                           COLS_NAME   => 1
                                           });

    foreach my $line (@$list) {
      $table->addrow(
        $html->button($line->{date}, "index=$index&TYPE=TP$pages_qs&sid=$FORM{sid}" . (($line->{date} =~ /(\d{4}-\d{2}-\d{2})/) ? "&CREATED_DATE=$1" : '')),
        $line->{count},
        $line->{sum},
        $html->button(
          "$lang{PRINT} $lang{SUM}",
          '#',
          {
            NEW_WINDOW      => "$SELF_URL?qindex=$index&print=$line->{date}&sid=$FORM{sid}",
            NEW_WINDOW_SIZE => "480:640",
            class           => 'print'
          }
        ),
      );
    }

    print $table->show();
  }
  return 1;
}

#**********************************************************
=head2 cards_print()

=cut
#**********************************************************
sub cards_print {

  if ($FORM{csv}) {
    $FORM{CREATE_DATE} //= $DATE;
    print "Content-Type: text/plain; filename=\"cards_$FORM{CREATE_DATE}.csv\"\n" . "Content-Disposition: attachment; filename=\"cards_$FORM{CREATE_DATE}.csv\"; size=" . "\n\n";

    print "SERIAL\tLOGIN\tPASSWORD/PIN\tTARIF_PLAN\tSUM\tEXPIRE\tAGE\tTIME_LIMIT\n";
  }
  else {
    print $html->header();
  }

  $LIST_PARAMS{PAGE_ROWS} = $FORM{PAGE_ROWS} if ($FORM{PAGE_ROWS});

  my $list = $Cards->cards_list({ NUMBER    => $FORM{NUMBER} || '_SHOW',
                                  SERIAL    => $FORM{SERIAL} || '_SHOW',
                                  LOGIN     => '_SHOW',
                                  PIN       => '_SHOW',
                                  TP        => '_SHOW',
                                  SUM       => '_SHOW',
                                  EXPIRE    => '_SHOW',
                                  AGE       => '_SHOW',
                                  TIME_LIMIT=> '_SHOW',
                                  %LIST_PARAMS,
                                  COLS_NAME => 1,
                               });

  my $i               = 0;
  my %page_print_hash = ();
  my @MULTI_ARR       = ();

  foreach my $line (@$list) {
    if ($FORM{csv}) {
      if ($FORM{SERIA}) {
        print "$line->{serial}$line->{cards_count}\t$line->{sum}\t$line->{expire}\t-\t$line->{diller}\t$line->{added}\t-\t-\t\n";
      }
      else {
        print "$line->{serial}\t$line->{number}\t$line->{login}\t$line->{sum}\t$line->{status}\t$line->{expire}\t$line->{create}\t$line->{used}\n";
      }
      next;
    }

    while(my ($k, $v) = each %$line) {
      if ($k eq 'time_limit') {
        $page_print_hash{ uc($k).'_' . $i }=printf("%2.f", $v / 3600);
      }
      else {
        $page_print_hash{ uc($k).'_' . $i }=$v;
      }
    }

    $page_print_hash{ 'SERIAL_' . $i } = "$line->{serial}$line->{number}";

    if ($i && !($i % 9)) {
      push @MULTI_ARR, {%page_print_hash};
      %page_print_hash = ();
      $i               = 0;
    }
    else {
      $i++;
    }
  }

  if ($FORM{csv}) {
    return 0;
  }
  elsif (scalar keys %page_print_hash > 0) {
    push @MULTI_ARR, {%page_print_hash};
  }

  my $single_tpl = $html->tpl_show(
    _include('cards_print', 'Cards'),
    undef,
    {
      MULTI_DOCS   => \@MULTI_ARR,
      NAME         => 'Cards_',
      DOCS_IN_FILE => 10000,
      debug        => $FORM{DEBUG}
    }
  );

  print $single_tpl;
  return 1;
}

#**********************************************************
=head2 cards_report_payments()

=cut
#**********************************************************
sub cards_report_payments {

  my $table = $html->table(
    {
      width    => '100%',
      rowcolor => $_COLORS[0],
      rows     => [
        [
          "$lang{FROM}: ",
          $html->date_fld2('FROM_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'cards_list', WEEK_DAYS => \@WEEKDAYS }),
          "$lang{TO}: ",
          $html->date_fld2('TO_DATE', { MONTHES => \@MONTHES, FORM_NAME => 'cards_list', WEEK_DAYS => \@WEEKDAYS }),
          "$lang{ROWS}: " . $html->form_input('rows', ($FORM{rows} || int($conf{list_max_recs})), { SIZE => 4, OUTPUT2RETURN => 1 }),
          $html->form_input('show', $lang{SHOW}, { TYPE => 'submit', OUTPUT2RETURN => 1 })
        ]
      ],
    }
  );

  if ($FORM{show}) {
    $LIST_PARAMS{PAGE_ROWS} = $FORM{rows} || q{};
    $LIST_PARAMS{FROM_DATE} = $FORM{FROM_DATE} || q{};
    $LIST_PARAMS{TO_DATE}   = $FORM{TO_DATE} || q{};

    $pages_qs .= "&FROM_DATE=$LIST_PARAMS{FROM_DATE}&TO_DATE=$LIST_PARAMS{TO_DATE}&rows=$LIST_PARAMS{PAGE_ROWS}&show=1";
  }

  print $html->form_main(
    {
      CONTENT => $table->show({ OUTPUT2RETURN => 1 }),
      HIDDEN  => {
        index => "$index",
        SERIA => '',
        sid   => $sid,
        UID   => $FORM{UID},
      },
      NAME => 'cards_list'
    }
  );

  my $list;
  ($table, $list) = result_former({
     INPUT_DATA      => $Cards,
     FUNCTION        => 'cards_report_payments',
     #MAP             => 1,
     BASE_FIELDS     => 6,
     EXT_TITLES      => {
       date             => "$lang{DATE}",
       login            => "$lang{USERS}",
       sum              => "$lang{SUM}",
       fio              => "$lang{FIO}",
       cards_count      => "$lang{ICARDS}",
       diller           => "$lang{DILLERS}",
     },
     SKIP_USER_TITLE => 1,
     TABLE           => {
       width      => '100%',
       caption    => "$lang{PAYMENTS} $lang{LOG}",
       qs         => $pages_qs,
       ID         => 'CARDS_PAYMENTS_LIST',
       EXPORT     => 1,
     },
     MAKE_ROWS    => 1,
     TOTAL        => 1
  });

  return 1;
}


#**********************************************************
# Cards Periodic
# change status to userd for universal cards
#**********************************************************
sub cards_periodic {
  #my ($attr) = @_;
  my $debug_output = 'Cards change status used for universal cards';

  $Cards->cards_chg_status();

  return $debug_output;
}

1
