#!/usr/bin/perl
# PaySys Console
# Console interface for payments and fees import

use vars qw($begin_time
%FORM
%LANG
$DATE
$TIME
$CHARSET
@MODULES
@_COLORS
);

BEGIN {
  use FindBin '$Bin';
  my $libpath = $Bin . '/../../../';
  our $sql_type = 'mysql';

  unshift(@INC, $libpath . "Abills/$sql_type/");
  unshift(@INC, $libpath . "$sql_type/");
  unshift(@INC, $libpath);
  unshift(@INC, $libpath . 'libexec/');
  unshift(@INC, $libpath . 'lib/');

  unshift(@INC, '/usr/abills/');
  unshift(@INC, '/usr/abills/Abills/');
  unshift(@INC, "/usr/abills/Abills/$sql_type/");
  unshift(@INC, $libpath . "/Abills/modules/");

  eval { require Time::HiRes; };
  if (!$@) {
    Time::HiRes->import(qw(gettimeofday));
    $begin_time = Time::HiRes::gettimeofday();
  }
  else {
    $begin_time = 0;
  }
}

require $Bin . '/../../../libexec/config.pl';

use Abills::Templates;
use Abills::Base;
use Abills::SQL;
use Abills::HTML;
use Users;
use Paysys;
use Finance;
use Admins;

our $html = Abills::HTML->new();
our $db   = Abills::SQL->connect($conf{dbtype}, $conf{dbhost}, $conf{dbname}, $conf{dbuser}, $conf{dbpasswd}, { %conf, CHARSET => ($conf{dbcharset}) ? $conf{dbcharset} : undef });

#Operation status
our $admin  = Admins->new($db, \%conf);
$admin->info($conf{SYSTEM_ADMIN_ID}, { IP => '127.0.0.1' });
our $payments  = Finance->payments($db, $admin, \%conf);
my $fees      = Finance->fees($db, $admin, \%conf);
our $Paysys   = Paysys->new($db, $admin, \%conf);
#my $status   = '';
my $debug     = 0;
my $error_str = '';

do "Abills/Misc.pm";

#Arguments
my $argv = parse_arguments(\@ARGV);

if ($#ARGV < 0 || defined($argv->{help}) || defined($argv->{'-h'}) ) {
  help();
  exit;
}

if ($argv->{DEBUG}) {
  $debug = $argv->{DEBUG};
  print "DEBUG: $debug\n";
}

require "language/$conf{default_language}.pl";

do('Abills/modules/Paysys/Paysys_Base.pm');

$DATE = $argv->{DATE} if ($argv->{DATE});

if ($argv->{PLUGIN}) {
  if (-f $Bin . '/plugins/' . $argv->{PLUGIN}) {
    require $Bin . '/plugins/' . $argv->{PLUGIN};
  }
  else {
    print "Plugin not found: $argv->{PLUGIN}\n";
  }
}
elsif ($argv->{TYPE}) {
  if (defined($argv->{EMAIL_CHECK})) {
    paysys_import_pop3();
  }
  elsif ($argv->{FTP_CHECK}) {
    paysys_import_ftp();
  }
  elsif ($argv->{TYPE} eq 'PAYMENTS' || $argv->{TYPE} eq 'CANCEL_PAYMENTS' || $argv->{TYPE} eq 'AUTO') {
    paysys_import_payments_cons();
  }
  elsif ($argv->{TYPE} eq 'FEES') {
    paysys_import_fees_cons();
  }
  elsif ($argv->{TYPE} eq 'ERIPT') {
    eript_202();
  }
}
elsif($argv->{MAIL} ne '') {
  bss_users_list();
}
elsif($argv->{TYME}){
  tyme_import();
}

#**********************************************************
=head2 paysys_import_form_cons($attr) - Import fees from_file

=cut
#**********************************************************
sub paysys_import_form_cons {
  my ($attr) = @_;

  my @import_types = ();
  if ($attr->{IMPORT_RULES}) {
    @import_types = split(/,/, $attr->{IMPORT_RULES});
  }

  #my $table;
  #Default import extration
  my $import_expr = ($attr->{IMPORT_EXPR}) ? $attr->{IMPORT_EXPR} : '(\d+)\t(.+)\t(\d+)\t(\S+)\t([0-9.,]+)\t(\d{2}-\d{2}-\d{4})\t(.+)\t(.+):ID, FIO, PHONE, CONTRACT_ID, SUM, DATE, ADDRESS, DESCRIBE';

  #Default Binding field
  my $BINDING_FIELD = ($attr->{BINDING_FIELDS}) ? $attr->{BINDING_FIELDS} : 'CONTRACT_ID';

  if (defined($attr->{IMPORT_RULE})) {
    $import_expr       = $conf{ 'PAYSYS_IMPORT_EXPRATION_' . $attr->{IMPORT_RULE} };
    $BINDING_FIELD     = $conf{ 'PAYSYS_IMPORT_BINDING_' . $attr->{IMPORT_RULE} } if ($conf{ 'PAYSYS_IMPORT_BINDING_' . $attr->{IMPORT_RULE} });
    $FORM{IMPORT_TYPE} = $attr->{IMPORT_RULE};
  }

  my ($DATA_ARR, $BINDING_IDS);
  my %binding_hash      = ();
  my $total_count       = 0;
  my $total_sum         = 0;
  my $total_added_count = 0;
  my $total_added_sum   = 0;
  if (!$argv->{FILE} && !$attr->{CONTENT}) {
    print "Select input file !!!\n";
    exit;
  }

  my $content  = '';
  my $filename = $argv->{FILE} || '';

  if ($attr->{CONTENT}) {
    $content = $attr->{CONTENT};
  }
  else {
    open(my $fh, "$filename") || die "Can't open file '$filename' $!\n";
    while (<$fh>) {
      $content .= $_;
    }
    close($fh);
  }

  ($DATA_ARR, $BINDING_IDS) = paysys_import_parse($content, $import_expr, $BINDING_FIELD);

  #Make users binding hash
  my $ids = join(';', @$BINDING_IDS);
  my $users = Users->new($db, $admin, \%conf);
  $users->{debug}=1 if ($debug > 7);
  my $list = $users->list(
    {
      FIO            => '_SHOW',
      LOGIN          => '_SHOW',
      $BINDING_FIELD => "$ids",
      PAGE_ROWS      => 1000000,
      COLS_NAME      => 1
    }
  );

  my $binding_field_id = lc($BINDING_FIELD);

  foreach my $line (@$list) {
  	if (! defined($line->{$binding_field_id})) {
  		print "Not defined bind field '$binding_field_id'\n";
  		exit;
  	}

  	$line->{login} = (! $line->{login}) ? $line->{id} : $line->{login};
    $binding_hash{ lc($line->{$binding_field_id}) } = "$line->{uid}:$line->{login}:" . (($line->{fio}) ? $line->{fio} : '');
  }

  $payments->{debug} = 1 if ($debug > 4);

  my $error = 0;
  my $bss_date;
  for (my $i = 0 ; $i <= $#{$DATA_ARR} ; $i++) {
    my $ID = $DATA_ARR->[$i]->{PAYSYS_EXT_ID} || $i;
    $DATA_ARR->[$i]->{DATE} = $DATE if (!$DATA_ARR->[$i]->{DATE});

    if ($binding_hash{ lc($DATA_ARR->[$i]->{$BINDING_FIELD}) }) {
      my ($uid, $login, $fio) = split(/:/, $binding_hash{ lc($DATA_ARR->[$i]->{$BINDING_FIELD}) });

      next if ($DATA_ARR->[$i]->{SUM} == 0);
      $error     = 0;
      $error_str = '';
      my $user           = $users->info($uid);
      my $describe       = $DATA_ARR->[$i]->{DESCRIBE} || '';
      my $inner_describe = $DATA_ARR->[$i]->{INNER_DESCRIBE} || '';
      if ($describe ne '' && $argv->{DECODE}) {
        $describe = convert($describe, { $argv->{DECODE} => 1 });
      }

      if ($inner_describe ne '' && $argv->{DECODE}) {
        $inner_describe = convert($inner_describe, { $argv->{DECODE} => 1 });
      }

      $db->{db}->{AutoCommit}=0;
      $db->{TRANSACTION}=1;

      my $operation_type = '';

      if($argv->{TYPE} eq 'AUTO') {
        if($DATA_ARR->[$i]->{SUM} < 0) {
          $operation_type= 'FEES';
          $DATA_ARR->[$i]->{SUM} = abs($DATA_ARR->[$i]->{SUM});
        }
        else {
          $operation_type = 'PAYMENTS';
        }
      }
      else {
        $operation_type = $argv->{TYPE};
      }

      if ($operation_type eq 'PAYMENTS') {
        my $ext_id = '';
        if ($debug < 6) {
          if (!$DATA_ARR->[$i]->{DATE} && $DATA_ARR->[$i]->{DATE_DMY}) {
            $DATA_ARR->[$i]->{DATE_DMY} =~ /(\d{2})(\d{2})(\d{4})/;
            $DATA_ARR->[$i]->{DATE} = "$3-$2-$1";
          }
          my $method = $DATA_ARR->[$i]->{PAYMENT_METHOD} || $argv->{METHOD} || 2;
          $ext_id = $DATA_ARR->[$i]->{EXT_ID} || "$DATA_ARR->[$i]->{DATE}_$FORM{IMPORT_TYPE}.$ID";

          $payments->add(
            $user,
            {
              SUM            => $DATA_ARR->[$i]->{SUM},
              DESCRIBE       => $describe,
              METHOD         => $method,
              DATE           => $DATA_ARR->[$i]->{DATE},
              EXT_ID         => $ext_id,
              CHECK_EXT_ID   => $ext_id,
              INNER_DESCRIBE => $inner_describe
            }
          );
          # adding standart payment to bss-table
          if(!$payments->{errno} && $argv->{METHOD}==113){
            $bss_date = $DATA_ARR->[$i]->{DATE};
            bss_log({AFTER_PAYMENT  =>1,
                     UID     => $user->{UID},
                     SUM     => $DATA_ARR->[$i]->{SUM},
                     DATE    => $DATA_ARR->[$i]->{DATE},
                     EXT_ID  => $ext_id,
                     STATUS  => 1
                     });
          }
          elsif($payments->{errno} && $argv->{METHOD}==113){
            $bss_date = $DATA_ARR->[$i]->{DATE};
            bss_log({AFTER_PAYMENT  =>1,
                     UID     => $user->{UID},
                     SUM     => $DATA_ARR->[$i]->{SUM},
                     DATE    => $DATA_ARR->[$i]->{DATE},
                     EXT_ID  => $ext_id,
                     STATUS  => 2
                     });
          }
        }

        if ($payments->{errno} && $payments->{errno} == 7) {
          $error_str .= "ERROR: EXIST EXT_ID: $ext_id\n";
          $error     = 1;
        }
        else {
          if (! $argv->{SKIP_CROSSMODULES_CALLS}) {
            cross_modules_call('_payments_maked', {
                  USER_INFO    => $user,
                  QUITE        => 1,
                  SUM          => $DATA_ARR->[$i]->{SUM},
                  PAYMENT_ID   => $payments->{PAYMENT_ID},
                  SKIP_MODULES => 'Paysys,Sqlcmd'
                  });
          }
        }
      }
      elsif ($operation_type eq 'FEES') {
        if ($debug < 5) {
          $fees->take(
            $user,
            $DATA_ARR->[$i]->{SUM},
            {
              DESCRIBE       => $describe,
              INNER_DESRIBE  => $DATA_ARR->[$i]->{EXT_ID},
              DATE           => $DATA_ARR->[$i]->{DATE} || undef,
              INNER_DESCRIBE => $inner_describe,
              METHOD         => $DATA_ARR->[$i]->{PAYMENT_METHOD} || $argv->{METHOD},

              #    EXT_ID       => "$DATA_ARR->[$i]->{DATE}.$FORM{IMPORT_TYPE}.$ID",
              #    CHECK_EXT_ID => "$DATA_ARR->[$i]->{DATE}.$FORM{IMPORT_TYPE}.$ID"
            }
          );
        }

        if ($fees->{errno} && $fees->{errno} == 7) {
          $error_str .= "ERROR: EXIST: EXT_ID: $DATA_ARR->[$i]->{DATE}.$ID\n";
          $error     = 1;
        }
      }
      elsif ($argv->{TYPE} eq 'CANCEL_PAYMENTS') {
        my @payments_arr = ();
        for (my $i = 0 ; $i <= $#{$DATA_ARR} ; $i++) {
          my $ID = $DATA_ARR->[$i]->{PAYSYS_EXT_ID} || $i;
          if ($DATA_ARR->[$i]->{EXT_ID}) {
            push @payments_arr, $DATA_ARR->[$i]->{EXT_ID};
          }
        }

        if ($#payments_arr == -1) {
          print "Select ext ID for cancel payments\n";
          return 0;
        }

        my $list = $payments->list(
          {
            EXT_ID    => join(';', @payments_arr),
            PAGE_ROWS => 1000000,
            COLS_NAME => 1
          }
        );

        foreach my $p (@$list) {
          $payments->del({ UID => $p->{uid} }, $p->{id});
          print "ID: $p->{id} SUM: $p->{uid}\n" if ($debug > 1);
        }
      }

      if (!$error) {
        if (! $db->{db}->{AutoCommit}) {
          $db->{db}->commit();
          $db->{db}->{AutoCommit}=1;
        }

        $total_added_count++;
        $total_added_sum += $DATA_ARR->[$i]->{SUM};
      }
      else {
        $db->{db}->rollback();
      }
    }
    else {
      $error_str = "ERROR: NOT_EXIST BIND_FIELD: $BINDING_FIELD - $DATA_ARR->[$i]->{$BINDING_FIELD} DATE: $DATA_ARR->[$i]->{DATE} SUM: $DATA_ARR->[$i]->{SUM}\n ";
    }

    print $error_str if ($error_str ne '');

    $total_count++;
    $total_sum += $DATA_ARR->[$i]->{SUM};
  }

  print "
  TOTAL: $total_count SUM: $total_sum
  ADDED: $total_added_count SUM: $total_added_sum\n" if ($debug > 0);

  if($argv->{METHOD} == 113){
    my $list_of_sums = $Paysys->bss_sum_list({DATE => $bss_date, COLS_NAME => 1,});

    if($list_of_sums->[0]){
      $Paysys->bss_sum_change({DATE => $argv->{BSS_DATE} ? $argv->{BSS_DATE} : $bss_date,
                           LOCAL_STD_SUM => ($list_of_sums->[0]->{local_std_sum} + $total_added_sum), 
                           # LOCAL_STD_SUM => $total_added_sum,
                           STD_COUNT => $total_added_count});
    }
    else{
      $Paysys->bss_sum_add({DATE => $argv->{BSS_DATE} ? $argv->{BSS_DATE} : $bss_date,
                             LOCAL_STD_SUM => $total_added_sum, STD_COUNT => $total_added_count});
    }

    sendmail("$conf{ADMIN_MAIL}", "$conf{ADMIN_MAIL}", "BSS Отчет", "TOTAL: $total_count\nSUM: $total_sum\n ADDED: $total_added_count\n SUM: $total_added_sum\n", "$conf{MAIL_CHARSET}", "2 (High)");
  }

  if ($error_str) {
  	print "Error: $error_str\n";
  }

  return ($error) ? 0 : 1;
}

#**********************************************************
=head2 paysys_import_fees_cons($attr) Import fees from_file

=cut
#**********************************************************
sub paysys_import_fees_cons {
  paysys_import_form_cons(
    {
      TYPE           => 'FEES',
      BINDING_FIELDS => $conf{PAYSYS_FEES_BINDING},
      IMPORT_EXPR    => $conf{PAYSYS_FEES_IMPORT},
      IMPORT_RULES   => 'FEES'
    }
  );
}

#**********************************************************
# Import fees from_file
=head2 paysys_import_payments_cons($attr) Import fees from_file

=cut
#**********************************************************
sub paysys_import_payments_cons {
  my @files = ();
  my $filename = $argv->{FILE} || '';
  my $dir = '';

  if ($filename =~ s/\*/\.\+/g) {
    $dir = dirname($filename);
    $filename =~ s/$dir\///;
    opendir my $dh, $dir or die "Can't open dir '$dir' $!\n";
      @files = grep /^$filename$/, readdir $dh;
    closedir $dh;
  }
  else {
    push @files, $filename;
  }

  foreach my $filename_ (@files) {
    $filename_ = "$dir/$filename_" if ($dir);
    my $content = '';
    open(my $fh, '<', $filename_) || die "Can't open file '$filename_' $!\n";
      while (<$fh>) {
        $content .= $_;
      }
    close($fh);

    paysys_import_form_cons(
    {
      TYPE         => $argv->{TYPE},
      IMPORT_RULE  => $argv->{IMPORT_RULE},
      IMPORT_RULES => $conf{PAYSYS_IMPORT_RULES},
      CONTENT      => $content
    }
    );
    if ($debug < 5) {
      if ($argv->{BACKUP_FILES} && -d $argv->{BACKUP_FILES}) {
        `cp $filename_ $argv->{BACKUP_FILES}`;
      }
      #unlink $filename;
    }
  }

  return 1;
}

#**********************************************************
=head2 paysys_import_pop3() - import data from mail with POP3

=cut
#**********************************************************
sub paysys_import_pop3 {
  print "POP3 check\n" if ($debug > 2);

  load_pmodule('Net::POP3');

  # Constructors
  my @mailboxes = split(/;/, $conf{PAYSYS_EMAIL_CHECK});

  if ($argv->{EMAIL_CHECK} ne '') {
    $argv->{EMAIL_CHECK}--;
    if (!$mailboxes[ $argv->{EMAIL_CHECK} ]) {
      print "Not defined mail box '$argv->{EMAIL_CHECK}'\n";
      exit;
    }
    else {
      @mailboxes = ($mailboxes[ $argv->{EMAIL_CHECK} ]);
    }
  }

  foreach my $mailbox (@mailboxes) {
    my ($host, $username, $password) = split(/:/, $mailbox, 3);

    my $pop = Net::POP3->new($host, Timeout => 60);
    if (!$pop) {
      print "POP3 Error: Can't connect '$host' $!\n";
      exit;
    }

    if ($pop->login($username, $password)) {
      my $msgnums = $pop->list;       # hashref of msgnum => size
      my $total   = keys %$msgnums;
      print "Total: $total\n\n" if ($debug > 2);

      foreach my $msgnum (keys %$msgnums) {
        my $content = '';
        my $uidl    = $pop->uidl($msgnum);
        my $msg     = $pop->get($msgnum);
        my $full_message = join('', @$msg);
        my ($header, $message) = split(/\n\n/, $full_message, 2);

        # Parse header
        my @lines      = split(/\n/, $header);
        my $boundary   = '';
        my $date       = '';
        my $subject    = '';
        my $message_id = '';

        foreach $line (@lines) {
          if ($line =~ /boundary="(.+)"/i) {
            $boundary = $1;
          }
          elsif ($line =~ /Subject: (.+)/) {
            $subject = $1;
          }
          elsif ($line =~ /Date: (.+)/) {
            $date = $1;
          }
          elsif ($line =~ /Message-ID: (.+)/) {
            $message_id = $1;
          }
        }

        my @parts = ();
        if ($boundary ne '') {
          @parts = split(/--$boundary/, $message);
        }

        my $filename = '';
        if ($#parts > -1) {
          foreach my $part (@parts) {
            my $encoding = '';

            my ($part_header, $part_body) = split(/\n\n/, $part, 2);
            @lines = ();
            @lines = split(/\n/, $part_header) if ($part_header);
            foreach $line (@lines) {
              if ($line =~ /filename="(.+)"/i) {
                $filename = $1;
              }
              elsif ($line =~ /name="=(.+)="/){
                my $coded_filename = $1;
                ($coded_filename) = $coded_filename =~ /\?UTF-8\?B\?(.+)?/;

                $filename = decode_base64("$coded_filename");
              }
              elsif ($line =~ /Content-Transfer-Encoding: (.+)/i) {
                $encoding = $1;
              }
            }

            if ($encoding eq 'base64') {
              $content .= "\n" . decode_base64($part_body);
            }

          }
        }
        else {
          $content .= $message;
        }

        if ($argv->{DECODE}) {
          $content = convert($content, { $argv->{DECODE} => 1 });
        }

        # BSS paysys
        my $total_sum_day = 0;
        my $nst_content;
        my $go_to_next_message;
        if($argv->{METHOD} == 113){
          $content = convert($content, {cp8662utf8 => 1});
          @lines = split('\n', $content);    # split content per lane
          $content = '';

          foreach $line(@lines){
            if($line =~ /^"\d+/){
              my ($uid) = $line =~ /"(\d+)","\d+|\d+[.]\d+","\d+","\d+","","","\d+"/;
              my $users = Users->new($db, $admin, \%conf);
              my $user_pi = $users->pi({UID => $uid});
              my $comment = "Услуги связи от $user_pi->{FIO}. Лицевой счет $uid. По адресу $user_pi->{ADDRESS_FULL}";
              $content .= $line .
              ",\"$comment\"" .
              "\n";
            }
            elsif($line =~ /^!/){
              $nst_content .= $line . "\n";
              bss_log({NST_OPL => $line});
            }
            elsif($line =~ /^*"(\d+.\d+)",/ || $line =~ /^*"(\d+)",/){
              $total_sum_day = $1;
              my $sum_date;
              ($sum_date) = $filename =~ /sum_(.+).\d+/;

              my ($year, undef, undef) = split('-', $DATE);
              my ($day, $month) = $sum_date =~ /(\d{2})(\d{2})/;
              $sum_date = "$year-$month-$day";
              # $Paysys->bss_sum_delete({DATE => $argv->{BSS_DATE} ? $argv->{BSS_DATE} : $sum_date});
              my $list_of_sums = $Paysys->bss_sum_list({DATE => $sum_date});

              if($list_of_sums->[0]){
                print "CHANGED\n";
                $Paysys->bss_sum_change({DATE => $argv->{BSS_DATE} ? $argv->{BSS_DATE} : $sum_date,
                                    BANK_STD_SUM => $total_sum_day});
              }
              else{
                print "ADDED\n";
                $Paysys->bss_sum_add({DATE => $argv->{BSS_DATE} ? $argv->{BSS_DATE} : $sum_date,
                                       BANK_STD_SUM => $total_sum_day});
              }

              $pop->delete($msgnum);
              $go_to_next_message = 1;
            }
            elsif($line =~ /^Всего за день : (\d+.\d+)/){
              $total_sum_day = $1;
              $Paysys->bss_sum_change({DATE => $argv->{BSS_DATE} ? $argv->{BSS_DATE} : $DATE,
                                       BANK_NSTD_SUM => $total_sum_day});
            }
          }
        }
        if($go_to_next_message == 1){
          next;
        }

        my $check = paysys_import_form_cons(
            {
              TYPE         => $argv->{TYPE},
              IMPORT_RULE  => $argv->{IMPORT_RULE},
              IMPORT_RULES => $conf{PAYSYS_IMPORT_RULES},
              CONTENT      => $content,
            }
          );

        if ( $check )
        {
          $pop->delete($msgnum);
          print "Delete\n" if ($debug == 1);
        }
        else {
          $message = "
   Date:  $date
   Subject: $subject
   Message id: $message_id

   $content

   Error: $error_str
";

          sendmail("$conf{ADMIN_MAIL}", "$conf{ADMIN_MAIL}", "POP3 Import Error", "$message", "$conf{MAIL_CHARSET}", "2 (High)");
        }
      }

    $pop->quit();
    }
    else {
      print "POP3 Error: Wrong login or password $!\n";
    }
  }
  #return $content;
}

#**********************************************************
=head2 paysys_import_ftp() - import data from ftp

=cut
#**********************************************************
sub paysys_import_ftp {
  my ($attr) = @_;

  print "FTP check\n" if ($debug > 2);
  load_pmodule('Net::FTP');

  # Constructors
  my @hosts = split(/;/, $conf{PAYSYS_FTP_CHECK});

  if ($argv->{FTP_CHECK} && $argv->{FTP_CHECK} ne '') {
    $argv->{FTP_CHECK}--;
    if (!$hosts[ $argv->{FTP_CHECK} ]) {
      print "Not defined FTP '$argv->{FTP_CHECK}'\n";
      exit;
    }
    else {
      @hosts = ($hosts[ $argv->{FTP_CHECK} ]);
    }
  }

  foreach my $host_params (@hosts) {
    my ($host, $username, $password, $dir, $files, $passive_mode) = split(/:/, $host_params, 6);
    my $ftp = Net::FTP->new("$host", Debug => 0, Passive => $passive_mode || 0)
    or die "Cannot connect to '$username\@$host': $@";

    if ($ftp->login("$username", "$password")) {
      $dir = $attr->{FTP_DIR} if ($attr->{FTP_DIR});
      if ($dir) {
        $ftp->cwd("$dir")
        or die "Cannot change working directory '$dir' ", $ftp->message;
      }

      if ($attr->{UPLOAD}) {
        $ftp->put("$attr->{UPLOAD}")
        or die "Ftp get failed '$attr->{UPLOAD}' ", $ftp->message;
        print "Upload: $attr->{UPLOAD}\n" if ($debug > 1);
        next;
      }

      my $files_arr = $ftp->ls("$files");
      foreach my $filename (@$files_arr) {
        my $content = '';
        $ftp->get("$filename")
        or die "Ftp get failed '$filename' ", $ftp->message;
        print $filename. "\n" if ($debug > 2);

        $filename =~ /\/?([a-zA-Z0-9\.\-\_\?]+)$/;
        my $local_filename = $1;
        open(my $fh, "$local_filename") || die "Can't open file '$filename' $!\n";
        while (<$fh>) {
          $content .= $_;
        }
        close($fh);

        if ($argv->{DECODE}) {
          $content = convert($content, { $argv->{DECODE} => 1 });
        }

        if (
          paysys_import_form_cons(
            {
              TYPE         => $argv->{TYPE},
              IMPORT_RULE  => $argv->{IMPORT_RULE},
              IMPORT_RULES => $conf{PAYSYS_IMPORT_RULES},
              CONTENT      => $content
            }
          )
        ){
          if ($argv->{BACKUP_FILES} && -d $argv->{BACKUP_FILES}) {
            `cp $local_filename $argv->{BACKUP_FILES}`;
          }
          unlink $local_filename;

          $ftp->delete("$filename")
          or die "Ftp del failed '$filename'\n", $ftp->message;
          print "Delete LOCAL:$local_filename 'FTP:$filename'\n" if ($debug == 1);
        }
        else {
          my $message = "
   Filename: $filename

   $content

   Error: $error_str
";

          sendmail("$conf{ADMIN_MAIL}", "$conf{ADMIN_MAIL}", "POP3 Import Error", "$message", "$conf{MAIL_CHARSET}", "2 (High)");
        }
      }
    }
    else {
      print "FTP Error: Wrong login or password $!\n";
    }
  }

  #return $content;
}

#**********************************************************
# Main iport  parser
#**********************************************************
sub paysys_import {

}

#**********************************************************
=head2 help() - show manual

=cut
#**********************************************************
sub help {

  my @import_rules_arr = ();
  if ($conf{PAYSYS_IMPORT_RULES}) {
    @import_rules_arr = split(/,/, $conf{PAYSYS_IMPORT_RULES});
  }

  my $import_rules = '';
  for (my $i = 0 ; $i <= $#import_rules_arr ; $i++) {
    $import_rules .= "      $i - $import_rules_arr[$i]\n";
  }

  print << "[END]"
Paysys console interface:

  TYPE=[PAYMENTS|CANCEL_PAYMENTS|FEES|AUTO|ERIPT] - Operation TYPE
    AUTO               - Add positive payment and get negative from list
  IMPORT_RULE=         - for payments import type id
$import_rules
  EMAIL_CHECK=...      - Check E-mail for documents. E-mail box number. Default read all mailboxes with import rule.
  FTP_CHECK=...        - Check files from ftp. FTP  servers. Default check all servers with import rule.
  BACKUP_FILES=[DIR]   - Backup ftp files
  SKIP_CROSSMODULES_CALLS - Skip cros modules calls
  METHOD=[0..]         - Method for fees or payments
  FILE=                - Import FILE
  DATE=                - Import Date
  DEBUG=1,2..5         - Debug Mode
  DECODE=              - Decode from other charsets
    win2koi
    koi2win
    win2iso
    iso2win
    win2dos
    dos2win
  PLUGIN=...           - Run plugin
  MAIL=...             - Send a mail with all users info
  help                 - this help

[END]
}

#***********************************************************
# upload users list
#***********************************************************
sub eript_202 {
  my $message     = '';
  my $msgs_header = '';
  my $msg_num     = substr(time(), 2, 10);
  my $msg_file    = $msg_num . '.202';

  my $msg_version = 5;

  "$DATE$TIME" =~ /(\d{4})\-(\d{2})\-(\d{2})(\d{2}):(\d{2}):(\d{2})/;
  my $msg_date = "$1$2$3$4$5$6";
  "$DATE$TIME" =~ /(\d{4})\-(\d{2})\-(\d{2})(\d{2}):(\d{2}):(\d{2})/;
  my $payment_period = "$2.$1";    #"$3$2.$1";

  my $record_total_count = 0;

  #
  my $msg_provider_id           = $conf{PAYSYS_ERIPT_PROVIDER_ID} || 123456;    # Êîä îòïðàâèòåëÿ ñîîáùåíèÿ  M, N8
  my $msg_provider_num          = $conf{PAYSYS_ERIPT_PROVIDER_NUM} || 123456;  # Ó÷åòíûé íîìåð ïëàòåëüùèêà ïðîèçâîäèòåëÿ óñëóã  M, N9, äîëæíî ñîäåðæàòü òðè ïîñëåäíèå öèôðû êîäà ÌÔÎ áàíêà, â êîòîðîì îòêðûò ðàñ÷åòíûé ñ÷åò ïðîèçâîäèòåëÿ óñëóãè;
  my $msg_provider_bank_id      = $conf{PAYSYS_ERIPT_PROVIDER_BANK_ID}      || 123456;    # Êîä áàíêà ïðîèçâîäèòåëÿ óñëóã  M, N3
  my $msg_provider_bank_account = $conf{PAYSYS_ERIPT_PROVIDER_BANK_ACCOUNT} || 123456;    # Íîìåð óñëóãè ó ïðîèçâîäèòåëÿ óñëóã  O, N8
  my $msg_provider_service_id   = 1;
  my $msg_valuta                = 974;
  my $msg_total_sum             = 0;

  my $num          = 0;
  my $payment_date = '';                                                                  #"$DATE$TIME";
  $payment_date =~ s/:|\-//g;

  my $WHERE = '';

  if ($argv->{LOGIN}) {
    $WHERE = "AND u.id='$argv->{LOGIN}'";
  }

  my $account_key = ($conf{PAYSYS_ERIP_ACCOUNT_KEY} && $conf{PAYSYS_ERIP_ACCOUNT_KEY} eq 'LOGIN') ? 'u.id' : 'u.uid';

  $Paysys->query2("SELECT $account_key AS account_key, pi.fio,
      concat(pi.address_street, ', ', pi.address_build, ', ', pi.address_flat) AS full_address, u.credit, dv.tp_id, tp.month_fee
    FROM users u, users_pi pi, dv_main dv, tarif_plans tp
    WHERE u.uid=pi.uid AND u.deleted=0
      AND u.uid=dv.uid
      AND dv.tp_id=tp.id
    $WHERE
    ",
    undef,
    { COLS_NAME => 1 }
  );

  my $list = $Paysys->{list};

  foreach my $line (@{$list}) {
    $num++;

    my $uid      = $line->{account_key};
    my $fio      = convert($line->{fio}, { utf82win => 1 });
    my $address  = convert($line->{full_address}, { utf82win => 1 });
    my $credit   = 0;            #$line->[3];
    my $comments = '';
    my $ext_info = '';

    # TP
    my $tp_id   = $line->{tp_id};
    my $tarif_1 = '';            #$line->[5];
    my $tarif_2 = '';

    $record_total_count++;
    $msg_total_sum += $tarif_1 || 0;

    my $tariffs_fields = '';     #"1~$tp_id~5~$tarif_1~$tarif_2~0~0~0";

    # V2
    #$message .= "$num^$uid^$fio^$address^$payment_period^$credit^$tariffs_fields^$payment_date^$comments^$ext_info^^^^^^\r\n";

    # V5
    $message .= "2^$uid^$fio^$address^$payment_period^$credit^$tariffs_fields^$payment_date^$comments^$ext_info^^^^^\r\n";
  }

  $message = "$msg_version^$msg_provider_id^$msg_num^$msg_date^$record_total_count^$conf{PAYSYS_ERIPT_PROVIDER_NUM}^$msg_provider_bank_id^$msg_provider_bank_account^$msg_provider_service_id^$msg_valuta^\r\n" . $message;

  if ($debug > 4) {
    print $message;
  }
  else {
    my $upload_file = '/tmp/' . $msg_file;

    open(my $fh, '>', $upload_file) or die "Can't create file '$upload_file' $!\n";
      print $fh $message;
    close($fh);
    paysys_import_ftp({ UPLOAD => $upload_file, FTP_DIR => '/in/' });
  }

#***********************************************************
=head2 bss_users_list() - send users list to email

  Attributes:

  Returns:
    true

  Examples:
    bss_users_list();
=cut
#***********************************************************
sub bss_users_list {
  #my ($attr) = @_;

  my $code = $conf{PAYSYS_BSS_CODE};  # your code
  my $users_data = '';                            # users data for file
  my $users = Users->new($db, $admin, \%conf);
  #$users->{debug}=1 if ($debug > 7);
  my $list = $users->list(
    {
      FIO              => '_SHOW',
      UID              => '_SHOW',
      LOGIN            => '_SHOW',
      CONTRACT_ID      => '_SHOW',
      DEPOSIT          => '_SHOW',
      ADDRESS_STREET_2 => '_SHOW',
      ADDRESS_BUILD    => '_SHOW',
      ADDRESS_FLAT     => '_SHOW',
      #$BINDING_FIELD  => "$ids",
      PAGE_ROWS        => 1000000,
      COLS_NAME        => 1
    }
  );

  use Dv;
  my $Dv = Dv->new($db, $admin, \%conf);
  foreach my $user (@$list) {
    my $dv_user_info = $Dv->info($user->{uid});

    if($dv_user_info->{errstr} eq 'ERROR_NOT_EXIST' || $dv_user_info->{DISABLE} == 2){
      next;
    }

    $user->{fio}=~s/\s/ /g;
    $user->{fio}=~s/(\h+)$//g;
    my $build_number;
    my $build_drob;

    #my ($build_number, $build_drob) = split("/",$user->{address_build}); # get a build number with a letter & build drob
    if( $user->{address_build} =~ /\// ){
      ($build_number, $build_drob) = split('/', $user->{address_build});
    }
    elsif( $user->{address_build} =~ /\\+/ ){
      # ($build_number, $build_drob) = split('\\\\', $user->{address_build});
      $user->{address_build} =~ s/\\+/\//;
      ($build_number, $build_drob) = split('/', $user->{address_build});
    }
    else{
      $build_number = $user->{address_build} || 0;
    }

    my $build_digit = 0;
    my $build_letter;

    if($build_number =~ /[A-za-z]$/){
      $build_letter = substr($build_number, -1);
      if($build_letter eq 'A' || $build_letter eq 'a'){
        $build_digit = 1;
        $build_number = substr($build_number, 0, length($build_number) - 1);
      }
    }
    elsif($build_number =~ /[А-Яа-я]$/){
      $build_letter = substr($build_number, -2);
      if($build_letter eq 'А' || $build_letter eq 'а'){
        $build_digit = 1;
      }
      elsif($build_letter eq 'Б' || $build_letter eq 'б'){
        $build_digit = 2;
      }
      elsif($build_letter eq 'В' || $build_letter eq 'в'){
        $build_digit = 3;
      }
      elsif($build_letter eq 'Г' || $build_letter eq 'г'){
        $build_digit = 4;
      }
      elsif($build_letter eq 'Д' || $build_letter eq 'д'){
        $build_digit = 5;
      }
      elsif($build_letter eq 'Е' || $build_letter eq 'е'){
        $build_digit = 6;
      }
      elsif($build_letter eq 'Ж' || $build_letter eq 'ж'){
        $build_digit = 7;
      }
      elsif($build_letter eq 'З' || $build_letter eq 'з'){
        $build_digit = 8;
      }
      elsif($build_letter eq 'И' || $build_letter eq 'и'){
        $build_digit = 9;
      }
      elsif($build_letter eq 'Й' || $build_letter eq 'й'){
        $build_digit = 10;
      }
      elsif($build_letter eq 'К' || $build_letter eq 'к'){
        $build_digit = 11;
      }
      elsif($build_letter eq 'Л' || $build_letter eq 'л'){
        $build_digit = 12;
      }
      elsif($build_letter eq 'М' || $build_letter eq 'м'){
        $build_digit = 13;
      }
      elsif($build_letter eq 'Н' || $build_letter eq 'н'){
        $build_digit = 14;
      }
      elsif($build_letter eq 'О' || $build_letter eq 'о'){
        $build_digit = 15;
      }
      elsif($build_letter eq 'П' || $build_letter eq 'п'){
        $build_digit = 16;
      }
      elsif($build_letter eq 'Р' || $build_letter eq 'р'){
        $build_digit = 17;
      }
      $build_number = substr($build_number, 0, length($build_number) - 2);
    }
    else{
      $build_digit = 0;
    }

    # if build doesnt have a drob
    if(!($build_drob =~ /^\d+?$/)){
      $build_drob = 0;
    }

    my $flat_digit  = 0; # flat digit
    my $flat_number;
    my $flat_letter = '';
    if($user->{address_flat} =~ /[A-za-z]$/){
      $flat_letter = substr($user->{address_flat}, -1);
      if($flat_letter eq 'A' || $flat_letter eq 'a'){
        $flat_digit = 1;
        $flat_number = substr($user->{address_flat}, 0, length($user->{address_flat}) - 1);
      }
    }
    elsif($user->{address_flat} =~ /[А-Яа-я]$/){
      $flat_letter = substr($user->{address_flat}, -2);
       if($flat_letter eq 'А' || $flat_letter eq 'а'){
        $flat_digit = 1;
      }
      elsif($flat_letter eq 'Б' || $flat_letter eq 'б'){
        $flat_digit = 2;
      }
      elsif($flat_letter eq 'В' || $flat_letter eq 'в'){
        $flat_digit = 3;
      }
      elsif($flat_letter eq 'Г' || $flat_letter eq 'г'){
        $flat_digit = 4;
      }
      elsif($flat_letter eq 'Д' || $flat_letter eq 'д'){
        $flat_digit = 5;
      }
      elsif($flat_letter eq 'Е' || $flat_letter eq 'е'){
        $flat_digit = 6;
      }
      $flat_number = substr($user->{address_flat}, 0, length($user->{address_flat}) - 2);
    }
    else{
      $flat_number = $user->{address_flat} || 0;
    }

    $users_data .= qq{"$user->{uid}","$code","$user->{fio}","$user->{address_street_2}","$build_number","$build_digit","$build_drob","$flat_number","$flat_digit","1","}. sprintf('%.2f',$user->{deposit}) . qq{","} . sprintf('%.2f', $dv_user_info->{MONTH_ABON}) . qq{","0","I"\n};

    #print qq{"$user->{uid}","$code","$user->{fio}","$user->{address_street_2}","$build_number","$build_digit","$build_drob","$flat_number","$flat_digit","0","0","}. sprintf('%.2f',$user->{deposit}) . qq{","} . sprintf('%.2f', $recomended_sum) . qq{","0","I"\n};
  }


  $users_data = convert($users_data, { utf82cp866 => 1 });

  if( -d "$conf{TPL_DIR}/BSS"){
    if( open(my $fh, '+>', "$conf{TPL_DIR}/BSS/$conf{PAYSYS_BSS_CODE}.dat") ) {
      print $fh $users_data;
      close($fh);
    }
  }
  else{
    mkdir "$conf{TPL_DIR}/BSS", 777;
    if( open(my $fh, '+>', "$conf{TPL_DIR}/BSS/$conf{PAYSYS_BSS_CODE}.dat") ) {
      print $fh $users_data;
      close($fh);
    }
  }

  sendmail("$conf{ADMIN_MAIL}",
           "$argv->{MAIL}",
            $conf{PAYSYS_BSS_ORGANIZATION},
            'Список пользователей',
            $conf{MAIL_CHARSET},
            "0",
            {
              ATTACHMENTS => [{
                                CONTENT      => $users_data,
                                CONTENT_TYPE => 'Content-type: application/txt',
                                FILENAME     => "$conf{PAYSYS_BSS_CODE}.dat",
                              }]
            });
  return 1;
}


#**********************************************************
=head2 bss_log($attr)

  Arguments:


  Returns:

=cut
#**********************************************************
sub bss_log {
  my ($attr) = @_;
  my $users = Users->new($db, $admin, \%conf);

  if ($attr->{NST_OPL}) {
    #$attr->{NST_OPL} = convert($attr->{NST_OPL}, { cp8662utf8 => 1 });

    my %BUILDS_LETTERS = (1 => "А", 2 => "Б", 3 => "В", 4 => "Г", 5 => "Д", 6 => "Е");
    my ($uid, $sum, $date, $code, $fio, $street_sn, $build, $flat, $ext_id) = $attr->{NST_OPL} =~ /^!"(\d+|)","(\d+|\d+[.]\d+)","(\d+)","(\d+)","(.+)","(\d+)","(.+)","(.+)","(\d+)"/;
    use Address;
    my $address = Address->new($db, $admin, \%conf);
    my $street_info = $address->street_list({ COLS_NAME => 1, NAME => '_SHOW', SECOND_NAME => $street_sn });

    if ($build =~ /-/) {
      my ($num, $letter_num) = split('-', $build);
      $build = $num . "" . $BUILDS_LETTERS{$letter_num};
    }

    if ($flat =~ /-/) {
      my ($num, $letter_num) = split('-', $flat);
      $flat = $num . "" . $BUILDS_LETTERS{$letter_num};
    }

    my $user_info = $users->list(
      {
        COLS_NAME      => 1,
        FIO            => '_SHOW',
        ADDRESS_STREET => $street_info->[0]->{street_name},
        ADDRESS_FLAT   => $flat,
        ADDRESS_BUILD  => $build
      }
    );

    if ($#{$user_info} == 0) {
      my $status = 3;
      if ($user_info->[0]->{uid} != $uid) {
        $uid    = $user_info->[0]->{uid};
        $status = 4;
      }
      $Paysys->bss_add(
        {
          UID         => $uid,
          SUM         => $sum,
          DATE        => $date,
          EXT_ID      => $ext_id,
          ADDRESS     => "$street_info->[0]->{street_name} $build, $flat",
          FIO         => $fio,
          STATUS      => $status,
          DESCRIPTION => "Услуги связи от $fio.\nЛицевой счет $uid.\nПо адресу $street_info->[0]->{street_name} $build, $flat\n"
        }
      );
    }
    elsif ($#{$user_info} == -1) {
      my $user_info_by_fio = $users->list(
        {
          COLS_NAME      => 1,
          FIO            => $fio,
          ADDRESS_STREET => $street_info->[0]->{street_name},
          ADDRESS_FLAT   => '_SHOW',
          ADDRESS_BUILD  => '_SHOW'
        }
      );

      my $status = 5;
      if ($#{$user_info_by_fio} == 0) {
        if ($user_info_by_fio->[0]->{uid} != $uid) {
          $uid    = $user_info_by_fio->[0]->{uid};
          $status = 4;
        }
      }

      $Paysys->bss_add(
        {
          UID         => $uid ? $uid : '',
          SUM         => $sum,
          DATE        => $date,
          EXT_ID      => $ext_id,
          ADDRESS     => "$street_info->[0]->{street_name} $build, $flat",
          FIO         => $fio,
          STATUS      => $status,
          DESCRIPTION => "Услуги связи от $fio.\nЛицевой счет $uid.\nПо адресу $street_info->[0]->{street_name} $build, $flat\n"
        }
      );
    }
  }
  elsif ($attr->{AFTER_PAYMENT}) {
    my $user_pi = $users->pi({ UID => $attr->{UID} });
    $Paysys->bss_add(
      {
        UID         => $attr->{UID},
        SUM         => $attr->{SUM},
        DATE        => $attr->{DATE},
        EXT_ID      => $attr->{EXT_ID},
        ADDRESS     => $user_pi->{ADDRESS_FULL},
        FIO         => $user_pi->{FIO},
        STATUS      => $attr->{STATUS},
        DESCRIPTION => "Услуги связи от $user_pi->{FIO}.\nЛицевой счет $attr->{UID}.\nПо адресу $user_pi->{ADDRESS_FULL}\n"
      }
    );
  }

  return 1;
}

#**********************************************************
=head2 tyme_import() -

  Arguments:
    $attr -
  Returns:

  Examples:

=cut
#**********************************************************
sub tyme_import {
  my ($attr) = @_;

  load_pmodule('Net::FTPSSL');

  my $host  = $conf{PAYSYS_TYME_HOST};
  my $login = $conf{PAYSYS_TYME_LOGIN};
  my $pass  = $conf{PAYSYS_TYME_PASSWORD};

  my $ftp = Net::FTPSSL->new("$host", SSL => 1, Debug => 0, Port => 21,)
  or die "Cannot connect to '$host': $@";
  $ftp->login("$login", "$pass");
  my $report_date = '';

  if($argv->{DATE}){
    $report_date = $argv->{DATE};
    $report_date =~ s/-//g;
  }
  else{
    $report_date = $DATE;
    my ($y, $m, $d) = split('-', $report_date);

    $d = $d - 1;

    if ($d < 10){
      $d = '0' . $d;
    }

    if($d < 1){
      $m = $m - 1;
      if($m < 1){
        $m = 12;
        $y = $y - 1;
      }
      $d = days_in_month({DATE => "$y-$m"});
    }
    $report_date = "$y$m$d";

    print $report_date;
  }

  my @files = $ftp->nlst("$conf{PAYSYS_TYME_FILE}$report_date.csv");
  my $report_data = "|Транзакция\t|$lang{DATE}\t|$lang{USER}\t|$lang{SUM}\t|Терминал\t|\n";
  if( scalar @files != 0){
    foreach my $filename (@files){

      $ftp->get("$filename")
      or die "Ftp get failed '$filename' ", $ftp->message;

      open(my $fh, "$filename") || die "Can't open file '$filename' $!\n";
      my @lanes = <$fh>;
      close($fh);

      foreach my $lane (@lanes){
        my ($txn_id, $date_time, $user, $sum, $terminal) = $lane =~ /(\d+)\s(\d+\-\d+\-\d+ \d+\:\d+\:\d+)\s(\d+)\s(\d+.\d+)\s(\d+)/;
        print "|$txn_id, $date_time, $user, $sum, $terminal|\n";

        $Paysys->add_tyme_report({
          TXN_ID   => $txn_id,
          DATE     => $date_time,
          USER     => $user,
          SUM      => $sum,
          TERMINAL => $terminal
        });

        if(!$Paysys->{errno}){
          $report_data .= "|$txn_id\t| $date_time\t| $user\t| $sum\t| $terminal\t|\n";
        }
      }
    }
  }

  sendmail("$conf{ADMIN_MAIL}", "$conf{ADMIN_MAIL}", "Tyme Отчет", "$report_data  ", "$conf{MAIL_CHARSET}", "2 (High)");

  return 1;
}

=comments


Çàïèñè ñîîáùåíèÿ ñîäåðæàò äàííûå îäíîãî òðåáîâàíèÿ ê îïëàòå. Ñòðóêòóðà çàïèñè ïðèâåäåíà â òàáëèöå 1.2.
Òàáëèöà 1.2 - Ñòðóêòóðà çàïèñè ñîîáùåíèÿ 202
¹ ïîëÿ  Âåðñèÿ ïðîòîêîëà  Íàèìåíîâàíèå  Îáÿçàòåëüíîñòü,
Òèï äàííûõ, Ôîðìàò
1  1,2, 3  Íîìåð çàïèñè  M, N6
2  1,2, 3  Íîìåð ëèöåâîãî ñ÷åòà  M, S20
3  1,2, 3  ÔÈÎ ïîòðåáèòåëÿ óñëóã  O, S90
4  1,2, 3  Àäðåñ ïîòðåáèòåëÿ óñëóã  O, S99
5  1,2, 3  Ïåðèîä îïëàòû  O, DMM.YYYY
6  1,2, 3  Ñóììà çàäîëæåííîñòè  M, F12,2
7  1,2, 3  Òàðèôû è ïîêàçàíèÿ ñ÷åò÷èêîâ  SubField
8  1,2, 3  Äàòà ôîðìèðîâàíèÿ òðåáîâàíèÿ ê îïëàòå  O, DYYYYMMDDhhmmss
9  1,2, 3  Äîïîëíèòåëüíûå ñâåäåíèÿ  O, S500
10  1,2, 3  Äîïîëíèòåëüíûå äàííûå  O, S255
11  2, 3  Ñóììà ïåíè, íà÷èñëåííàÿ ÏÓ  O, F12,2
12  2, 3  Êîëè÷åñòâî ïðîæèâàþùèõ  O, N2
13  2, 3  Êîëè÷åñòâî ëüãîòíèêîâ  O, N2


Ïðè ôîðìèðîâàíèè çàïèñè äîëæíû âûïîëíÿòüñÿ ñëåäóþùèå òðåáîâàíèÿ:
?  ïîëå 2 äîëæíî ñîäåðæàòü íîìåð ëèöåâîãî ñ÷åòà ïîòðåáèòåëÿ óñëóã ó ïðîèçâîäèòåëÿ óñëóã;
?  ïîëå 6 äîëæíî ñîäåðæàòü ñóììó çàäîëæåííîñòè ïîòðåáèòåëÿ óñëóã ïåðåä ïðîèçâîäè-òåëåì óñëóã. Îòðèöàòåëüíîå çíà÷åíèå îçíà÷àåò çàäîëæåííîñòü ïðîèçâîäèòåëÿ ïåðåä ïîòðåáè-òåëåì;
?  ïîëå 7 ñîäåðæèò ïîäïîëÿ, ñòðóêòóðà äàííîãî ïîëÿ ïðèâåäåíà â òàáëèöå 1.3;
?  ïîëå 9 ñîäåðæèò äîïîëíèòåëüíóþ èíôîðìàöèþ, âûâîäèìóþ êëèåíòó ïðè îïëàòå íà ýêðàí è/èëè ÷åê. Ïðåäîñòàâëÿåìàÿ èíôîðìàöèÿ ìîæåò áûòü ðàçáèòà íà ñòðîêè. Äëÿ ðàçáèåíèÿ ñòðîê èñïîëüçóåòñÿ ñèìâîë "~" (êîä ñèìâîëà 0x7E);
?  ïîëå 10 ìîæåò ñîäåðæàòü íåôîðìàëèçîâàííûå äàííûå î òðåáîâàíèè ê îïëàòå, êîòî-ðûå áóäóò âûãðóæåíû â îäíîèìåííîì ïîëå â èñõîäÿùèõ ñîîáùåíèÿõ 206, 210, 216;
?  ïîëÿ 6 è/èëè 7 äîëæíî äîëæíû ñîäåðæàòü äàííûå;
?  ïîëå 11 ñîäåðæèò ñóììó ïåíè, íà÷èñëåííóþ ïðîèçâîäèòåëåì óñëóã ïîòðåáèòåëþ óñ-ëóãè ñâåðõ ñóììû çàäîëæåííîñòè. Â ñëó÷àå ïðîñðî÷êè ïëàòåæà ñèñòåìà ÅÐÈÏ íå íà÷èñëÿåò ïåíþ íà ýòó ñóììó;
?  ïîëÿ 12 è 13 èñïîëüçóþòñÿ äëÿ ðàñ÷åòà ñóììû îïëàòû ïî ëüãîòíîìó è îáû÷íîìó òà-ðèôó.
Òàáëèöà 1.3 - Ñòðóêòóðà ïîëÿ "Òàðèôû è ïîêàçàíèÿ ñ÷åò÷èêîâ"
¹ ïîëÿ  Íàèìåíîâàíèå  Îáÿçàòåëüíîñòü,


Òèï äàííûõ, Ôîðìàò
1  Êîëè÷åñòâî ñ÷åò÷èêîâ  M, N1
2  Ñåðèéíûé íîìåð ñ÷åò÷èêà  O, S20
3  Ðàçðÿäíîñòü ñ÷åò÷èêà  O, N2
4  Òàðèô óñëóãè 1  M, F5,6
5  Òàðèô óñëóãè 2  O, F5,6
6  Íîðìà ïîòðåáëåíèÿ  O, F6,5
7  Íà÷àëüíîå ïîêàçàíèå ñ÷åò÷èêà  M, N16
8  Êîíå÷íîå ïîêàçàíèå ñ÷åò÷èêà  O, N16
Ïðè ôîðìèðîâàíèè ïîëÿ äîëæíû âûïîëíÿòüñÿ ñëåäóþùèå òðåáîâàíèÿ:
?  ïîäïîëå 4 èñïîëüçóåòñÿ äëÿ ðàñ÷åòà ñóììû îïëàòû, åñëè ðàñõîä, ðàññ÷èòàííûé ñ ó÷åòîì êîëè÷åñòâà ëüãîòíèêîâ, ïî ñ÷åò÷èêó ìåíüøå çíà÷åíèÿ ïîäïîëÿ 6. Ðàñõîä, ïðåâû-øàþùèé íîðìó ïîòðåáëåíèÿ, îïëà÷èâàåòñÿ ïî òàðèôó èç ïîäïîëÿ 5;
?  çíà÷åíèå ïîäïîëÿ 3 äîëæíî áûòü â äèàïàçîíå [1..16];
?  ìàêñèìàëüíàÿ äëèíà çíà÷åíèé ïîäïîëåé 7 è 8 íå äîëæíà ïðåâûøàòü äëèíó, çàäàí-íóþ ïîäïàðàìåòðîì 3 äëÿ òåêóùåé ãðóïïû ïîäïîëåé;
?  âûäåëåííûå ïîäïîëÿ ïîâòîðÿþòñÿ â ïîëå â ñîîòâåòñòâèè ñî çíà÷åíèåì ïîäïîëÿ 1.
Ïî ðåçóëüòàòàì îáðàáîòêè ñîîáùåíèÿ 202 â ðåãèîíàëüíîì óçëå äîëæåí ôîðìèðîâàòüñÿ îòâåò.
Èìÿ ôàéëà îòâåòà èìååò âèä NNNNNNNN.204, ãäå NNNNNNNN – íîìåð ñîîáùåíèÿ.
Ñòðóêòóðà îòâåòà ïðèâåäåíà â òàáëèöå 1.4.

=cut

}

1
