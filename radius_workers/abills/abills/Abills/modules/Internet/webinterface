#!perl
=head1 NAME

  Internet module

  Internet Dialup/VPN/IPoE functions

  Error ID: 9xx

=cut


use strict;
use warnings FATAL => 'all';
use Abills::Defs;
use Abills::Base qw(date_diff in_array sendmail sec2time show_log mk_unique_value int2byte _bp int2ip days_in_month clearquotes next_month);
use Abills::Filters qw(_mac_former human_exp);
use Internet;
use Internet::Sessions;
use Finance;
use Fees;
use Shedule;
use Tariffs;
use Nas;
use Log;

our ($db,
  %conf,
  $admin,
  $html,
  %permissions,
  $ui,
  @WEEKDAYS,
  @MONTHES,
  %err_strs,
  %lang,
  $PG,
  $users,
  @PERIODS, # ???
  %ADMIN_REPORT
);

my $Internet = Internet->new($db, $admin, \%conf);
my $Shedule  = Shedule->new($db, $admin, \%conf);
my $Payments = Finance->payments($db, $admin, \%conf);
my $Tariffs  = Tariffs->new($db, \%conf, $admin);
my $Nas      = Nas->new($db, \%conf, $admin);
my $Log      = Log->new($db, \%conf);

require Control::Services;
require Internet::User_portal;
require Internet::Quick_reports;

if($permissions{3}) {
  require Internet::Reports;
}

if($permissions{4}) {
  require Internet::Configure;
}

if($permissions{5}) {
  require Internet::Monitoring;
}

#if($FORM{UID}) {
  require Internet::Users;
#}

#
#if ($conf{DV_BONUS}) {
#  require Dv::Rating;
#}
#
#if ($conf{DV_TURBO_MODE}) {
#  require Dv::Turbo;
#}
#

if(%ADMIN_REPORT) {
  require Internet::Periodic;
  require Internet::Ipoe_periodic;
}

#**********************************************************
=head2 internet_users_search($Internet_)

=cut
#**********************************************************
sub internet_users_search {
  my ($Internet_) = @_;

  $index=get_function_index('internet_users_list') if ( $functions{$index} && $functions{$index} ne 'internet_users_list' );
  $Internet->{GROUP_SEL}  = sel_groups();
  $Internet->{STATUS_SEL} = sel_status({
    STATUS => $FORM{INTERNET_STATUS} || '',
    ALL    => 1,
    NAME   => 'INTERNET_STATUS'
  });

  if ($conf{INTERNET_LOGIN}) {
    $Internet_->{INTERNET_LOGIN_FORM} .= $html->tpl_show(templates('form_row'), { ID => 'INTERNET_LOGIN',
        NAME  => "Internet $lang{LOGIN}",
        VALUE => $html->form_input('INTERNET_LOGIN', $FORM{INTERNET_LOGIN} || '%INTERNET_LOGIN%', { ID => 'INTERNET_LOGIN' })
      }, { OUTPUT2RETURN => 1 });
  }

  $Internet_->{TP_SEL} = sel_tp({ MODULE => 'Dv;Internet',
    SELECT    => 'TP_ID',
    EX_PARAMS => 'multiple="multiple"'
  });

  $Internet_->{NAS_SEL}=$html->form_select(
    'NAS_ID',
    {
      SELECTED          => $Internet->{NAS_ID} || $FORM{NAS_ID},
      SEL_LIST          => '',
      #$Nas->list({ COLS_NAME => 1, DOMAIN_ID => $users->{DOMAIN_ID}, SHORT => 1, NAS_NAME => '_SHOW' }),
      SEL_KEY           => 'nas_id',
      SEL_VALUE         => 'nas_name',
      SEL_OPTIONS       => { '' => '' },
      MAIN_MENU         => get_function_index( 'form_nas' ),
      MAIN_MENU_ARGV    => ($Internet->{NAS_ID}) ? "NAS_ID=$Internet->{NAS_ID}" : '',
      EXT_BUTTON        => $Internet->{SWITCH_STATUS},
      # Popup window
      POPUP_WINDOW      => 'form_search_nas',
      POPUP_WINDOW_TYPE => 'search',
      SEARCH_STRING     => 'POPUP=1&NAS_SEARCH=0'. (($FORM{UID}) ? "&UID=$FORM{UID}" : ''),
      HAS_NAME          => 1,
      TOOLTIP           => 'nas_name'
    }
  );

  my $ip_pool_list = $Nas->ip_pools_list({ STATIC => 1, COLS_NAME => 1 });

  if($FORM{IP_POOL}) {
    foreach my $line (@$ip_pool_list) {
      if($FORM{IP_POOL} == $line->{id}) {
        $FORM{IP}='>=' . int2ip($line->{ip}) . ';<=' . int2ip($line->{last_ip_num});
      }
    }
  }

  $Internet_->{IP_POOL_SEL} = $html->form_select(
    'IP_POOL',
    {
      SELECTED    => $FORM{IP_POOL},
      SEL_LIST    => $ip_pool_list,
      NO_ID       => 1,
      SEL_OPTIONS => { '' => '' },
    }
  );

  form_search({
    SEARCH_FORM  => $html->tpl_show(_include('internet_users_search', 'Internet'),
      { %$Internet_, %FORM },
      { OUTPUT2RETURN => 1 }),
    ADDRESS_FORM  => 1,
    CONTROL_FORM  => 1
  });

  return 1;
}

#**********************************************************
=head2 internet_multiuser($ids) - Make multiuser panel

  Arguments:
         $ids = string of ids

=cut
#**********************************************************
sub internet_multiuser {
  my ($ids) = @_;

  my @multiuser_arr = split(/, /, $ids || q{});
  my @multiuser_no_error;
  my %params;
  $Internet->list({
    GROUP_BY  => 'internet.id',
    ID        => join(';', @multiuser_arr),
    LIST2HASH => 'id,uid',
    PAGE_ROWS => 99999,
  });
  my $uid_hash = $Internet->{list_hash};

  if ($FORM{MU_TP} && $FORM{TP_SHEDULE} eq '0000-00-00') {
    $params{TP_ID} = $FORM{INTERNET_MU_TP};
  }
  if ($FORM{MU_DATE}) {
    $params{SERVICE_EXPIRE} = $FORM{INTERNET_MU_DATEPICKER};
  }
  if ($FORM{MU_STATUS}) {
    $params{STATUS} = $FORM{INTERNET_MU_STATUS};
  }
  if ($#multiuser_arr < 0) {
    $html->message('err', $lang{MULTIUSER_OP}, "$lang{SELECT_USER}");
    return 1;
  }
  elsif ($FORM{MU_TP} && $FORM{TP_SHEDULE} ne '0000-00-00') {
    my ($year, $month, $day) = split(/-/, $FORM{TP_SHEDULE}, 3);
    foreach my $id (@multiuser_arr) {
      $Internet->info($uid_hash->{$id}, { ID => $id });
      $Shedule->add(
        {
          UID          => $uid_hash->{$id},
          TYPE         => 'tp',
          ACTION       => "$id:$FORM{INTERNET_MU_TP}",
          D            => $day,
          M            => $month,
          Y            => $year,
          MODULE       => 'Internet',
          COMMENTS     => "$lang{FROM}: $Internet->{TP_ID}:". ($Internet->{TP_NAME} || ""),
          ADMIN_ACTION => 1
        }
      );

      if ( _error_show($Shedule) ) {
        last;
      }
      push @multiuser_no_error, $id;
    }
    $html->message('info', $lang{MULTIUSER_OP}, "$lang{TO_PLAN}\n$lang{SERVICE}: " . join(', ', @multiuser_no_error) );
  }
  elsif ($FORM{MU_CREDIT}) {
    $params{CREDIT} = $FORM{MU_CREDIT_SUM} || 0;
    $params{CREDIT_DATE} = $FORM{MU_CREDIT_DATE} || '0000-00-00';

    my %uids_hash = reverse %$uid_hash;
    foreach my $uid (keys %uids_hash) {
      $users->change( $uid,
        {
          UID    => $uid,
          %params
        }
      );
    }
  } 
  elsif (!%params) {
    $html->message('warn', $lang{MULTIUSER_OP}, "$lang{THERE_ARE_NO_SETTINGS_TO_CHANGE}");
    return 1;
  }
  else {
    foreach my $id (@multiuser_arr) {
      $Internet->change(
        {
          ID  => $id,
          UID => $uid_hash->{$id},
          %params
        }
      );
      
      if ( _error_show($Internet, { MODULE_NAME => $lang{INTERNET} }) ) {
        last;
      }
      push @multiuser_no_error, $id;
    }

    $html->message('info', $lang{MULTIUSER_OP}, "$lang{CHANGED}\n$lang{SERVICE}: " . join(', ', @multiuser_no_error) );
  }

  return 1;
}

#**********************************************************
=head2 internet_users_list($attr)

=cut
#**********************************************************
sub internet_users_list {
  my ($attr) = @_;

  if (!$permissions{0}{2}) {
    return 0;
  }

  if($FORM{INTERNET_MULTIUSER} && $FORM{IDS}) {
    internet_multiuser($FORM{IDS});
  }

  if (defined($FORM{TP_NUM}) && $FORM{TP_NUM} eq '0') {
    $FORM{TP_ID} = '0';
  }
  else {
    if ($attr->{TP}) {
      if ($FORM{TP_NUM}) {
        $FORM{TP_ID} = $FORM{TP_NUM};
        $FORM{TP_ID} =~ s/,/;/g;
      }

      $LIST_PARAMS{TP_ID} = $FORM{TP_NUM} || $FORM{TP_ID};
    }
    elsif ($FORM{TP_ID} || $FORM{TP_NUM}) {
      $FORM{TP_ID} = $FORM{TP_NUM} if ($FORM{TP_NUM});
      $FORM{subf} = $index;
      internet_tp();
      return 0;
    }
  }

  internet_users_search($Internet);

  # To prevent duplicating INTERNET_STATUS field in URL, should cut it from original $qs
  my $clear_qs = $pages_qs || q{};
  $clear_qs =~ s/\&INTERNET_STATUS=\d+//;

  my $current_status = (defined $FORM{INTERNET_STATUS} && $FORM{INTERNET_STATUS} =~ /^\d+$/)
                         ? $FORM{INTERNET_STATUS}
                         : undef;
  my $status_bar     = $html->button($lang{ALL}, "index=$index$clear_qs", {
      class => "btn btn-default " . (!defined $FORM{INTERNET_STATUS} ? 'active' : '' )
    });

  my $service_status = sel_status({ HASH_RESULT => 1 });
  foreach my $i (sort keys %$service_status) {
    my $active         = '';
    my ($name) = split(/:/, $service_status->{$i}, 2);

    if (defined $current_status && $current_status == $i) {
      $LIST_PARAMS{INTERNET_STATUS} = $FORM{INTERNET_STATUS};
      $pages_qs .= "&INTERNET_STATUS=$i";
      $active    = 'active';
    }

    $status_bar .= $html->button($name, "index=$index&INTERNET_STATUS=$i$clear_qs", { class => "btn btn-default $active"  });
  }

  ##print $html->letters_list({ pages_qs => $pages_qs });
  #  if ($FORM{letter}) {
  #    $LIST_PARAMS{LOGIN} = "$FORM{letter}*";
  #    $pages_qs .= "&letter=$FORM{letter}";
  #  }

  if ($FORM{SERVICES} && $FORM{SERVICES} =~ m/^[<>]?\d+$/) {
    my $search = $FORM{SERVICES};
    if ($search !~ m/^[<>]/) {
      $search = "=$search";
    }
    $LIST_PARAMS{SERVICE_COUNT}=$FORM{SERVICES};
    $LIST_PARAMS{GROUP_BY}="u.uid HAVING service_count $search";
  }
  else {
    $LIST_PARAMS{GROUP_BY}=' internet.id';
  }

  my $reg_index = get_function_index('form_wizard');
  my Abills::HTML $table;
  my $list;

  ($table, $list) = result_former({
    INPUT_DATA      => $Internet,
    FUNCTION        => 'list',
    BASE_FIELDS     => 0,
    DEFAULT_FIELDS  => 'LOGIN,FIO,DEPOSIT,CREDIT,TP_NAME,INTERNET_STATUS',
    APPEND_FIELDS   =>  'TP_ID,ID,UID',
    FUNCTION_FIELDS => 'form_payments,internet_stats',
    MAP             => 1,
    MAP_FIELDS      => 'ADDRESS_FLAT,LOGIN,DEPOSIT,FIO,TP_NAME,ONLINE',
    MAP_FILTERS     => { id => 'search_link:form_users:UID'
      #online => ''
    },
    MULTISELECT     => ($permissions{0}{7}) ? 'IDS:id:internet_users_list' : '',
    EXT_TITLES      => {
      'ip_num'                => 'IP',
      'netmask'               => 'NETMASK',
      'speed'                 => $lang{SPEED},
      'port'                  => $lang{PORT},
      'cid'                   => 'CID',
      'filter_id'             => 'Filter ID',
      'tp_name'               => $lang{TARIF_PLAN},
      'tp_id'                 => "$lang{TARIF_PLAN} ID",
      'internet_status'       => "Internet $lang{STATUS}",
      'internet_status_date'  => "$lang{STATUS} $lang{DATE}",
      'internet_comments'     => "Internet $lang{COMMENTS}",
      'online'                => 'Online',
      'online_ip'             => 'Online IP',
      'online_cid'            => 'Online CID',
      'online_duration'       => 'Online ' . $lang{DURATION},
      'month_fee'             => $lang{MONTH_FEE},
      'day_fee'               => $lang{DAY_FEE},
      'internet_expire'       => "Internet $lang{EXPIRE}",
      'internet_login'        => "Internet $lang{LOGIN}",
      'internet_password'     => "Internet $lang{PASSWD}",
      'month_traffic_in'      => "$lang{MONTH} $lang{RECV}",
      'month_traffic_out'     => "$lang{MONTH} $lang{SENT}",
      'month_ipn_traffic_in'  => "$lang{MONTH} IPN $lang{RECV}",
      'month_ipn_traffic_out' => "$lang{MONTH} IPN $lang{SENT}",
      'personal_tp'           => "$lang{PERSONAL} $lang{TARIF_PLAN}",
      'shedule'               => $lang{SHEDULE}
    },
    SELECT_VALUE => {
      internet_status => $service_status,
      login_status    => $service_status
    },
    FILTER_COLS => {
      ip_num                => 'int2ip',
      month_traffic_in      => 'int2byte',
      month_traffic_out     => 'int2byte',
      month_ipn_traffic_in  => 'int2byte',
      month_ipn_traffic_out => 'int2byte',
    },
    TABLE => {
      width      => '100%',
      caption    => "$lang{INTERNET} - $lang{USERS}",
      qs         => $pages_qs,
      ID         => 'INTERNET_USERS_LIST',
      header     => $status_bar,
      #SELECT_ALL => ($permissions{0}{7}) ? "internet_users_list:IDS:$lang{SELECT_ALL}" : undef,
      EXPORT     => 1,
      MENU       => "$lang{ADD}:index=" . $reg_index . ':add' . ";$lang{SEARCH}:index=$index&search_form=1:search",
    },
    MAKE_ROWS     => 1,
    SEARCH_FORMER => 1,
    MODULE        => 'Internet',
    TOTAL         => 1,
    SHOW_MORE_THEN=> 1,
    OUTPUT2RETURN =>1
  });

  if ( _error_show($Internet, { MODULE_NAME => $lang{INTERNET} }) ) {
    return 0;
  }
  elsif($Internet->{TOTAL} == 1 && $FORM{SKIP_FULL_INFO}){
    print $table->show();
    return 1;
  }
  elsif ($Internet->{TOTAL} == 1) {
    delete $FORM{LOGIN};
    $ui = user_info($list->[0]->{uid});
    print $ui->{TABLE_SHOW};
    form_users({ USER_INFO => $ui });
    return 1;
  }
  elsif (! $Internet->{TOTAL}) {
    $html->message('err', $lang{ERROR}, "$lang{USER} $lang{NOT_EXIST}");
    return 0;
  }

  if ( $Internet->{TOTAL} > 1 && $permissions{0}{7} && ! $FORM{EXPORT_CONTENT}) {
    $html->{FORM_ID}='internet_users_list';
    # $Internet->{MU_TP_SELECT}       = sel_tp({ MODULE => 'Internet', SELECT => 'INTERNET_MU_TP' });
    $Internet->{MU_TP_SELECT}       = $html->tpl_show(_include('internet_tp_shedule', 'Internet'), {
      TP_SEL   => sel_tp({ MODULE => 'Internet;Dv', SELECT => 'INTERNET_MU_TP' }),
      DATE_SEL => $html->form_datepicker('TP_SHEDULE','0000-00-00')
    }, { OUTPUT2RETURN => 1 });
    $Internet->{MU_CREDIT_DATEPICKER} = $html->form_datepicker('MU_CREDIT_DATE','0000-00-00');
    $Internet->{MU_TP_CHECKBOX}     = $html->form_input('MU_TP', 1, { TYPE => 'checkbox', });
    $Internet->{MU_STATUS_CHECKBOX} = $html->form_input('MU_STATUS', 1, { TYPE => 'checkbox', });
    $Internet->{MU_STATUS_SELECT}   = sel_status({NAME   => 'INTERNET_MU_STATUS'});
    $Internet->{MU_DATE}            = $html->form_datepicker('INTERNET_MU_DATEPICKER','0000-00-00');
    $Internet->{MU_DATE_CHECKBOX}   = $html->form_input('MU_DATE', 1, { TYPE => 'checkbox', });
    print $html->form_main(
      {
        CONTENT => $table . $html->tpl_show(_include('internet_user_multiselect', 'Internet'), $Internet, { OUTPUT2RETURN => 1 }) ,
        HIDDEN  => {
          index       => get_function_index('internet_users_list'),
          INTERNET_MULTIUSER => 1
        },
        NAME    => $html->{FORM_ID},
        class   => 'hidden-print',
        ID      => $html->{FORM_ID},
      }
    );
  }
  elsif($Internet->{TOTAL} > 1 && !$FORM{EXPORT_CONTENT}){
    print $html->form_main(
      {
        CONTENT => $table,
        HIDDEN  => {
          index       => get_function_index('internet_users_list'),
        },
        NAME    => 'internet_users_list',
        class   => 'hidden-print',
        ID      => 'internet_users_list',
      }
    );
  }

  return 1;
}

#**********************************************************
=head2 internet_error($attr)

=cut
#**********************************************************
sub internet_error {
  my ($attr)    = @_;

  if (!$permissions{3}{6}) {
    $html->message('warn', $lang{WARNING}, $lang{ERR_ACCESS_DENY});
    return 1;
  }

  if($FORM{ID}) {
    print user_service_menu({
      SERVICE_FUNC_INDEX => get_function_index('internet_user'),
      PAGES_QS           => "&ID=$FORM{ID}",
      UID                => $FORM{UID},
      MK_MAIN            => 1
    });
  }

  my %log_levels_rev = reverse %Log::log_levels;
  my @ACTIONS = ('', 'AUTH', 'ACCT', 'HANGUP', 'CALCULATION', 'CMD', 'LOST_ALIVE', 'GUEST_MODE', 'DUB_IP');

  if ($attr->{USER_INFO}) {
    my $user = $attr->{USER_INFO};
    $LIST_PARAMS{LOGIN} = $user->{LOGIN};

    if ($conf{INTERNET_LOGIN}) {
      $Internet->info($user->{UID});
      if ($Internet->{INTERNET_LOGIN}) {
        $LIST_PARAMS{LOGIN}.=";$Internet->{INTERNET_LOGIN}";
      }
    }
  }
  elsif ($FORM{LOGIN}) {
    $LIST_PARAMS{LOGIN} = $FORM{LOGIN};
    $pages_qs .= "&LOGIN=$FORM{LOGIN}";
  }
  elsif ($FORM{UID}) {
    internet_user();
    return 1;
  }

  #Sql Part
  my %nas_ids = (
    '' => '',
    0  => 'UNKNOWN',
  );

  my $list = $Nas->list({
    PAGE_ROWS => 60000,
    NAS_ID    => '_SHOW',
    NAS_NAME  => '_SHOW',
    DESCR     => '_SHOW',
    MAC       => '_SHOW',
    COLS_NAME => 1,
  });

  my %nas_ids_sel = ();
  foreach my $line (@$list) {
    $line->{nas_name} //= q{};
    $nas_ids_sel{ $line->{id} }  = $line->{nas_name} ."/". ($line->{descr} || q{});
    $nas_ids{ $line->{id} }  = "$line->{nas_name}/". ($line->{descr} || q{});
    $nas_ids{ $line->{mac} } = "$line->{nas_name}/". ($line->{descr} || q{});
  }

  if($FORM{search_form}) {
    $Internet->{LOG_TYPE_SEL} = $html->form_select(
      'LOG_TYPE',
      {
        SELECTED => $FORM{LOG_TYPE},
        SEL_HASH => { '' => '', %log_levels_rev },
        NO_ID    => 1
      }
    );

    $Internet->{NAS_ID_SEL} = $html->form_select('NAS_ID', {
      SELECTED    => $FORM{NAS_ID} || q{},
      SEL_HASH    => \%nas_ids_sel,
      SEL_OPTIONS => { '' => $lang{ALL} },
    });

    $Internet->{ACTIONS_SEL} = $html->form_select(
      'ACTION',
      {
        SELECTED  => $FORM{ACTION},
        SEL_ARRAY => \@ACTIONS,
      }
    );

    form_search({ SEARCH_FORM => $html->tpl_show(_include('internet_errors_search', 'Internet'), { %FORM, %$Internet }, { OUTPUT2RETURN => 1 }) });
  }
  if (!$FORM{sort}) {
    $LIST_PARAMS{SORT} = 1;
    $LIST_PARAMS{DESC} = 'DESC';
  }

  $list = $Log->log_list({%LIST_PARAMS, COLS_NAME => 1,});
  my $table = $html->table({
    caption    => $lang{TOTAL},
    width      => '100%',
  });

  my $total = 0;
  foreach my $line (@{ $Log->{list} }) {
    $table->addrow($log_levels_rev{ $line->{log_type} },
      $html->button($line->{count}, "index=". get_function_index('internet_error') . "&LOG_TYPE=$line->{log_type}"));
    $total += $line->{count};
  }

  $table->addrow($lang{TOTAL}, $total);

  print $table->show();

  if(defined $FORM{LOG_TYPE}){
    $list = $Log->log_list({
      %LIST_PARAMS,
      COLS_NAME => 1,
      LOG_TYPE  => $FORM{LOG_TYPE},
      FROM_DATE => $FORM{DATE} || $FORM{FROM_DATE} || '',
      TO_DATE   => $FORM{DATE} || $FORM{TO_DATE} || ''
    });
  }

  $table = $html->table({
    caption => "Internet $lang{ERROR}",
    width   => '100%',
    title   => [ $lang{DATE}, $lang{TYPE}, $lang{ACTION}, $lang{USER}, $lang{TEXT}, "NAS" ],
    pages   => $total,
    qs      => $pages_qs,
    ID      => 'INTERNET_ERRORS',
    EXPORT  => 1,
    MENU    => "$lang{SEARCH}:index=$index&search_form=1:search",
  });

  foreach my $line (@$list) {
    my $message = $line->{message};

    if($line->{log_type} < 5) {
      $message = $html->color_mark($line->{message}, $_COLORS[6]);
    }
    elsif($line->{action} eq 'GUEST_MODE') {
      $message = $html->color_mark($line->{message}, $_COLORS[8]);
      $line->{action} = $html->color_mark($line->{action}, $_COLORS[8]);
    }

    my $auth_switch = q{};

    if($message =~ /NAS_MAC: ([a-f\:0-9]+)/i) {
      $auth_switch = $1;
      if($nas_ids{$auth_switch}) {
        $auth_switch = $nas_ids{$auth_switch};
      }
    }

    my $main_nas = ($line->{nas_id} && $nas_ids{ $line->{nas_id} }) ? $nas_ids{ $line->{nas_id} } : 'Unknown '. ($line->{nas_id} || q{});
    $table->addrow($line->{date},
      $log_levels_rev{ $line->{log_type} },
      $line->{action},
        ($conf{INTERNET_LOGIN}) ? $html->button($line->{user}, "index=". get_function_index('internet_users_list'). "&INTERNET_LOGIN=$line->{user}&search=1")  : $html->button($line->{user}, "index=11&LOGIN=$line->{user}"),
      $message,
        (! $auth_switch || $auth_switch eq $main_nas) ? $main_nas : $auth_switch . $html->br() . $main_nas
    );
  }

  print $table->show();

  #File part
  if (! $conf{LOGFILE} || !-f $conf{LOGFILE}) {
    $html->message('info', $lang{INFO}, "'". ($conf{LOGFILE} || q{}) . "' $lang{NOT_EXIST} (\$conf{LOGFILE})");
    return 0;
  }

  if (defined($FORM{LOG_TYPE})) {
    $pages_qs .= "&LOG_TYPE=$FORM{LOG_TYPE}";
  }

  my ($log_list, $types, $totals) = show_log(
    ($LIST_PARAMS{LOGIN} || ''),
    $conf{LOGFILE},
    {
      DATE      => $FORM{DATE},
      LOG_TYPE  => ($FORM{LOG_TYPE}) ? $log_levels_rev{ $FORM{LOG_TYPE} } : undef,
      PG        => $PG || 25,
      PAGE_ROWS => 25
    }
  );

  $table = $html->table(
    {
      caption => "System $lang{ERROR}",
      width   => '100%',
      pages   => $totals,
      qs      => $pages_qs,
      ID      => 'INTERNET_ERRORS2',
    }
  );

  foreach my $line (@$log_list) {
    if ($line =~ m/LOG_WARNING/i) {
      $line = $html->color_mark($line, $_COLORS[6]);
    }

    $table->addrow($line);
  }
  print $table->show();

  $table = $html->table(
    {
      width      => '100%',
    }
  );

  $table->addrow($html->button("$lang{TOTAL}", "index=$index&$pages_qs"), $totals);
  while (my ($k, $v) = each %$types) {
    $table->addrow($html->button($k, "index=$index&LOG_TYPE=$k$pages_qs"), $v);
  }

  $table->addrow($lang{SIZE}, int2byte((-s $conf{LOGFILE}))) if (! $LIST_PARAMS{LOGIN} || $LIST_PARAMS{LOGIN} eq '');

  print $table->show();

  return 1;
}

#**********************************************************
=head2 internet_payments_maked($attr) - Cross module payment maked

  Arguments:
    $attr
      USER_INFO
      SUM

=cut
#**********************************************************
sub internet_payments_maked {
  my ($attr) = @_;

  $user=$attr->{USER_INFO} if ($attr->{USER_INFO});
  return '' if ($FORM{DISABLE});

  my $service_list = $Internet->list({
    UID         => $user->{UID},
    TP_NUM      => '>0',
    GROUP_BY    => 'internet.id',
    COLS_NAME   => 1
  });

  foreach my $service (@$service_list) {
    $Internet->info($user->{UID}, { ID => $service->{id} });

    if ($Internet->{PERSONAL_TP} && $Internet->{PERSONAL_TP} > 0) {
      $Internet->{MONTH_ABON} = $Internet->{PERSONAL_TP};
    }

    my $deposit = (defined($user->{DEPOSIT})) ? $user->{DEPOSIT} + (($user->{CREDIT} > 0) ? $user->{CREDIT} : $Internet->{TP_CREDIT}) : 0;

    my $abon_fees = ($user->{REDUCTION} == 0) ? $Internet->{MONTH_ABON} + $Internet->{DAY_ABON} : ($Internet->{MONTH_ABON} + $Internet->{DAY_ABON}) * (100 - $user->{REDUCTION}) / 100;

    if ($conf{INTERNET_FULL_MONTH}) {
      $abon_fees = ($user->{REDUCTION} == 0) ? $Internet->{MONTH_ABON} + $Internet->{DAY_ABON} * 30 : ($Internet->{MONTH_ABON} + $Internet->{DAY_ABON} * 30) * (100 - $user->{REDUCTION}) / 100;
    }
    elsif ($Internet->{ABON_DISTRIBUTION}) {
      $abon_fees = ($Internet->{MONTH_ABON} / 30) + $Internet->{DAY_ABON};
    }

    if ($Internet->{STATUS} > 3 && $deposit > $abon_fees) {
      $Internet->change(
        {
          UID    => $user->{UID},
          ID     => $Internet->{ID},
          STATUS => 0
        }
      );
      #$Internet->{ACCOUNT_ACTIVATE} = $user->{ACTIVATE} || '0000-00-00';
      service_get_month_fee($Internet, $attr);

      if ($conf{INTERNET_PAY_ACTIVATE}) {
        my $sum = $attr->{SUM} || 0;
        if ($Internet->{SERVICE_ACTIVATE} ne '0000-00-00' && date_diff($Internet->{SERVICE_ACTIVATE}, $DATE) > 30
          && $deposit - $sum <= 0 && $deposit > $abon_fees) {
          #&& $deposit - $sum <= 0 && $deposit > 0) {

          my %service_params = (
            UID              => $user->{UID},
            ID               => $Internet->{ID},
            STATUS           => 0,
            SERVICE_ACTIVATE => $DATE
          );

          if ($Internet->{STATUS}) {
            $service_params{STATUS} = 0;
          }

          $Internet->change(\%service_params);
        }
      }
    }
  }

  return 1;
}

#**********************************************************
=head2 internet_period_select($attr) - period select

  Arguments:
    $attr
      ID
      UID

=cut
#**********************************************************
sub internet_period_select {
  my ($attr) = @_;

  my $rows = ($conf{list_max_recs} && $conf{list_max_recs} =~ /^\d+$/) ? $conf{list_max_recs} : 25;

  my @rows = (
    $lang{DATE}.":",
    $html->form_daterangepicker({
      NAME      => 'FROM_DATE/TO_DATE',
      FORM_NAME => 'report_panel',
      VALUE     => $attr->{DATE} || $FORM{'FROM_DATE_TO_DATE'},
      OUTPUT2RETURN => 1
    }),
    $html->form_select(
      'DIMENSION',
      {
        SELECTED => $FORM{DIMENSION},
        SEL_HASH => {
          '' => 'Auto',
          'Kb' => 'Kb',
          'Mb' => 'Mb',
          'Gb' => 'Gb'
        },
        NO_ID => 1
      },
    ),
    "Online: ",
    $html->form_input('ONLINE', 1, { TYPE => 'checkbox', STATE => (! $FORM{rows} && ! $FORM{ONLINE}) ? 1 : $FORM{ONLINE}, OUTPUT2RETURN => 1 }),
    "$lang{ROWS}: ",
    $html->form_input('rows', $rows, { SIZE => 4, OUTPUT2RETURN => 1 }),
    $html->form_input('show', $lang{SHOW}, { TYPE => 'submit', OUTPUT2RETURN => 1 })
  );

  my $info = '';
  foreach my $val (@rows) {
    $info .= $html->element('div', $val . ' ', { class => 'form-group', OUTPUT2RETURN => 1 });
  }

  return $html->form_main(
    {
      CONTENT => $html->element('div', $info, { class => 'well well-sm', OUTPUT2RETURN => 1 }),
      HIDDEN => {
        sid   => $sid,
        index => $index,
        ID    => $attr->{ID},
        UID   => $attr->{UID} || '',
      },
      NAME  => 'stats',
      ID    => 'stats',
      class => 'form-inline',
      OUTPUT2RETURN => 1
    }
  );
}

#**********************************************************
=head2 internet_registration($attr)

  Arguments:
    $attr
      CAPTCHA
      CAPTCHA_OBJ
      SHOW_SMS
      QUITE


=cut
#**********************************************************
sub internet_registration {
  my ($attr) = @_;

  if ($FORM{reg}) {
#    if ($attr->{CAPTCHA} && $attr->{CAPTCHA_OBJ}->check_code($FORM{CCODE}, $FORM{C}) != 1) {
#      $Internet->{MESSAGE} = $html->message('err', $lang{ERROR}, "$lang{ERR_WRONG_CAPTCHA}", { ID => 991 });
#    }
#    els
    if ($attr->{SKIP_EMAIL_CHECK} && $FORM{EMAIL} !~ /^(([^<>()[\]\\.,;:\s\@\"]+(\.[^<>()[\]\\.,;:\s\@\"]+)*)|(\".+\"))\@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/) {
      $Internet->{MESSAGE} = $html->message('err', $lang{ERROR}, "$lang{ERR_WRONG_EMAIL}");
    }
    elsif ($conf{REGISTRATION_CHECK_PHONE}
      && (!$FORM{PHONE} || ($conf{PHONE_FORMAT} && $FORM{PHONE} !~ /$conf{PHONE_FORMAT}/ )) ) {
      $Internet->{MESSAGE} = $html->message('err', $lang{ERROR}, $lang{ERR_WRONG_PHONE}. (($conf{PHONE_FORMAT}) ? ' '.human_exp($conf{PHONE_FORMAT}) : q{}));
    }
    elsif (! $FORM{ACCEPT_RULES}) {
      $html->message('err', $lang{ERROR}, $lang{ERR_ACCEPT_RULES});
    }
    else {
      my $password = mk_unique_value($conf{PASSWD_LENGTH} || 8);

      $users->add(
        {
          LOGIN       => $FORM{LOGIN},
          CREATE_BILL => 1,
          PASSWORD    => $password,
          GID         => $conf{REGISTRATION_GID},
          PREFIX      => $conf{REGISTRATION_PREFIX},
        }
      );

      #my $message = '';
      if (!$users->{errno}) {
        my $uid = $users->{UID};
        $users->info($uid);

        #3 personal info
        $users->pi_add(
          {
            %FORM,
            UID   => $uid,
            FIO   => $FORM{FIO},
            EMAIL => $FORM{EMAIL}
          }
        );

        if ($users->{errno}) {
          $Internet->{MESSAGE} = $html->message('err', $lang{ERROR}, "[$users->{errno}] $err_strs{$users->{errno}}");
          goto REG_FORM;
        }

        #4 Dv
        $conf{REGISTRATION_DEFAULT_TP} = 0 if (!$conf{REGISTRATION_DEFAULT_TP});
        $Internet->add(
          {
            UID   => $uid,
            TP_ID => $FORM{TP_ID} || $conf{REGISTRATION_DEFAULT_TP},
            STATUS=> $FORM{STATUS}
          }
        );

        if (!$Internet->{errno}) {
          if ($conf{REGISTRATION_SHOW_PASSWD}) {
            $Internet->{PASSWD} = $password;
          }
          else {
            $Internet->{PASSWD} = "E-mail $lang{SENDED}";
          }

          $Internet->info($uid);
          if ($attr->{ACTIVATE_PAYMENT}) {
            $Payments->add(
              $users,
              {
                METHOD   => $attr->{PAYMENT_METHOD} || '2',
                SUM      => $Internet->{TP_ACTIVATE_PRICE},
              }
            );

            if ($FORM{STATUS}) {
              $Internet->change({
                UID    => $uid,
                STATUS => 0
              });

              service_get_month_fee($Internet, { QUITE => 1 });
            }
          }

          #show complete when user added
          if ($attr->{SHOW_SMS}) {
            $html->tpl_show(_include('internet_reg_complete_sms', 'Internet'), { %$Internet, %FORM, %{ ($users) ? $users : {} }, PASSWORD => "$password" });
          }
          elsif (! $attr->{QUITE}) {
            $html->tpl_show(_include('internet_reg_complete', 'Internet'), { %$Internet, %FORM, %{ ($users) ? $users : {} } });
          }

          #Sendsms
          if ($FORM{PHONE} && in_array('Sms', \@MODULES) && $conf{INTERNET_REGISTRATION_SEND_SMS} && ! $FORM{REGISTRATION_SKIP_SEND_SMS}) {
            load_module('Sms', $html);

            my $message = $html->tpl_show(_include('internet_reg_complete_sms', 'Internet'), { %FORM }, { OUTPUT2RETURN => 1  });;
            sms_send({
              NUMBER  => $FORM{PHONE},
              MESSAGE => $message,
              UID     => $uid,
            });
          }
          #Send mail
          if ($FORM{EMAIL}) {
            my $message = $html->tpl_show(_include('internet_reg_complete_mail', 'Internet'), { %$Internet, %FORM, PASSWORD => "$password" }, { OUTPUT2RETURN => 1 });
            sendmail($conf{ADMIN_MAIL}, $FORM{EMAIL}, $lang{REGISTRATION}, $message, $conf{MAIL_CHARSET}, '');
          }

          return $uid;
        }
        else {
          _error_show($Internet);
        }
      }
      else {
        _error_show($users);
        goto REG_FORM;
      }
    }
  }

  REG_FORM:

  if ($conf{INTERNET_REGISTRATION_TP_GIDS}) {
    $LIST_PARAMS{TP_GID} = $conf{INTERNET_REGISTRATION_TP_GIDS};
  }
  else {
    $LIST_PARAMS{TP_GID} = '>0';
  }

  $Internet->{TP_SEL} = $html->form_select(
    'TP_ID',
    {
      SELECTED => $FORM{TP_ID},
      SEL_LIST => $Tariffs->list({ %LIST_PARAMS,
        MODULE       => 'Dv;Internet',
        NEW_MODEL_TP => 1,
        COLS_NAME    => 1 }),
      SEL_KEY   => 'tp_id'
    }
  );

  if ($conf{INTERNET_REGISTRATION_ADDRESS}) {
    $Internet->{ADDRESS_TPL} = $html->tpl_show(templates('form_address_search'), { %FORM, %$attr },
      { OUTPUT2RETURN => 1, ID => 'form_address_sel' });
  }

  $html->tpl_show(_include('internet_registration', 'Internet'), { %$Internet, %$attr, %FORM }, { ID => 'INTERNET_REGISTRATION' });

  return 0;
}

#**********************************************************
=head2 internet_docs($attr) - get services for invoice

  Arguments:
    UID
    FEES_INFO
    SKIP_DISABLED

  Returns:


=cut
#**********************************************************
sub internet_docs {
  my ($attr) = @_;

  my $uid      = $attr->{UID} || $FORM{UID};
  my @services = ();
  my %info     = ();

  my $service_list = $Internet->list({
    UID              => $uid,
    MONTH_FEE        => '_SHOW',
    DAY_FEE          => '_SHOW',
    PERSONAL_TP      => '_SHOW',
    INTERNET_STATUS  => '_SHOW',
    ABON_DISTRIBUTION=> '_SHOW',
    TP_NAME          => '_SHOW',
    FEES_METHOD      => '_SHOW',
    TP_ID            => '_SHOW',
    TP_NUM           => '_SHOW',
    TP_FIXED_FEES_DAY=> '_SHOW',
    INTERNET_ACTIVATE=> '_SHOW',
    GROUP_BY         => 'internet.id',
    COLS_NAME        => 1
  });

  if ($attr->{FEES_INFO}) {
    my $service_info = $service_list->[0];
    $info{service_activate} = $service_info->{internet_activate};
    $info{tp_fixed_fees_day} = $service_info->{tp_fixed_fees_day} || 0;

    if($service_info->{internet_status} && $service_info->{internet_status} != 5 && $attr->{SKIP_DISABLED}) {
      $info{day}   = 0;
      $info{month} = 0;
      $info{abon_distribution} = 0;
    }
    else {
      if($service_info->{personal_tp} && $service_info->{personal_tp} > 0) {
        $info{day}   = $service_info->{personal_tp};
        $info{month} = $service_info->{personal_tp};
        $info{abon_distribution} = 0; #$Internet->{ABON_DISTRIBUTION};
      }
      else {
        $info{day}   = $service_info->{day_fee};
        $info{month} = $service_info->{month_fee};
        $info{abon_distribution} = $service_info->{abon_distribution};
      }
    }

    return \%info;
  }

  if ($Internet->{TOTAL} < 1
#  if ($Internet->{TOTAL}==0 || ($Internet->{STATUS} && $Internet->{STATUS} != 5)
#    #|| ($attr->{PAYMENT_TYPE} && ($Internet->{POSTPAID_ABON} || $Internet->{PAYMENT_TYPE}))
  ) {
    return \@services;
  }

  our %FEES_METHODS;

  foreach my $service_info ( @$service_list ) {
    if($service_info->{internet_status} && $service_info->{internet_status} != 5) {
      next
    }

    if($service_info->{personal_tp} && $service_info->{personal_tp} > 0) {
      $service_info->{month_fee} = $service_info->{personal_tp};
    }

    if ($service_info->{month_fee} && $service_info->{month_fee} > 0) {
      my %FEES_DSC = (
        MODULE          => 'Internet',
        TP_ID           => $service_info->{tp_id},
        TP_NAME         => $service_info->{tp_name},
        FEES_PERIOD_DAY => $lang{MONTH_FEE_SHORT},
        FEES_METHOD     => $service_info->{fees_method} ? $FEES_METHODS{$service_info->{fees_method}} : undef,
      );

      #Fixme / make hash export
      push @services, fees_dsc_former(\%FEES_DSC) . "||$service_info->{month_fee}|$service_info->{tp_num}|$service_info->{tp_name}"
        ."|$service_info->{fees_method}|$service_info->{internet_activate}";
    }

    if ($service_info->{day_fee} && $service_info->{day_fee} > 0) {
      my $days_in_month = days_in_month({ DATE => next_month({ DATE => $DATE }) });
      #Describe| days | sum
      push @services, "Internet: $lang{MONTH_FEE_SHORT}: $service_info->{tp_name} ($service_info->{tp_id})|$days_in_month $lang{DAY}|"
        . sprintf("%.2f", ($service_info->{day_fee} * $days_in_month)) . "||$service_info->{tp_name}"
        . "|$service_info->{fees_method}|$service_info->{internet_activate}";
    }
  }

  return \@services;
}


#**********************************************************
=head internet_quick_info($attr) - Quick information

  Arguments:
    $attr
      UID

  Return:

=cut
#**********************************************************
sub internet_quick_info {
  my ($attr) = @_;
  my $result;

  my $uid = $attr->{UID} || $FORM{UID};

  if ($attr->{UID}) {
    my $list = $Internet->list({
      UID        =>  $uid,
      TP_NAME    => '_SHOW',
      MONTH_FEE  => '_SHOW',
      CID        => '_SHOW',
      TP_COMMENTS=> '_SHOW',
      STATUS     => '_SHOW',
      IP         => '_SHOW',
      COLS_NAME  => 1,
      COLS_UPPER => 1
    });

    $result = $list->[0];
    my $service_status = sel_status({ HASH_RESULT => 1 });
    $result->{STATUS} = (defined($result->{STATUS})) ? $service_status->{ $result->{STATUS} } : '';
    return $result;
  }
  elsif($attr->{GET_PARAMS}) {
    $result = {
      HEADER    => $lang{INTERNET},
      QUICK_TPL => 'internet_qi_box',
      FIELDS => {
        TP_NAME     => $lang{TARIF_PLAN},
        CID         => 'CID',
        IP          => 'IP',
        STATUS      => $lang{STATUS},
        MONTH_FEE   => $lang{MONTH_FEE},
        TP_COMMENTS => $lang{COMMENTS},
      }
    };

    return $result;
  }

  $Internet->list({
    UID        =>  $uid,
    COLS_NAME  => 1,
  });

  return ($Internet->{TOTAL_SERVICES} && $Internet->{TOTAL_SERVICES} > 0) ? $Internet->{TOTAL_SERVICES} : '';
}


#**********************************************************
=head2 _sec2time_str($sec);

=cut
#**********************************************************
sub _sec2time_str {
  my($value) = @_;

  return sec2time($value, { str => 1 });
}


#**********************************************************
=head2 internet_search($attr) - Global search submodule

  Arguments:
    $attr
      SEARCH_TEXT
      DEBUG

  Returs:
     TRUE/FALSE

=cut
#**********************************************************
sub internet_search {
  my($attr) = @_;

  my @default_search = ('CID', 'CPE_MAC', 'INTERNET_LOGIN', '_MULTI_HIT');

  if($attr->{SEARCH_TEXT} =~ /^[0-9\.]+$/) {
    push @default_search, 'IP';
  }

  my @qs = ();
  foreach my $field ( @default_search ) {
    $LIST_PARAMS{$field} = "*$attr->{SEARCH_TEXT}*";
    push @qs, "$field=*$attr->{SEARCH_TEXT}*";
  }

  if($attr->{DEBUG}) {
    $Internet->{debug} = 1;
  }

  $Internet->list({
    %LIST_PARAMS,
  });

  my @info = ();

  if($Internet->{TOTAL}) {
    push @info, {
      'TOTAL'        => $Internet->{TOTAL},
      'MODULE'       => 'Internet',
      'MODULE_NAME'  => $lang{INTERNET},
      'SEARCH_INDEX' => get_function_index('internet_users_list')
        . '&' . join('&', @qs) . "&search=1"
    };
  }

  #Online
  my $Sessions = Internet::Sessions->new($db, $admin, \%conf);
  @default_search = ('CID', '_MULTI_HIT');

  if($attr->{SEARCH_TEXT} =~ /^[0-9\.]+$/) {
    push @default_search, 'IP';
  }

  @qs = ();
  foreach my $field ( @default_search ) {
    $LIST_PARAMS{$field} = "*$attr->{SEARCH_TEXT}*";
    push @qs, "$field=*$attr->{SEARCH_TEXT}*";
  }

  if($attr->{DEBUG}) {
    $Sessions->{debug} = 1;
  }

  $Sessions->online({ %LIST_PARAMS, ALL => 1 });

  if($Sessions->{TOTAL}) {
    push @info, {
        'TOTAL'        => $Sessions->{TOTAL},
        'MODULE'       => 'Internet',
        'MODULE_NAME'  => "$lang{INTERNET} ONLINE",
        'SEARCH_INDEX' => get_function_index('internet_online')
          . '&' . join('&', @qs) . "&search=1"
      };
  }

  #Stats
  $Sessions->list({ %LIST_PARAMS });

  if($Sessions->{TOTAL}) {
    push @info, {
        'TOTAL'        => $Sessions->{TOTAL},
        'MODULE'       => 'Internet',
        'MODULE_NAME'  => "$lang{INTERNET} $lang{STATS}",
        'SEARCH_INDEX' => get_function_index('internet_sessions')
          . '&' . join('&', @qs) . "&search=1"
      };
  }

  return \@info;
}

#**********************************************************
=head internet_traffic_names($tp_id)

=cut
#**********************************************************
sub internet_traffic_names {
  my ($tp_id) = @_;

  my %TRAFFIC_NAMES = ();
  $Tariffs->ti_list({ TP_ID => $tp_id });
  if ($Tariffs->{TOTAL} > 0) {
    my $list = $Tariffs->tt_list({ TI_ID => $Tariffs->{list}->[0]->[0], COLS_NAME => 1 });
    foreach my $line (@$list) {
      $TRAFFIC_NAMES{ $line->{id} } = $line->{descr};
    }
  }

  return \%TRAFFIC_NAMES;
}

#**********************************************************
=head dv2intenet_tp($dv_tp_id)

  Arguments:
    $dv_tp_id

=cut
#**********************************************************
sub dv2intenet_tp {
  my($dv_tp_id) = @_;
  my $tp_id = 0;

  my $tp_list = $Tariffs->list({
    NEW_MODEL_TP => 1,
    TP_ID        => $dv_tp_id,
    MODULE       => 'Dv',
    COLS_NAME    => 1
  });

  if($Tariffs->{TOTAL} > 0) {
    $tp_id = $tp_list->[0]->{tp_id};
  }

  return $tp_id;
}

1
