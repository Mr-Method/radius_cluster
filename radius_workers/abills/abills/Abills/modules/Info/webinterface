#!perl
=head1 NAME

  Info - module webinterface for Info.pm version 1.00

=cut

use Info;

use Abills::Base qw/in_array/;

require Abills::Misc;

use constant {
  img_dir              => "/images/Info/images/",
  documents_dir        => "/images/Info/docs/",

  img_upload_dir       => "/Info/images/",
  documents_upload_dir => "/Info/docs/",

};

my $document_allowed_extensions = $conf{INFO_DOCUMENT_ALLOWED_EXTENSIONS} || 'doc, docx, pdf, xls, xslx, txt';
my $image_allowed_extensions = $conf{INFO_IMAGE_ALLOWED_EXTENSIONS} || 'gif, png, jpg, jpeg';

=head1 SYNOPSIS

  Visualization for Info module

  Workes with JavaScript info.js for dynamic changing comments
  CSS styles in info.css

=head1 USAGE

  load_module('Info', $html);
  info_comments_show('admins', 25); - Show comments for 'admins' table object with id 25

=cut

#Initialization
my $Info = Info->new( $db, $admin, \%conf );

my $debug = 0;

my $close_outer_modal_script = qq\
  <script>
    setTimeout(function(){aModal.hide()}, 2000);
    Events.emit('info_something_changed', true);
  </script>
  \;

#**********************************************************
=head2 info_comments_show
  
  Entry point for showing comments
  
  Arguments:
    $type - table name for object
    $id   - object id
  
  Prints a list of comments for specified object with controls for removing and adding
  
=head2 EXAMPLE

  info_comments_show('users', 6); # Will show a list for object from table 'users' and id 6;

=cut
#**********************************************************
sub info_comments_show{
  my ($type, $id, $attr) = @_;

  #form comments for current object
  my $comments_list = $Info->get_comments( $type, $id, { COLS_NAME => 1 } );
  
  my $comments = info_comments_make( $comments_list );
  
  #form comments controls
  my $form_controls = $html->tpl_show(
    _include( 'comments/info_comments_controls', 'Info' ),
    {
      TABLE_NAME => $type,
      OBJECT_ID  => $id,
      ADD_COMMENT_INDEX => get_function_index('info_comment_add')
    },
    { OUTPUT2RETURN => 1 }
  );

  #print comments main
  my $comments_block = $html->tpl_show(
    _include( 'comments/info_comments_wrapper', 'Info' ),
    {
      COMMENTS          => join( '', @{$comments} ),
      COMMENTS_CONTROLS => $form_controls,
      TABLE_NAME        => $type,
      OBJECT_ID         => $id,
    },
    { OUTPUT2RETURN => 1, %{$attr} }
  );

  if ( $attr->{OUTPUT2RETURN} ){
    return $comments_block;
  }
  else{
    print $comments_block;
  }

  return 1;
}

#**********************************************************
=head2 info_comments_renew

  This function is used to renew comments list after adding new comment

  Works similar to info_comments_show except wrapping comments_list to 'info_comments_wrapper' template

=cut
#**********************************************************
sub info_comments_renew{
  my $type = $FORM{OBJ_TYPE};
  my $id = $FORM{OBJ_ID};
  
  my $comments = info_comments_make(
    $Info->get_comments( $type, $id, { COLS_NAME => 1 } )
  );

  print join( '', @{$comments} );
}


#**********************************************************
=head2 info_comments_make
  
  Contains logic for wrapping each comments list entry in 'info_comment.tpl'
  
  Arguments:
    $comments_list - array reference for array of hashes from DB
    $attr          - extra arguments (reserved for future)
  
=cut
#**********************************************************
sub info_comments_make{
  my ($comments_list) = @_;
  
  my @filled_templates = ();
  
  my $comments_remove_index = get_function_index( 'info_comment_del' );
  
  foreach my $comment (@{$comments_list}){
    push @filled_templates, $html->tpl_show(
        _include( 'comments/info_comment', 'Info' ),
        {
          ID           => $comment->{id},
          TEXT         => $comment->{text},
          DATE         => $comment->{date},
          ADMIN        => $comment->{name},
          DELETE_INDEX => $comments_remove_index
        },
        { OUTPUT2RETURN => 1, ID => 'info_comment' }
      );
  }
  
  return \@filled_templates;
}


#**********************************************************
=head2 info_comment_del

  Calls $Info for removing comments and returns status
  As it is called from JS, it returns a JSON response, that is processed by script

  Arguments:
    no straight arguments are used. Reads $FORM{OBJ_ID} and passes it to $Info->del_comment();

=cut
#**********************************************************
sub info_comment_del{
  $Info->del_comment( \%FORM );

  if ( !$Info->{errno} ){
    print qq/ {"status" : 0} /;
  }
  else{
    print qq/ {
      "status" : $Info->{errno},
      "error"  : $Info->{errstr}
      } /;
  }
}

#**********************************************************
=head2 info_comment_add()

  Passes  $FORM{OBJ_TYPE}, $FORM{OBJ_ID}, $FORM{TEXT} to $Info->add_comment.
  Prints message for successful or failed operation

=cut
#**********************************************************
sub info_comment_add{
  if ( $FORM{TEXT} eq '' ){
    $html->message( 'danger', "$lang{COMMENTS_PLEASE}" );
    return 0;
  }

  $Info->add_comment(
    \%FORM
  );

  if ( !$Info->{errno} ){
    $html->message( 'success', "$lang{ADDED}" );
  }
  else{
    $html->message( 'danger', "$Info->{errstr}" );
  }

  return 1;
}


#**********************************************************
=head2 info_images_show
  
  Entry point for showing images
  
  Arguments:
    $type - table name for object
    $id   - object id
  
  Prints a list of images for specified object with controls for removing and adding
  
=head2 EXAMPLE

  info_images_show('users', 6); # Will show a list for object from table 'users' and id 6;

=cut
#**********************************************************
sub info_images_show{
  my ($type, $id, $attr) = @_;

  #form images for current object
  my $images_list = $Info->get_images( $type, $id, { COLS_NAME => 1 } );

  if ( $Info->{errno} ){
    $html->message( 'danger', 'SQL', $Info->{errstr} );
  }

  my $images = info_images_make( $images_list );

  my $image_form = $html->tpl_show(
    _include( 'info_ajax_upload_form', 'Info' ),
    {
      TABLE_NAME    => $type,
      OBJECT_ID     => $id,
      CALLBACK_FUNC => 'info_image_add'
    },
    { OUTPUT2RETURN => 1 }
  );
  #form images controls
  my $form_controls = $html->tpl_show(
    _include( 'images/info_image_controls', 'Info' ),
    {
      TABLE_NAME => $type,
      OBJECT_ID  => $id,
      IMAGE_FORM => $image_form
    },
    { OUTPUT2RETURN => 1 }
  );

  #print images main
  my $images_block = $html->tpl_show(
    _include( 'images/info_image_wrapper', 'Info' ),
    {
      IMAGES          => join( '', @{$images} ),
      IMAGES_CONTROLS => $form_controls,
    },
    { OUTPUT2RETURN => 1, %{$attr} }
  );

  if ( $attr->{OUTPUT2RETURN} ){
    return $images_block;
  }
  else{
    print $images_block;
  }

  return 1;
}

#**********************************************************
=head2 info_images_make
  
  Contains logic for wrapping each images list entry in 'info_image.tpl'
  
  Arguments:
    $images_list   - array reference for array of hashes from DB
    $attr          - extra arguments (reserved for future)
  
=cut
#**********************************************************
sub info_images_make{
  my ($images_list) = @_;

  my @images = ();
  for my $image ( @{$images_list} ){
    if ( $debug ){
      print "</hr> in db: " . $image->{in_db};
    }

    my $image_path = '';
    unless ( $image->{in_db} ){
      $image_path = img_dir . $image->{filename};
    }
    else{
      my $download_image_index = get_function_index( 'info_image_download' );
      $image_path = "/admin/index.cgi?qindex=$download_image_index&IMAGE_ID=$image->{id}";
    }

    push @images, $html->tpl_show(
        _include( 'images/info_image', 'Info' ),
        {
          IMAGE_ID   => $image->{id},
          IMAGE_NAME => $image_path,
          FILENAME   => $image->{real_name}
        },
        { OUTPUT2RETURN => 1 }
      );
    #    print "<hr>" . $image_row->{filename};
  }

  push @images, "<link href='/styles/default_adm/css/info.css' rel='stylesheet'>";

  return \@images;
}


#**********************************************************
=head2 info_image_del

  Calls $Info for removing images and returns status
  As it is called from JS, it returns a JSON response, that is processed by script

  Arguments:
    $attr or %FORM
      OBJ_ID - ID of image to delete

=cut
#**********************************************************
sub info_image_del{
  my ($attr) = @_;

  my $image_id = $FORM{OBJ_ID} || $attr->{OBJ_ID};

  unless ( $image_id ){ return 0};

  my $image = $Info->get_image_info( $image_id, { COLS_NAME => 1 } );

  my $filename = $image->{filename};

  unless ( $image->{in_db} ){
    info_uni_file_delete( img_upload_dir, $filename );
  }

  $Info->del_image( \%FORM );

  if ( !$Info->{errno} ){
    print qq/ {"status" : 0} /;
  }
  else{
    print qq/ {
      "status" : $Info->{errno},
      "error"  : $Info->{errstr}
      } /;
  }
}

#**********************************************************
=head2 info_image_add

  Passes  $FORM{TYPE}, $FORM{OBJ_ID} to $Info->add_image. If success, uploads_image to $images_folder;
  Prints message for successful or failed operation

=cut
#**********************************************************
sub info_image_add{
  my $type = $FORM{OBJ_TYPE};
  my $obj_id = $FORM{OBJ_ID};

  my $write_to_db = $FORM{WRITE_TO_DB};

  my ($file_type) = $FORM{UPLOAD_FILE}->{filename} =~ /(\.[^.]+)$/;

  unless ( $type && $obj_id ){ $html->message( 'danger', $lang{ERROR}, "No data" ) };

  my $filename = $type . '_' . $obj_id . '_' . time() . $file_type;

  unless ( $write_to_db ){
    my $is_uploaded = upload_file( $FORM{UPLOAD_FILE}, {
        PREFIX     => img_upload_dir,
        FILE_NAME  => $filename,
        EXTENTIONS => $image_allowed_extensions
      } );

    unless ( $is_uploaded ){
      print "Allowed extensions are $image_allowed_extensions";
      return 0;
    }
  }

  $Info->add_image(
    {
      OBJ_TYPE     => $FORM{OBJ_TYPE},
      OBJ_ID       => $FORM{OBJ_ID},
      FILENAME     => $filename,
      REAL_NAME    => $FORM{UPLOAD_FILE}->{filename},
      CONTENT_TYPE => $FORM{UPLOAD_FILE}->{'Content-Type'},
      CONTENT_SIZE => $FORM{UPLOAD_FILE}->{Size},
      FILE         => ($write_to_db) ? $FORM{UPLOAD_FILE}->{Contents} : undef,
    }
  );

  if ( !$Info->{errno} ){
    $html->message( 'success', "$lang{ADDED}" );
    #      print $close_outer_modal_script;
  }
  else{
    $html->message( 'danger', "$Info->{errstr}" );
    info_uni_file_delete( img_upload_dir, $filename );
  }

  return 1;
}

#**********************************************************
=head2 info_download_image

=cut
#**********************************************************
sub info_image_download{
  my $image_id = $FORM{IMAGE_ID};

  unless ( $image_id ){ return 0; };

  my $image = $Info->get_image_info( $image_id, { COLS_NAME => 1 } );

  unless ( $image->{id} ){
    print "Status: 404 Not found";
    #    exit(1);
  }

  my $filename = $image->{filename};
  my $realname = $image->{real_name};
  my $content_type = $image->{content_type};
  my $size = $image->{content_size};

  my $content = '';
  unless ( $image->{in_db} ){
    $content = file_op(
      {
        FILENAME     => $filename,
          PATH       => $conf{TPL_DIR} . img_upload_dir,
          SKIP_CHECK => 1
      }
    );

    if ( $size > 0 && $content eq '' ){
      print "Status: 404 Not found";
      exit( 1 );
    }
  }
  else{
    $content = $image->{file};
  }

  print "Content-Type: $content_type;  filename=\"$realname\"\n" . "Content-Disposition:  attachment;  filename=\"$realname\";  size=$size" . "\n\n";
  print $content;

  return 1;
}

#**********************************************************
=head2 info_locations_show($type, $id)

=cut
#**********************************************************
sub info_locations_show{
  my ($type, $id) = @_;

  my $controls = $html->tpl_show( _include( '/locations/locations_controls', 'Info' ),
    {
      OBJECT_TYPE => $type,
      OBJECT_ID   => $id,
    },
    {
      OUTPUT2RETURN => 1
    }
  );

  $html->tpl_show( _include( '/locations/locations_wrapper', 'Info' ),
    {
      LOCATION_CONTROLS => $controls
    }
  );

  return 1;
}

#**********************************************************
=head2 info_locations_show_map()

=cut
#**********************************************************
sub info_locations_show_map{
  shift;

  my $type = $_[0] || $FORM{OBJ_TYPE};
  my $obj_id = $_[1] || $FORM{OBJ_ID};

  #  get locations
  my $locations = $Info->get_locations( $type, $obj_id, { COLS_NAME => 1 } );
  _error_show( $Info );

  if ( in_array( 'Maps', \@MODULES ) ){
    load_module( 'Maps', $html );

    foreach my $location ( @{$locations} ){
      $location->{street_name} = $type;
      $location->{number} = $obj_id;
      my $comment = ($location->{comment}) ? "<b>$lang{COMMENTS}: </b>$location->{comment}" : '';
      my $timestamp = ($location->{timestamp} ne '0000-00-00 00:00:00') ? "<br/><b>$lang{TIME}: </b>$location->{timestamp}" : '';

      $location->{info} = qq\
      <div class='row text-left'>
        <div class='row pull-right'>
           <a class='locationRemoveBtn' title='$lang{DEL}' onclick=removeLocation($location->{id})>
             <span class='glyphicon glyphicon-remove-sign'></span>
           </a>
        </div>
      $comment
      $timestamp
      <br/>
        <br/><b>$lang{ADMIN}: </b>$location->{admin}
        <br/><b>$lang{ADDED}: </b>$location->{date}
      </div>\;
      # JSON doesn't allow carret return symbol
      $location->{info} =~ s/\n//g;
    }

    maps_show_map(
      {
        OBJECTS_LIST => $locations,
          POINT_TYPE => 'default',
          QUICK      => 1,
          NO_BUILDS  => 1,
      }
    );
  }
  else{
    $html->message('err', "$lang{ERROR}", "No 'Maps' module");
  }

  return 1;
}

#**********************************************************
=head2 info_location_add()

=cut
#**********************************************************
sub info_location_add {
  my $type = $FORM{OBJ_TYPE};
  my $obj_id = $FORM{OBJ_ID};

  if ( !(defined $type && defined $obj_id) ){
    $html->message( 'danger', "$lang{ERROR}", 'Parameters error' );
    return 0;
  }

  $Info->add_location(
    $type, $obj_id,
    {
      %FORM
    } );

  unless ( $Info->{errno} ){
    $html->message( 'success', "$lang{ADDED}" );
    print $close_outer_modal_script;
  }
  else{
    _error_show( $Info );
  }

  return $Info->{INSERT_ID};
}

#**********************************************************
=head2 info_location_del
  
  Calls $Info for removing locations and returns status
  As it is called from JS, it returns a JSON response, that is processed by script
  
  Arguments:
    no straight arguments are used. Reads $FORM{OBJ_ID} and passes it to $Info->del_location();
  
=cut
#**********************************************************
sub info_location_del{
  my $location_id = $FORM{OBJ_ID};

  $Info->del_location( { OBJ_ID => $location_id } );

  if ( !$Info->{errno} ){
    print qq\ {
    "status" : 0,
    "message"  : "<h1>$lang{DELETED}</h1>"
    } \;
  }
  else{
    print qq/ {
      "status" : $Info->{errno},
      "message"  : $Info->{errstr}
      } /;
  }
}

#**********************************************************
=head2 info_documents_show

=cut
#**********************************************************
sub info_documents_show{
  my ($type, $id, $attr) = @_;

  #form documents for current object
  my $documents_list = $Info->get_documents( $type, $id, { COLS_NAME => 1 } );
  return 0 if _error_show( $Info );

  my $documents = info_documents_make( $documents_list );

  my $document_form = $html->tpl_show(
    _include( 'info_ajax_upload_form', 'Info' ),
    {
      TABLE_NAME    => $type,
      OBJECT_ID     => $id,
      CALLBACK_FUNC => 'info_document_add',
    },
    { OUTPUT2RETURN => 1 }
  );

  my $document_controls = $html->tpl_show(
    _include( 'documents/info_documents_controls', 'Info' ),
    {
      TABLE_NAME => $type,
      OBJECT_ID  => $id,
      ADD_FORM   => $document_form
    },
    { OUTPUT2RETURN => 1 }
  );

  #print documents main
  my $documents_block = $html->tpl_show(
    _include( 'documents/info_document_wrapper', 'Info' ),
    {
      DOCUMENTS_TABLE    => $documents,
      DOCUMENTS_CONTROLS => $document_controls,
      TABLE_NAME         => $type,
      OBJECT_ID          => $id,
    },
    { OUTPUT2RETURN => 1, %{$attr} }
  );

  if ( $attr->{OUTPUT2RETURN} ){
    return $documents_block;
  }
  else{
    print $documents_block;
  }

  return 1;
}

#**********************************************************
=head2 info_documents_renew
  
  This function is used to renew documents list after adding new document
  
  Works similar to info_documents_show except wrapping documents_list to 'info_documents_wrapper' template
  
=cut
#**********************************************************
sub info_documents_renew{
  my $type = $FORM{OBJ_TYPE};
  my $id = $FORM{OBJ_ID};

  #form documents for current object
  my $documents_list = $Info->get_documents( $type, $id, { COLS_NAME => 1 } );

  if ( $Info->{errno} ){
    _error_show( $Info );
  }

  my $documents = info_documents_make( $documents_list );

  print $documents;
}


#**********************************************************
=head2 info_documents_make
  
  Contains logic for wrapping each documents list entry in 'info_document.tpl'
  
  Arguments:
    $documents_list - array reference for array of hashes from DB
    $attr           - extra arguments (reserved for future)
  
=cut
#**********************************************************
sub info_documents_make{
  my ($documents_list) = @_;

  my $table = $html->table(
    {
      width       => '100%',
      caption     => $lang{DOCUMENTS},
      cols_align  => [ 'left', 'left', 'left', 'left', 'right:noprint' ],
      title_plain => [ 'ID', $lang{NAME}, "$lang{ADMIN}", "$lang{DATE}", '-' ],
      qs          => $pages_qs,
      ID          => 'INFO_DOCUMENTS'
    }
  );

  foreach my $line ( @{$documents_list} ){
    my $document_id = $line->{id};
    my $download_index = get_function_index( 'info_document_download' );

    my $download_path = "/admin/index.cgi?qindex=$download_index&DOCUMENT_ID=$document_id";
    my $download_btn = "<a href='$download_path' class='btn btn-xs btn-default' download><span class='glyphicon glyphicon-save'></span></a>";

    my $deleteURL = "/admin/index.cgi?get_index=info_document_del&OBJ_ID=$line->{id}&header=2";
    my $delete_btn = "<a id='documentDelBtn' class='btn btn-xs btn-danger' onclick='loadToModal(\"$deleteURL\")'>
      <span class='glyphicon glyphicon-remove'></span></a>";

    my $action_btns = "<div class='btn-group btn-group-xs'>$delete_btn$download_btn</div>";

    $table->addrow( $line->{id}, $line->{real_name}, $line->{admin}, $line->{date}, $action_btns );
  }

  return $table->show();
}


#**********************************************************
=head2 info_document_del
  
  Calls $Info for removing documents and returns status
  As it is called from JS, it returns a JSON response, that is processed by script
  
  Arguments:
    no straight arguments are used. Reads $FORM{DOCUMENT_ID} and passes it to $Info->del_document();
  
=cut
#**********************************************************
sub info_document_del{
  my ($attr) = @_;

  my $document_id = $FORM{OBJ_ID} || $attr->{OBJ_ID};

  my $document = $Info->get_document_info( $document_id, { COLS_NAME => 1 } );

  my $filename = $document->{filename};


  unless ( $document->{in_db} ){
    info_uni_file_delete( documents_upload_dir, $filename );
  }

  $Info->del_document( \%FORM );

  if ( !$Info->{errno} ){
    $html->message( 'success', "$lang{DELETED}" );
  }
  else{
    $html->message( 'danger', "$Info->{errstr}" );
  }

  if ( $FORM{IN_MODAL} ){
    print $close_outer_modal_script;
  }

  return 1;

}

#**********************************************************
=head2 info_document_add

  Passes  $FORM{OBJ_TYPE}, $FORM{OBJ_ID} to $Info->add_document. If success, uploads_document to $documents_folder;
  Prints message for successful or failed operation

=cut
#**********************************************************
sub info_document_add{
  my $type = $FORM{OBJ_TYPE};
  my $obj_id = $FORM{OBJ_ID};

  my $write_to_db = $FORM{WRITE_TO_DB};

  my ($file_type) = $FORM{UPLOAD_FILE}->{filename} =~ /(\.[^.]+)$/;

  unless ( $type && $obj_id ){
    print "No data";
    return 0
  };

  my $filename = $type . '_' . $obj_id . '_' . time() . $file_type;

  unless ( $write_to_db ){
    my $is_uploaded = upload_file( $FORM{UPLOAD_FILE}, {
        PREFIX    => documents_upload_dir,
        FILE_NAME => $filename,
        #        EXTENTIONS => $document_allowed_extensions
      } );

    unless ( $is_uploaded ){
      print "Allowed extensions are $image_allowed_extensions";
      return 0;
    }
  }

  $Info->add_document( $type, $obj_id,
    {
      FILENAME     => $filename,
      REAL_NAME    => $FORM{UPLOAD_FILE}->{filename},
      CONTENT_TYPE => $FORM{UPLOAD_FILE}->{'Content-Type'},
      CONTENT_SIZE => $FORM{UPLOAD_FILE}->{Size},
      FILE         => ($write_to_db) ? $FORM{UPLOAD_FILE}->{Contents} : undef
    }
  );

  if ( !$Info->{errno} ){
    $html->message( 'success', "$lang{ADDED}" );
    print $close_outer_modal_script;
  }
  else{
    $html->message( 'danger', "$Info->{errstr}" );
  }

  return 1;
}

#**********************************************************
=head2 info_download_document

=cut
#**********************************************************
sub info_document_download{
  my $document_id = $FORM{DOCUMENT_ID};

  unless ( $document_id ){return 0};
  
  my $document = $Info->get_document_info( $document_id, { COLS_NAME => 1 } );

  unless ( $document->{id} ){
    print "Status: 404 Not found";
  }

  my $filename = $document->{filename};
  my $realname = $document->{real_name};
  my $content_type = $document->{content_type};
  my $size = $document->{content_size};

  my $inDB = $document->{in_db} ne '0';

  my $content = '';
  unless ( $inDB ){
    $content = file_op(
      {
        FILENAME     => $filename,
          PATH       => $conf{TPL_DIR} . documents_upload_dir,
          SKIP_CHECK => 1
      }
    );

    if ( $size > 0 && $content eq '' ){
      print "Status: 404 Not found";
      exit( 1 );
    }

  }
  else{
    $content = $document->{file};
  }

  print "Content-Type: $content_type;  filename=\"$realname\"\n" . "Content-Disposition:  attachment;  filename=\"$realname\";  size=$size" . "\n\n";
  print $content;

  return 1;
}


#**********************************************************
=head2 info_uni_file_delete

  deletes a file

=cut
#**********************************************************
sub info_uni_file_delete{
  my ($folder, $filename) = @_;

  if ( $debug ){
    print "<hr> Deleting $conf{TPL_DIR}/$folder/$filename";
  }

  my $file = "$conf{TPL_DIR}$folder/$filename";
  my $del_result = unlink $file;

  unless ( $del_result == 1 ){
    #deleted 1 file
    my $error_message = $!;
    $html->message( 'danger', 'Error', $error_message );
    return 0;
  }
  return 1;
}

#**********************************************************
=head2
function info_uni_result_former
 Arguments
 $attr - hash;
   LIST_FUNC
   DEFAULT_FIELDS
   EXT_TITLES
   READABLE_NAME
   TABLE_NAME

=cut
#**********************************************************
sub info_uni_result_former{
  my ($attr) = @_;

  my Abills::HTML $table;
  my $list = [];
  
  ($table, $list) = result_former( {
      INPUT_DATA        => $Info,
        FUNCTION        => $attr->{LIST_FUNC},
        BASE_FIELDS     => 0,
        DEFAULT_FIELDS  => "$attr->{DEFAULT_FIELDS}",
        FUNCTION_FIELDS => 'del',
        SKIP_USER_TITLE => 1,
        EXT_FIELDS      => 0,
        EXT_TITLES      => $attr->{EXT_TITLES},

        TABLE           => {
        width   => '100%',
        caption => $attr->{READABLE_NAME},
        qs      => $pages_qs,
        ID      => uc $attr->{LIST_FUNC},
        EXPORT  => 1,
        MENU    =>
        "$lang{ADD}:index=" . get_function_index( $attr->{TABLE_NAME} . '_add' ) . ':add' . ";$lang{SEARCH}:index=$index&search_form=1:search"
        ,
      },

        MAKE_ROWS       => 1,
        SEARCH_FORMER   => 1,
        MODULE          => 'Info',
        TOTAL           => 0
    } );

  print $table->show();

  return $list;
}
1;