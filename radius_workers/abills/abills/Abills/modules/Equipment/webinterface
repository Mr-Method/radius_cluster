#!perl

=head1 NAME

  Network device managment

  Error ID: 4xx

=cut

use strict;
use warnings FATAL => 'all';
use POSIX qw/strftime/;
use Equipment;
use Abills::Base qw(in_array int2byte ip2int mk_unique_value
  load_pmodule date_format _bp int2ip);
use Abills::Filters qw(_mac_former dec2hex);
use Nas;
use Internet;
#hjfjhgjg
our (
  $db,
  $admin,
  %conf,
  $html,
  %lang,
  $var_dir,
  $DATE,
  $TIME,
  %permissions,
);

load_pmodule("JSON");

our $Equipment = Equipment->new($db, $admin, \%conf);

require Equipment::Snmp_cmd;
require Equipment::Ports;
require Equipment::Pon_mng;
require Equipment::Boxes;
require Equipment::Traps;
require Equipment::Grabbers;
require Equipment::Backup;
require Equipment::Netmap;
require Equipment::Tr_069;
require Equipment::Reports;


my $Nas = Nas->new($db, \%conf, $admin);
my $Internet = Internet->new($db, $admin, \%conf);

#my @ports_state = ('', $lang{ACTIV}, $lang{DISABLE}, 'Damage', 'Corp vlan', 'Dormant', 'Not Present', 'lowerLayerDown');
#my @ports_state_color = ('', '#008000', '#FF0000');

our @_COLORS = (
  '#FDE302', # 0 TH
  '#FFFFFF', # 1 TD.1
  '#eeeeee', # 2 TD.2
  '#dddddd', # 3 TH.sum, TD.sum
  '#E1E1E1', # 4 border
  '#FFFFFF', # 5
  '#FF0000', # 6 Error
  '#000088', # 7 vlink
  '#0000A0', # 8 Link
  '#000000', # 9 Text
  '#FFFFFF', #10 background
);
our %PORT_STATUS = (
  '0' => '0',
  '1' => 'UP',
  '2' => 'DOWN',
);

my $debug = 0;
my $used_ports;
my @service_status_colors = ("$_COLORS[9]", "840000", '#808080', '#0000FF', "$_COLORS[6]", '#009999', '#0099ee');
our @service_status = ($lang{ENABLE}, $lang{DISABLE}, $lang{NOT_ACTIVE}, $lang{ERROR}, $lang{BREAKING}, $lang{NOT_MONITORING});
our $SNMP_TPL_DIR = "../../Abills/modules/Equipment/snmp_tpl/";
our %html_color = (
  'red'       => '#f56954',
  'green'     => '#00a65a',
  'orange'    => '#f39c12',
  'blue'      => '#00c0ef',
  'dark_blue' => '#3c8dbc');

#my $json = JSON->new->allow_nonref;
#saving mappings of port_types. Order should be saved.
#our @port_types = ('', 'RJ45', 'GBIC', 'Gigabit', 'SFP');
#our @skip_ports_types = [135,142,136,1,24,250,300,53];

if ($permissions{4}) {
  require Equipment::Configure;
}

my $EQUIPMENT_MAPS_LAYER_ID = 7;
my $PON_MAPS_LAYER_ID = 20;

#********************************************************
=head2 equipment_panel($attr)

  Arguments:
    $attr

=cut
#********************************************************
sub equipment_panel {
  my ($attr) = @_;
  my %ports_visualisation = (
    #    0 => $lang{SHORT},
    1  => "VLAN",
    2  => $lang{PORTS},
    3  => "ARP",
    # 4 reserved for PON
    # 5 reserved for PON ports
    6  => "MAC",
    # 7 reserved for Snmputils
    8  => $lang{SNMP_SURVEY},
    9  => "Backup",
    # 9 => "$lang{CHANGE}"
    10 => "Log",
  );

  if (in_array('Snmputils', \@MODULES)) {
    $ports_visualisation{7} = "SNMP $lang{INFO}";
  }
  $pages_qs .= ($FORM{NAS_ID}) ? "&NAS_ID=$FORM{NAS_ID}" : q{};

  if ($attr->{TYPE_ID} && $attr->{TYPE_ID} == 4) {
    $ports_visualisation{4} = "PON";
    #$ports_visualisation{5} = "PON $lang{PORTS}";
    #    $pages_qs .= "&PON=1"
  }

  my $buttons = $html->li($html->button($lang{MAIN}, "index=$index$pages_qs", { class => '' }),
    { class => ((!defined($FORM{visual})) ? 'active' : '') });

  foreach my $key (sort {$a <=> $b} keys %ports_visualisation) {
    my $value = $ports_visualisation{$key};
    $buttons .= $html->li($html->button($value,
      "index=" . (($key && $key == 7) ? get_function_index('snmp_info_form') : $index) . "&visual=$key$pages_qs")
      ,
      { class => (defined($FORM{visual}) && $FORM{visual} eq $key) ? 'active' : '' });
  }

  if ($buttons) {
    my $nas_list = $Equipment->_list({
      NAS_NAME  => '_SHOW',
      COLS_NAME => 1,
      PAGE_ROWS => 10000,
      TYPE_NAME => ($FORM{visual} && $FORM{visual} eq '4') ? 4 : undef
    });

    my $nas_select = $html->form_select(
      'NAS_ID',
      {
        SELECTED       => $attr->{NAS_ID} || $FORM{NAS_ID},
        SEL_LIST       => $nas_list,
        SEL_KEY        => 'nas_id',
        SEL_VALUE      => 'nas_id,nas_name',
        NO_ID          => 1,
        MAIN_MENU      => get_function_index('equipment_info'),
        MAIN_MENU_ARGV => "NAS_ID=" . ($FORM{NAS_ID} || '')
      }
    );
    my $visual = (defined($FORM{visual})) ? 'visual' : '_visual';
    my $nas_select_form = $html->form_main(
      {
        CONTENT => $nas_select . $html->form_input('SHOW', $lang{SHOW}, { TYPE => 'submit' }),
        HIDDEN  => {
          'index' => $index,
          $visual => $FORM{visual} || 0,
        },
        NAME    => 'equipment_nas_panel',
        ID      => 'equipment_nas_panel',
        class   => 'navbar-form navbar-right form-group',
      }
    );

    my $buttons_list = $html->element('ul', $buttons, { class => 'nav navbar-nav' });

    my $menu = $html->element('div',
      $buttons_list . $nas_select_form,
      { class => 'navbar navbar-default' });

    print $menu;
  }

  return 1;
}


#********************************************************
=head2 equipment_info()

=cut
#********************************************************
sub equipment_info {
  $Equipment->{ACTION} = 'add';
  $Equipment->{ACTION_LNG} = $lang{ADD};

  if ($FORM{get_index} && $FORM{TR_069}) {
    tr_069_main();
    return;
  }

  my $nas_id = $FORM{NAS_ID};

  $Nas->info({ NAS_ID => $nas_id });
  my $SNMP_COMMUNITY = '';

  if ($Nas->{TOTAL} < 1) {
    $html->message('err', $lang{ERROR}, "$lang{DELETED} NAS_ID: " . ($Nas->{NAS_ID} || q{}));
  }
  else {
    $SNMP_COMMUNITY = ($Nas->{NAS_MNG_PASSWORD} || '') . '@' . (($Nas->{NAS_MNG_IP_PORT}) ? $Nas->{NAS_MNG_IP_PORT} : $Nas->{NAS_IP});
    $Equipment->{NAS_MNG_IP_PORT}  = $Nas->{NAS_MNG_IP_PORT};
    $Equipment->{NAS_MNG_USER}     = $Nas->{NAS_MNG_USER};
    $Equipment->{NAS_MNG_PASSWORD} = $Nas->{NAS_MNG_PASSWORD};
  }
  $Equipment->_info($nas_id);

  #  my $ports = $FORM{PORTS} || $Equipment->{PORTS};

  if (!$Equipment->{errno}) {
    $FORM{COMMENTS} = $Equipment->{COMMENTS} if !defined($FORM{COMMENTS});
    $Equipment->model_info($Equipment->{MODEL_ID});

    if ($Equipment->{MANAGE_WEB}) {
      if ($Nas->{NAS_IP}) {
        $Equipment->{MANAGE_WEB} =~ s/%IP/$Nas->{NAS_IP}/g;
        if ($Equipment->{MANAGE_WEB} !~ /^http.*\:\/\//) {
          $Equipment->{MANAGE_WEB} = 'http://' . $Equipment->{MANAGE_WEB};
        }
        $Equipment->{MANAGE_WEB} = $html->button(
          'WEB',
          '',
          {
            GLOBAL_URL => $Equipment->{MANAGE_WEB},
            BUTTON     => 1,
            ex_params  => "target='_blank'",
          }
        );
      }
    }
    if (!($FORM{header} || $FORM{qindex})) {
      equipment_panel($Equipment);
    }
  }

  if ($FORM{add} && !defined($FORM{visual})) {
    $Equipment->_add({ %FORM });

    if (!$Equipment->{errno}) {
      $html->message('info', $lang{INFO},
        "$lang{ADDED} # $nas_id \n"
          . $html->button("$lang{MANAGE}", "index=$index&NAS_ID=" . ($Nas->{NAS_ID} || q{}), { BUTTON => 1 }));
    }
  }
  elsif ($FORM{change} && !defined($FORM{visual})) {
    $Equipment->{ACTION} = 'change';
    $Equipment->{ACTION_LNG} = $lang{CHANGE};
    $Equipment->_change({ %FORM });
    if (!$Equipment->{errno}) {
      $html->message('info', $lang{INFO}, $lang{CHANGED});
    }
  }
  elsif ($FORM{get_info}) {
    my $snmp_result = equipment_test({
      TEST_OID       => 1,
      SNMP_COMMUNITY => $SNMP_COMMUNITY,
      VERSION        => $FORM{SNMP_VERSION} || $Equipment->{SNMP_VERSION},
      SNMP_TPL       => $Equipment->{SNMP_TPL} || '',
    });

    my $table = $html->table({
      caption => $lang{INFO},
      #title   => [ 'ID', $lang{VALUE} ],
      ID      => 'EQUIPMENT_INFO'
    });

    foreach my $key (sort keys %$snmp_result) {
      $table->addrow($key, $snmp_result->{$key});
    }
    print $table->show();

    foreach my $key (keys %{$snmp_result}) {
      $FORM{$key} = $snmp_result->{$key};
      $FORM{COMMENTS} = $snmp_result->{$key} if ($key eq 'SYSTEM_DESCR');
    }

    #$Equipment->_info( $nas_id );
    if (!$Equipment->{errno} || $Equipment->{errno} != '2') {
      $Equipment->{ACTION} = 'change';
      $Equipment->{ACTION_LNG} = $lang{CHANGE};
    }
  }
  elsif ($FORM{del} && $FORM{del} eq 'nas_id' && defined($FORM{COMMENTS}) && !defined($FORM{visual})) {
    $Equipment->_del($nas_id);
    if (!$Equipment->{errno}) {
      $html->message('info', $lang{INFO}, "$lang{DELETED} [" . ($Nas->{NAS_ID} || q{}) . "]");
    }
  }
  elsif (!$Equipment->{errno} || $Equipment->{errno} != '2') {
    $Equipment->vendor_info($Equipment->{VENDOR_ID});
    #   $Equipment->{PORTS} = $ports if ($ports);
    $Equipment->{ACTION} = 'change';
    $Equipment->{ACTION_LNG} = $lang{CHANGE};
  }

  if (_error_show($Equipment, {
    ID         => 449,
    ERROR_IDS  => { 2 => $lang{ERR_NOT_REGISTRED} },
    RIZE_ERROR => 1,
    MESSAGE    => $lang{EQUIPMENT}
  })) {
    return 0 if ($FORM{visual});
  }

  $Equipment->{PORTS} = $FORM{PORTS} || $Equipment->{PORTS};
  #Show device info
  if (!defined($FORM{visual})) {

    if (($FORM{TYPE_ID} && $FORM{TYPE_ID} != 4) || ($Equipment->{TYPE_ID} && $Equipment->{TYPE_ID} != 4)) {
      $used_ports = equipments_get_used_ports({ NAS_ID => $nas_id, PORTS_ONLY => 1 });
      $Equipment->{FREE_PORTS} = ($Equipment->{PORTS} || 0) - scalar(keys %{$used_ports});
    }

    $Equipment->{TYPE_SEL} = $html->form_select(
      'TYPE_ID',
      {
        SELECTED       => $FORM{TYPE_ID} || $Equipment->{TYPE_ID},
        SEL_LIST       => $Equipment->type_list({ COLS_NAME => 1 }),
        NO_ID          => 1,
        EX_PARAMS      => "onchange='autoReload()'",
        MAIN_MENU      => get_function_index('equipment_types'),
        MAIN_MENU_ARGV => "chg=" . ($Equipment->{TYPE_ID} || '')
      }
    );

    $Equipment->{MODEL_SEL} = $html->form_select(
      'MODEL_ID',
      {
        SELECTED       => $FORM{MODEL_ID} || $Equipment->{MODEL_ID},
        SEL_LIST       => $Equipment->model_list(
          {
            COLS_NAME => 1,
            TYPE_ID   => $FORM{TYPE_ID} || $Equipment->{TYPE_ID},
            PAGE_ROWS => 500
          }
        ),
        SEL_VALUE      => 'vendor_name,model_name',
        WRITE_TO_DATA  => 'vendor_name',
        NO_ID          => 1,
        MAIN_MENU      => get_function_index('equipment_model'),
        MAIN_MENU_ARGV => "chg=" . ($Equipment->{MODEL_ID} || ''),
        EXT_BUTTON     => $html->button(undef, undef, {
          GLOBAL_URL => 'http://abills.net.ua/wiki/doku.php/abills:docs:manual:admin:equipment:equipment_info',
          ID         => 'MODEL_ID_WIKI_LINK',
          ICON       => 'fa fa-question',
          target     => '_blank',
          ex_params  => 'style="margin-left:10px;"'
        })
      }
    );

    $Equipment->{STATUS_SEL} = $html->form_select(
      'STATUS',
      {
        SELECTED => $FORM{STATUS} || $Equipment->{STATUS} || 0,
        SEL_HASH => {
          0 => $lang{ENABLE},
          1 => $lang{DISABLE},
          2 => $lang{NOT_ACTIVE},
          3 => $lang{ERROR},
          4 => $lang{BREAKING},
          5 => $lang{NOT_MONITORING}
        },
        NO_ID    => 1,
        STYLE    => \@service_status_colors,
      }
    );

    #    if ( in_array( 'Info', \@MODULES ) ){
    #      load_module( 'Info', $html );
    #      $Equipment->{EX_INFO} = info_comments_show( 'equipment_info', $Nas->{NAS_ID}, { OUTPUT2RETURN => 1 } );
    #    }

    $Equipment->{SNMP_VERSION_SEL} = $html->form_select('SNMP_VERSION',
      {
        SELECTED => $FORM{SNMP_VERSION} || $Equipment->{SNMP_VERSION},
        SEL_HASH => { 1 => 'v1', 2 => 'v2c' },
        NO_ID    => 1
      }
    );

    my $server_vlan_list = $Equipment->vlan_list({ PAGE_ROWS => 2000, COLS_NAME => 1 });

    if ($Equipment->{TOTAL}) {
      $Equipment->{VLAN_SEL} = $html->form_select(
        'SERVER_VLAN',
        {
          SELECTED       => $FORM{SERVER_VLAN} || $Equipment->{SERVER_VLAN},
          SEL_LIST       => $server_vlan_list,
          SEL_KEY        => 'number',
          SEL_VALUE      => 'name',
          SEL_OPTIONS    => { '' => '--' },
          MAIN_MENU      => get_function_index('equipment_vlan'),
          MAIN_MENU_ARGV => ($Equipment->{SERVER_VLAN}) ? "ID=$Equipment->{SERVER_VLAN}" : '',
        }
      );
    }
    else {
      $Equipment->{VLAN_SEL} = $html->form_input('SERVER_VLAN', ($Equipment->{SERVER_VLAN} || q{}), { SIZE => 5 });
    }
    $Equipment->{INTERNET_VLAN} ||= q{};
    $Equipment->{TR_069_VLAN} ||= q{};
    $Equipment->{IPTV_VLAN} ||= q{};
    # Show map btn
    if ($Nas->{LOCATION_ID} && in_array('Maps', \@MODULES)) {

      load_module('Maps', $html);
      $Nas->{MAP_BTN} = maps_show_object_button($EQUIPMENT_MAPS_LAYER_ID, $Nas->{NAS_ID}, {
        GO_TO_MAP => 1,
        NAME      => $lang{MAP}
      });
    }

    $html->tpl_show(_include('equipment_info', 'Equipment'), { %{$Nas}, %{$Equipment}, %FORM });
  }
  if (defined($FORM{visual} && !$FORM{qindex})) {
    my $visual = $FORM{visual} || 0;
    my %attr = (
      NAS_INFO       => $Equipment,
      SNMP_COMMUNITY => $SNMP_COMMUNITY,
      DEBUG          => $FORM{DEBUG}
    );

    if ($visual == 6) {
      equipment_fdb({
        %attr,
        FDB => 1
      });
    }
    else {
      $FORM{SELECT} = 1;
      equipment_ports(
        {
          NAS_INFO       => $Equipment,
          SNMP_COMMUNITY => $SNMP_COMMUNITY
        }
      );
    }
  }
  return 1;
}

#********************************************************
=head2 equipment_search_form()

=cut
#********************************************************
sub equipment_search_form {

  $Equipment->{STATUS_SEL} = $html->form_select(
    'STATUS',
    {
      SELECTED    => $FORM{STATUS},
      SEL_HASH    => {
        0 => $lang{ENABLE},
        1 => $lang{DISABLE},
        2 => $lang{NOT_ACTIVE},
        3 => $lang{ERROR},
      },
      NO_ID       => 1,
      STYLE       => \@service_status_colors,
      SEL_OPTIONS => { '' => '--' },
    }
  );

  #  _bp('', $Equipment->{STATUS_SEL}, {HEADER=>1});

  $Equipment->{MODEL_SEL} = $html->form_select(
    'MODEL_ID',
    {
      SELECTED       => $Equipment->{MODEL_ID},
      SEL_LIST       => $Equipment->model_list({ COLS_NAME => 1, PAGE_ROWS => 500 }),
      SEL_VALUE      => 'vendor_name,model_name',
      NO_ID          => 1,
      SEL_OPTIONS    => { '' => '--' },
      MAIN_MENU      => get_function_index('equipment_model'),
      MAIN_MENU_ARGV => 'chg=' . ($Equipment->{MODEL_ID} || '')
    }
  );

  $Equipment->{NAS_GROUPS_SEL} = sel_nas_groups({ GID => $Nas->{GID} });

  form_search(
    {
      SEARCH_FORM       => $html->tpl_show(_include('equipment_search', 'Equipment'), { %{$Equipment}, %FORM },
        { OUTPUT2RETURN => 1 }),
      HIDDEN_FIELDS     => {},
      ADDRESS_FORM      => 1,
      PLAIN_SEARCH_FORM => 1
    }
  );

  if ($FORM{S_VLAN} || $FORM{C_VLAN}) {
    my $redirect_link = "?index=" . get_function_index('equipment_search_vlan');

    foreach my $key (keys %LIST_PARAMS) {
      $redirect_link .= "&$key=$LIST_PARAMS{$key}";
    }
    $html->redirect($redirect_link);
  }

  if ($FORM{USER_MAC}) {
    my $list = $Equipment->_list(
      {
        NAS_IP           => '_SHOW',
        NAS_NAME         => '_SHOW',
        MNG_HOST_PORT    => '_SHOW',
        NAS_MNG_USER     => '_SHOW',
        NAS_MNG_PASSWORD => '_SHOW',
        NAS_TYPE         => '_SHOW',
        SNMP_TPL         => '_SHOW',
        VENDOR_ID        => '_SHOW',
        TYPE_ID          => '_SHOW',
        VENDOR_NAME      => '_SHOW',
        %LIST_PARAMS,
        COLS_NAME        => 1,
        COLS_UPPER       => 1,
        PAGE_ROWS        => 100000
      }
    );

    foreach my $line (@{$list}) {
      my $SNMP_COMMUNITY = "$line->{nas_mng_password}\@" . (($line->{nas_mng_ip_port}) ? $line->{nas_mng_ip_port} : $line->{nas_ip});
      $line->{NAME} = $line->{vendor_name};
      equipment_fdb({
        SNMP_COMMUNITY => $SNMP_COMMUNITY,
        SNMP_TPL       => $line->{snmp_tpl},
        FILTER         => $FORM{USER_MAC},
        IP             => $line->{nas_ip},
        NAS_ID         => $line->{nas_id},
        VENDOR_ID      => $line->{vendor_id},
        NAS_INFO       => $line,
        EXT_INFO       => "ID: $line->{nas_id} NAME: $line->{nas_name}"
      });
    }
    return 1;
  }

  return 0;
}

#********************************************************
=head2 equipment_search_vlan()

=cut
#********************************************************
sub equipment_search_vlan {

  my $Nas_with_SVLAN = '';
  if ($FORM{S_VLAN}) {
    $Nas_with_SVLAN = $Equipment->_list({
      NAS_IP        => '_SHOW',
      SERVER_VLAN   => '_SHOW',
      NAS_NAME      => '_SHOW',
      MNG_HOST_PORT => '_SHOW',
      NAS_MNG_USER  => '_SHOW',
      STATUS        => '_SHOW',
      NAS_TYPE      => '_SHOW',
      TYPE_NAME     => '_SHOW',
      VENDOR_NAME   => '_SHOW',
      PORTS         => '_SHOW',
      SERVER_VLAN   => $FORM{S_VLAN},
      COLS_NAME     => 1,
      COLS_UPPER    => 1,
      PAGE_ROWS     => 100000,
    });
  }

  my $table = $html->table(
    {
      width      => '100%',
      cols_align => [ 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right' ],
      title      => [ 'Nas id', "$lang{NAME}", "$lang{VENDOR}",
        "$lang{TYPE}", "$lang{PORTS}", "IP", 'S-VLAN', 'C-VLAN' ],
      caption    => 'Server VLANS',
      ID         => 'SVLANS',
      DATA_TABLE => 1,
    }
  );

  my $CVLANS_button = '';

  if ($FORM{S_VLAN} && !$FORM{C_VLAN}) {
    foreach my $element (@$Nas_with_SVLAN) {
      $CVLANS_button = $html->button($lang{INFO}, "index=" . get_function_index("equipment_search_vlan")
        . "&S_VLAN=$element->{SERVER_VLAN}&SVLAN_NAS=$element->{NAS_ID}&TYPE=$element->{TYPE_NAME}", { class => 'show' });
      $table->addrow($element->{NAS_ID}, $element->{NAS_NAME}, $element->{VENDOR_NAME},
        $element->{TYPE_NAME}, $element->{PORTS}, $element->{NAS_IP}, $element->{SERVER_VLAN}, $CVLANS_button);
    }
    print $table->show();
  }
  elsif ($FORM{S_VLAN} && $FORM{C_VLAN}) {
    foreach my $element (@$Nas_with_SVLAN) {
      my $C_VLANS_LIST = '';
      if ($element->{TYPE_NAME} eq "Switch") {
        $C_VLANS_LIST = $Equipment->port_list({
          NAS_ID        => $element->{NAS_ID},
          VLAN          => $FORM{C_VLAN},
          PORT_COMMENTS => '_SHOW',
          STATUS        => '_SHOW',
          COLS_NAME     => 1,
          COLS_UPPER    => 1,
          PAGE_ROWS     => 100000,
        });
      }

      if ($element->{TYPE_NAME} eq "PON") {
        $C_VLANS_LIST = $Equipment->onu_list({
          NAS_ID     => $element->{NAS_ID},
          ONU_VLAN   => $FORM{C_VLAN} || '_SHOW',
          COLS_NAME  => 1,
          COLS_UPPER => 1,
          PAGE_ROWS  => 100000,
        });
      }

      if ($Equipment->{TOTAL}) {
        $CVLANS_button = $html->button($lang{INFO}, "index=" . get_function_index("equipment_search_vlan")
          . "&S_VLAN=$FORM{S_VLAN}&SVLAN_NAS=$element->{NAS_ID}&C_VLAN=$FORM{C_VLAN}&TYPE=$element->{TYPE_NAME}", { class => 'show' });
        $table->addrow($element->{NAS_ID}, $element->{NAS_NAME}, $element->{VENDOR_NAME},
          $element->{TYPE_NAME}, $element->{PORTS}, $element->{NAS_IP}, $element->{SERVER_VLAN}, $CVLANS_button);
      }
    }
    print $table->show();
  }
  elsif (!$FORM{S_VLAN} && $FORM{C_VLAN}) {
    my @Nas_array = ();
    my $C_VLANS_LIST = $Equipment->port_list_without_group_by({
      VLAN          => $FORM{C_VLAN},
      NAS_ID        => '_SHOW',
      PORT_COMMENTS => '_SHOW',
      STATUS        => '_SHOW',
      COLS_NAME     => 1,
      COLS_UPPER    => 1,
      PAGE_ROWS     => 100000,
    });

    my $Eq_total = $Equipment->{TOTAL};
    my $C_VLAN_2 = $Equipment->onu_list({
      NAS_ID     => "_SHOW",
      ONU_VLAN   => $FORM{C_VLAN} || '_SHOW',
      COLS_NAME  => 1,
      COLS_UPPER => 1,
      PAGE_ROWS  => 100000,
    });

    if ($Eq_total || $Equipment->{TOTAL}) {
      foreach my $element (@$C_VLANS_LIST) {
        if (!in_array($element->{NAS_ID}, \@Nas_array)) {
          push @Nas_array, $element->{NAS_ID};
        }
      }

      foreach my $element (@$C_VLAN_2) {
        if (!in_array($element->{NAS_ID}, \@Nas_array)) {
          push @Nas_array, $element->{NAS_ID};
        }
      }

      foreach my $element (@Nas_array) {
        $Nas_with_SVLAN = $Equipment->_list({
          NAS_IP        => '_SHOW',
          SERVER_VLAN   => '_SHOW',
          NAS_NAME      => '_SHOW',
          MNG_HOST_PORT => '_SHOW',
          NAS_MNG_USER  => '_SHOW',
          STATUS        => '_SHOW',
          NAS_TYPE      => '_SHOW',
          TYPE_NAME     => '_SHOW',
          VENDOR_NAME   => '_SHOW',
          PORTS         => '_SHOW',
          NAS_ID        => $element,
          COLS_NAME     => 1,
          COLS_UPPER    => 1,
          PAGE_ROWS     => 100000,
        });

        if ($Equipment->{TOTAL}) {
          $CVLANS_button = $html->button($lang{INFO}, "index=" . get_function_index("equipment_search_vlan")
            . "&SVLAN_NAS=$Nas_with_SVLAN->[0]{NAS_ID}&C_VLAN=$FORM{C_VLAN}&TYPE=$Nas_with_SVLAN->[0]{TYPE_NAME}", { class => 'show' });
          $table->addrow($Nas_with_SVLAN->[0]{NAS_ID}, $Nas_with_SVLAN->[0]{NAS_NAME}, $Nas_with_SVLAN->[0]{VENDOR_NAME},
            $Nas_with_SVLAN->[0]{TYPE_NAME}, $Nas_with_SVLAN->[0]{PORTS}, $Nas_with_SVLAN->[0]{NAS_IP}, $Nas_with_SVLAN->[0]{SERVER_VLAN}, $CVLANS_button);
        }
      }
    }
    print $table->show();
  }

  if ($FORM{S_VLAN} && !$FORM{C_VLAN}) {
    if (@$Nas_with_SVLAN) {
      my $cvalns_table = $html->table(
        {
          width      => '100%',
          cols_align => [ 'right', 'right', 'right', 'right', 'right', 'right', 'right', 'right' ],
          title      => [ 'Nas id', "$lang{NAME}", "IP", "$lang{PORT}", 'C-VLAN' ],
          caption    => 'All CVLANS',
          ID         => 'C_VLANS',
          DATA_TABLE => 1,
        }
      );
      foreach my $Nas_element (@$Nas_with_SVLAN) {
        if ($Nas_element->{TYPE_NAME} eq "Switch") {
          my $C_VLANS_LIST = $Equipment->cvlan_list({
            NAS_IP        => '_SHOW',
            SERVER_VLAN   => $FORM{S_VLAN} || "_SHOW",
            NAS_NAME      => '_SHOW',
            MNG_HOST_PORT => '_SHOW',
            NAS_MNG_USER  => '_SHOW',
            VENDOR_NAME   => '_SHOW',
            NAS_TYPE      => '_SHOW',
            NAME_TYPE     => $Nas_element->{TYPE_NAME},
            PORTS         => '_SHOW',
            NAS_ID        => '_SHOW',
            VLAN          => '_SHOW',
            PORT_COMMENTS => '_SHOW',
            PORT          => '_SHOW',
            COLS_NAME     => 1,
            COLS_UPPER    => 1,
            PAGE_ROWS     => 100000,
          });

          foreach my $element (@$C_VLANS_LIST) {
            $cvalns_table->addrow($element->{NAS_ID}, $element->{NAS_NAME}, $element->{NAS_IP}, $element->{PORT}, $element->{VLAN});
          }
        }
        if ($Nas_element->{TYPE_NAME} eq "PON") {
          my $C_VLANS_LIST = $Equipment->onu_list({
            NAS_ID      => "_SHOW",
            SERVER_VLAN => $FORM{S_VLAN} || "_SHOW",
            ONU_VLAN    => '_SHOW',
            OLT_PORT    => '_SHOW',
            NAS_NAME    => '_SHOW',
            COMMENTS    => '_SHOW',
            STATUS      => '_SHOW',

            COLS_NAME   => 1,
            COLS_UPPER  => 1,
            PAGE_ROWS   => 100000,
          });

          foreach my $element (@$C_VLANS_LIST) {
            $cvalns_table->addrow($element->{NAS_ID}, $element->{NAS_NAME}, $element->{NAS_IP}, $element->{DHCP_PORT}, $element->{VLAN});
          }
        }
      }
      print $cvalns_table->show();
    }
  }

  if ($FORM{SVLAN_NAS}) {
    my $cvalns_table = $html->table(
      {
        width      => '100%',
        cols_align => [ 'right', 'right', 'right', 'right' ],
        title      => [ 'Nas id', "$lang{PORT}", "$lang{COMMENTS}", 'C-VLAN' ],
        caption    => 'Clients VLANS',
        ID         => 'CVLANS',
        DATA_TABLE => 1,
      }
    );
    if ($FORM{TYPE} eq "Switch") {
      my $C_VLANS_LIST = $Equipment->port_list({
        NAS_ID        => $FORM{SVLAN_NAS},
        VLAN          => $FORM{C_VLAN} || '_SHOW',
        PORT_COMMENTS => '_SHOW',
        STATUS        => '_SHOW',
        COLS_NAME     => 1,
        COLS_UPPER    => 1,
        PAGE_ROWS     => 100000,
      });

      foreach my $element (@$C_VLANS_LIST) {
        $cvalns_table->addrow($element->{NAS_ID}, $element->{PORT}, $element->{PORT_COMMENTS}, $element->{VLAN});
      }
    }
    if ($FORM{TYPE} eq "PON") {
      my $C_VLANS_LIST = $Equipment->onu_list({
        NAS_ID     => $FORM{SVLAN_NAS},
        ONU_VLAN   => $FORM{C_VLAN} || '_SHOW',
        OLT_PORT   => '_SHOW',
        COMMENTS   => '_SHOW',
        STATUS     => '_SHOW',
        COLS_NAME  => 1,
        COLS_UPPER => 1,
        PAGE_ROWS  => 100000,
      });

      foreach my $element (@$C_VLANS_LIST) {
        $cvalns_table->addrow($element->{NAS_ID}, $element->{DHCP_PORT}, $element->{COMMENTS}, $element->{VLAN});
      }
    }

    print $cvalns_table->show();
  }

  return 1;
}


#********************************************************
=head2 equipment_add_form()

=cut
#********************************************************
sub equipment_add_form {

  if ($FORM{add}) {
    $FORM{NAS_TYPE} = 'other';
    $Nas->add({ %FORM, DOMAIN_ID => $admin->{DOMAIN_ID} });

    if (!$Nas->{errno}) {
      #$html->message('info', $lang{INFO}, $lang{ADDED} .' #'. $Nas->{NAS_ID} );
      $FORM{NAS_ID} = $Nas->{NAS_ID};
      $index = get_function_index('equipment_info');
      equipment_info();
      return 1;
    }
    else {
      _error_show($Nas);
    }
  }

  my %info = (
    ACTION     => 'add',
    ACTION_LNG => $lang{ADD}
  );

  require Control::Nas_mng;
  require Control::Address_mng;

  $info{ADDRESS_FORM} = form_address();
  $info{NAS_GROUPS_SEL} = sel_nas_groups({ GID => $Nas->{GID} });

  $html->tpl_show(_include('equipment_add', 'Equipment'), \%info);

  return 1;
}


#********************************************************
=head2 equipment_import()

=cut
#********************************************************
sub equipment_import {

  return 1;
}

#********************************************************
=head2 equipment_list()

=cut
#********************************************************
sub equipment_list {

  $Equipment->{ACTION} = 'add';
  $Equipment->{ACTION_LNG} = $lang{ADD};

  if ($FORM{search_form}) {
    if (equipment_search_form()) {
      return 1;
    }
  }
  elsif ($FORM{add_form}) {
    equipment_add_form();
    return 1;
  }
  elsif ($FORM{import}) {
    equipment_import();
    return 1;
  }

  result_former({
    INPUT_DATA      => $Equipment,
    FUNCTION        => '_list',
    DEFAULT_FIELDS  => 'NAS_NAME,STATUS,NAS_IP,MODEL_NAME,VENDOR_NAME,TYPE_NAME,PORTS,ADDRESS_FULL',
    FUNCTION_FIELDS => 'equipment_traps:show:nas_id,equipment_info:change:nas_id,equipment_info:del:nas_id;&del=nas_id',
    MAP             => 1,
    EXTRA_TABS      => { 'Netmaps:network_map' => "index=" . $index . "&NET_MAP=1" },
    EXT_TITLES      => {
      nas_ip         => 'IP',
      nas_name       => $lang{NAME},
      address_full   => $lang{ADDRESS},
      mac            => 'MAC',
      online         => 'Online',
      nas_id         => 'Nas ID',
      system_id      => 'System id',
      status         => $lang{STATUS},
      model_name     => $lang{MODEL},
      vendor_name    => $lang{VENDOR},
      type_name      => $lang{TYPE},
      ports          => $lang{PORTS},
      nas_group_name => $lang{GROUPS},
      last_activity  => $lang{LAST_ACTIVITY}
    },
    SKIP_USER_TITLE => 1,
    TABLE           => {
      width   => '100%',
      caption => "$lang{EQUIPMENT}",
      qs      => $pages_qs,
      ID      => 'EQUIPMENT_MODELS',
      EXPORT  => 1,
      #IMPORT  => 1,
      MENU    => "$lang{ADD}:add_form=1&index=" . $index . ':add' . ";$lang{SEARCH}:index=$index&search_form=1:search",
    },
    MAKE_ROWS       => 1,
    MODULE          => 'EQUIPMENT',
    TOTAL           => 1
  });

  return 1;
}

#********************************************************
=head2 snmp_hash($h_ref, $host, $name, $oid, $inst, $value)

=cut
#********************************************************
sub snmp_hash {
  my ($h_ref, $host, $name, $oid, $inst, $value) = @_;

  my %ipNetToMediaType = (
    1 => 'other',
    2 => 'invalid',
    3 => 'dynamic',
    4 => 'static'
  );

  if (!defined($name)) {
    $name = '';
  }

  if ($name =~ /ifPhysAddress/ || $name =~ /ipNetToMediaPhysAddress/) {
    my $mac = '';
    map {$mac .= sprintf("%02X:", $_)} unpack "CCCCCC", $value;
    $mac =~ s/:$//g;
    $value = $mac;
  }
  elsif ($name =~ /ipNetToMediaType/) {
    $value = $ipNetToMediaType{$value};
  }

  $h_ref->{$name}->{$inst} = $value;

  return $h_ref;
}

#********************************************************
=head2 equipment_vlans($attr) - Show VLANs

  Arguments:
    $attr
      IP

=cut
#********************************************************
sub equipment_vlans {
  my ($attr) = @_;

  if (!defined($FORM{sub}) || $FORM{sub} eq '') {
    $FORM{sub} = 1;
  }
  #=== NAV TABS ===
  if ((!$attr->{NAS_INFO}->{TYPE_ID} || ($attr->{NAS_INFO}->{TYPE_ID} && $attr->{NAS_INFO}->{TYPE_ID} != 4)) && !$conf{SKIP_UNNUMBERED_TAB}) {
    my $active_button->{$FORM{sub}} = { class => 'active' };
    my %nav_tabs = (
      1 => "Vlans",
      2 => "Unnumbered vlans",
    );

    my $buttons = '';
    foreach (sort {$a <=> $b} keys(%nav_tabs)) {
      $buttons .= $html->li($html->button($nav_tabs{$_}, "index=$index&visual=$FORM{visual}&NAS_ID=$FORM{NAS_ID}&sub=$_"), $active_button->{$_})
    }
    print $html->element('ul', $buttons, { class => 'nav nav-tabs' });
  }
  #=== NAV TABS END ===

  if ($FORM{sub} == 2) {
    $Equipment->_info($FORM{NAS_ID});
    $html->tpl_show(_include('equipment_unnum_vlan', 'Equipment'), { %FORM, PORTS => $Equipment->{PORTS} });

    if ($FORM{vlans_add}) {
      if ($FORM{ports_from} & !$FORM{ports_to}) {
        $FORM{ports_to} = $FORM{ports_from};
      }
      if ($FORM{ports_to} > $Equipment->{PORTS}) {
        $FORM{ports_to} = $Equipment->{PORTS};
      }
      if ($FORM{ports_from} && $FORM{ports_to} && $FORM{ports_from} <= $Equipment->{PORTS} &&
        $FORM{ports_from} <= $FORM{ports_to}) {

        my $port_num = $FORM{ports_from};
        my $vlan_num = $FORM{VLAN};

        $Equipment->port_list({
          NAS_ID    => $FORM{NAS_ID},
          LIST2HASH => 'port,id',
        });

        _error_show($Equipment);
        my $list_hash = $Equipment->{list_hash};
        while ($port_num <= $FORM{ports_to}) {
          if (!exists $list_hash->{$port_num}) {
            $Equipment->port_add({
              NAS_ID   => $FORM{NAS_ID},
              PORT     => $port_num++,
              VLAN     => $vlan_num++,
              COMMENTS => 'auto created vlan',
            });
          }
          else {
            $Equipment->port_change({
              ID   => $list_hash->{$port_num},
              PORT => $port_num++,
              VLAN => $vlan_num++,
            });
          }
        }
      }
    }

    my $port_list = $Equipment->port_list({
      NAS_ID     => $FORM{NAS_ID},
      VLAN       => '!0',
      SORT       => 1,
      PAGE_ROWS  => 100,
      COLS_UPPER => 1,
      COLS_NAME  => 1,
    });

    my $table = $html->table(
      {
        width   => '100%',
        caption => "Unnumbered VLANS",
        title   => [ $lang{PORTS}, "Vlan" ],
        qs      => "&visual=$FORM{visual}&NAS_ID=$FORM{NAS_ID}&sub=2",
        ID      => 'UNNUMBERED VLANS',
      }
    );

    foreach my $port (@$port_list) {
      $table->addrow($port->{PORT}, $port->{VLAN});
    }
    print $table->show();
  }
  else {
    my $vlan_hash;

    if (!$Equipment->{STATUS}) {
      $vlan_hash = get_vlans({ %$attr, DEBUG => $FORM{DEBUG} });
    }
    else {
      $html->message('warn', $lang{INFO}, "$lang{STATUS} $service_status[$Equipment->{STATUS}]");
    }

    my $table = $html->table(
      {
        width   => '100%',
        caption => "VLANS:" . ($attr->{IP} || '') . (($attr->{EXT_INFO}) ? ' ' . $html->button(
          $attr->{EXT_INFO},
          "index=" . get_function_index('form_nas') . "&NAS_ID=" . $attr->{NAS_ID}) : ''),
        title   => [ 'VLAN', $lang{NAME}, "$lang{PORTS}" ],
        qs      => "&visual=$FORM{visual}&NAS_ID=$FORM{NAS_ID}",
        ID      => 'EQUIPMENT_SNMP_INFO',
      }
    );

    foreach my $key (sort {$a <=> $b} keys %{$vlan_hash}) {
      $table->addrow($key,
        $vlan_hash->{$key}{NAME},
        $vlan_hash->{$key}{PORTS});
    }
    print $table->show();
  }

  return 1;
}

#********************************************************
=head2 equipment_mac_log($attr)

  Arguments:
    $attr
      NAS_ID

=cut
#********************************************************
sub equipment_mac_log {
  my ($attr) = @_;
  #  $index = get_function_index( 'equipment_mac_log' );
  my $nas_id = $attr->{NAS_ID} || $FORM{NAS_ID} || '';
  $FORM{visual} //= '';

  if ($FORM{del}) {
    if ($FORM{del} eq 'all' && $FORM{COMMENTS}) {
      $Equipment->mac_log_del({
        ALL => 1,
      });
    }
    elsif ($FORM{del} eq 'nas' && $FORM{COMMENTS}) {
      $Equipment->mac_log_del({
        NAS_ID => $FORM{NAS_ID}
      });
    }
    elsif ($FORM{del} eq 'mac') {
      $Equipment->mac_log_del({
        ID => $FORM{ID}
      });
    }
    if (!_error_show($Equipment)) {
      $html->message('info', $lang{INFO}, $lang{DELETED});
    }
  }
  if (!$nas_id || !$FORM{visual}) {
    my $list = $Equipment->_list({ NAS_NAME => '_SHOW', COLS_NAME => 1, PAGE_ROWS => 10000 });
    my %nas_hash = ();
    foreach my $line (@$list) {
      $nas_hash{ $line->{nas_id} } = $line->{nas_name};
    }
    form_search({
      SIMPLE        => {
        'IP'                      => 'IP',
        'NAS_ID'                  => { '' => $lang{ALL}, %nas_hash },
        'MAC'                     => 'MAC',
        'VLAN'                    => 'VLAN',
        $lang{PORT}               => 'PORT',
        "$lang{PORT} $lang{NAME}" => 'PORT_NAME'
      },
      HIDDEN_FIELDS => {
        visual => $FORM{visual}
      },
    });
  }
  my %EXT_DATA = ();
  if ($nas_id) {
    $LIST_PARAMS{NAS_ID} = $nas_id;
    $LIST_PARAMS{PAGE_ROWS} = '10000000';
  }
  else {
    %EXT_DATA = (
      FUNCTION_FIELDS => 'equipment_mac_log:del:id;&del=mac',
      #       MAKE_ROWS       => 1,
      SEARCH_FORMER   => 1,
      #       TOTAL           => 1,
      SKIP_PAGES      => 0,
    );
  }

  my ($table, $list) = result_former({
    INPUT_DATA      => $Equipment,
    FUNCTION        => 'mac_log_list',
    DEFAULT_FIELDS  => 'MAC,IP,VLAN,PORT,PORT_NAME,DATETIME,REM_TIME,NAME',
    SKIP_PAGES      => 1,
    HIDDEN_FIELDS   => 'NAS_ID,ID',
    SKIP_USER_TITLE => 1,
    EXT_TITLES      => {
      user_nas  => 'USER/NAS',
      mac       => 'MAC',
      ip        => 'IP',
      vlan      => 'Vlan',
      port_name => "$lang{PORT} $lang{NAME}",
      port      => $lang{PORT},
      datetime  => $lang{DATE},
      rem_time  => "$lang{DATE} $lang{DISABLE}",
      name      => $lang{NAS},
    },
    TABLE           => {
      width            => '100%',
      caption          => "MAC",
      EXPORT           => 1,
      qs               => "$pages_qs&visual=$FORM{visual}",
      SHOW_COLS_HIDDEN => {
        visual => $FORM{visual},
        NAS_ID => $nas_id,
      },
      ID               => 'EQUIPMENT_MACS_LIST',
      MENU             => ($nas_id) ? '' : "$lang{SEARCH}:index=$index&search_form=1:search",
      header           => $html->button("$lang{DEL} $lang{ALL}", "index=$index&del=" . (($nas_id) ? 'nas' : 'all')
        . (($nas_id) ? "&NAS_ID=$nas_id" : q{}) . (($FORM{visual}) ? "&visual=$FORM{visual}" : q{}),
        { MESSAGE => "$lang{DEL} $lang{ALL}?", class => 'btn btn-default' }),

    },
    %EXT_DATA
  });

  #  return 1 if (!$nas_id);
  $used_ports = $attr->{USED_PORTS};

  if (!$used_ports) {
    $used_ports = equipments_get_used_ports({
      FULL_LIST => 1,
    });
  }

  my @cols = ();
  if ($table->{COL_NAMES_ARR}) {
    @cols = @{$table->{COL_NAMES_ARR}};
  }
  my @all_rows = ();
  my $used_info = equipments_get_used_ports({
    FULL_LIST => 1,
  });

  foreach my $line (@$list) {
    my @row = ();
    for (my $i = 0; $i <= $#cols; $i++) {
      my $col_id = $cols[$i];
      last if ($col_id eq 'id');
      next if ($col_id eq 'nas_id');
      if ($col_id eq 'user_nas') {
        if ($used_info->{ $line->{mac} }) {
          push @row, show_used_info($used_info->{ $line->{mac} });
        }
        else {
          push @row, $line->{$col_id};
        }
      }
      else {
        push @row, $line->{$col_id};
      }
    }
    push @row, $html->button($lang{DEL}, "index=$index&del=mac&ID=$line->{id}&NAS_ID=$nas_id&visual=$FORM{visual}",
      { MESSAGE => "$lang{DEL} MAC: $line->{mac}?", class => 'del' });
    push @all_rows, \@row;
  }

  print result_row_former({
    table => $table,
    ROWS  => \@all_rows,
    #    TOTAL_SHOW => 1,
  });

  return 1 if (!$nas_id);

  print '<script>$(function () {
  var $table = $(\'#EQUIPMENT_MACS_LIST_\');
  var correct = ($table.find(\'tbody\').find(\'tr\').first().find(\'td\').length - $table.find(\'thead th\').length );
  for (var i = 0; i < correct; i++) {
    $table.find(\'thead th:last-child\').after(\'<th></th>\');
  }
    var dataTable = $("#EQUIPMENT_MACS_LIST_")
      .DataTable({
        "language": {
          paginate: {
              first:    "«",
              previous: "‹",
              next:     "›",
              last:     "»",
          },
          "zeroRecords":    "' . $lang{NOT_EXIST} . '",
          "lengthMenu":     "' . $lang{SHOW} . ' _MENU_",
          "search":         "' . $lang{SEARCH} . ':",
          "info":           "' . $lang{SHOWING} . ' _START_ - _END_ ' . $lang{OF} . ' _TOTAL_ ",
          "infoEmpty":      "' . $lang{SHOWING} . ' 0",
          "infoFiltered":   "(' . $lang{TOTAL} . ' _MAX_)",
        },
        "ordering": false,
        "lengthMenu": [[25, 50, -1], [25, 50, "' . $lang{ALL} . '"]]
      });
//            var column = dataTable.column("0");
            // Toggle the visibility
//            column.visible( ! column.visible() );
    });</script>';

  return 1;
}

#********************************************************
=head2 equipment_fdb($attr) - Show FDB table

  Arguments:
    $attr

=cut
#********************************************************
sub equipment_fdb {
  my ($attr) = @_;

  #1 - other - запись, полученная не одним из перечисленных ниже способов
  #2 - invalid - неправильная запись, неактивная в данный момент
  #3 - learned - запись, изученная динамически
  #4 - self – это MAC-адрес коммутатора
  #5 - mgmt - запись, созданная статически
  #  my @status_hash = (
  #    1 => 'other',
  #    2 => 'invalid',
  #    3 => 'learned',
  #    4 => 'self',
  #    5 => 'mgmt',
  #  );
  my $nas_id = $attr->{NAS_ID} || $FORM{NAS_ID} || q{};

  if ($attr->{NAS_INFO}) {
    $attr->{VERSION} //= $attr->{NAS_INFO}->{SNMP_VERSION};
  }

  if ($FORM{NAS_ID}) {
    my @header_arr = (
      "$lang{LOG}:index=$index&visual=6&NAS_ID=$nas_id",
      "FDB:index=$index&visual=6&NAS_ID=$nas_id&fdb=1",
    );

    print $html->table_header(\@header_arr, { TABS => 1 });
  }

  if ($FORM{fdb}) {
    my $fdb_list;
    if (!$Equipment->{STATUS}) {
      $fdb_list = get_fdb($attr);
    }

    my $visual = $FORM{visual} || '';
    my $table = $html->table(
      {
        width   => '100%',
        caption => "$lang{RESULT}:" . ($attr->{IP} || q{}) . (($attr->{EXT_INFO}) ? ' ' . $html->button(
          $attr->{EXT_INFO},
          "index=" . get_function_index('form_nas') . "&NAS_ID=" . $nas_id) : ''), # . " $SNMP_COMMUNITY",
        title   => [ 'ID', "$lang{PORT} $lang{NAME}", 'MAC', 'VLAN', 'USER/NAS' ],
        qs      => "&visual=$visual&NAS_ID=" . $nas_id,
        ID      => 'EQUIPMENT_FDB_LIST',
      }
    );

    my %ports_macs = ();

    foreach my $key (sort keys %$fdb_list) {
      push @{$ports_macs{$fdb_list->{$key}{2}}},
        { MAC => $fdb_list->{$key}{1}, VLAN => (($fdb_list->{$key}{4}) ? " Vlan" . $fdb_list->{$key}{4} : ''), PORT_NAME => (($fdb_list->{$key}{5}) ? $fdb_list->{$key}{5} : ''), };
    }

    my $total_macs = 0;
    my $used_info = equipments_get_used_ports({
      #      GET_MAC => 1,
      FULL_LIST => 1,
    });

    foreach my $port (sort keys %ports_macs) {
      my $macs = '';

      foreach my $line (@{$ports_macs{$port}}) {
        my ($port_name, $mac, $vlan) = ($line->{PORT_NAME}, $line->{MAC}, $line->{VLAN});
        my $info = '';
        if ($used_info->{ $mac }) {
          $info .= show_used_info($used_info->{ $mac });
        }
        elsif ($used_info->{ uc $mac }) {
          $info .= show_used_info($used_info->{ uc $mac });
        }

        $macs .= $html->br();
        $table->addrow($port, $port_name, $html->color_mark($mac, 'code'), $vlan, $info);
      }
      #my $users = join($html->br(), @{ $ports_users{$port} } );
      $total_macs += $#{$ports_macs{$port}} + 1;
    }

    print $table->show();

    $table = $html->table(
      {
        width => '100%',
        rows  => [ [ "MAC $lang{TOTAL}:", $html->b($total_macs) ] ]
      }
    );
    print $table->show();
    if (!$attr->{FILTER}) {
      print '<script>$(function () {
      var table = $("#EQUIPMENT_FDB_LIST_")
        .DataTable({
          "language": {
            paginate: {
                first:    "«",
                previous: "‹",
                next:     "›",
                last:     "»",
            },
            "zeroRecords":    "' . $lang{NOT_EXIST} . '",
            "lengthMenu":     "' . $lang{SHOW} . ' _MENU_",
            "search":         "' . $lang{SEARCH} . ':",
            "info":           "' . $lang{SHOWING} . ' _START_ - _END_ ' . $lang{OF} . ' _TOTAL_ ",
            "infoEmpty":      "' . $lang{SHOWING} . ' 0",
            "infoFiltered":   "(' . $lang{TOTAL} . ' _MAX_)",
        },
        "ordering": false,
        "lengthMenu": [[25, 50, -1], [25, 50, "' . $lang{ALL} . '"]]
        });
      });</script>';
    }
  }
  else {
    equipment_mac_log({ NAS_ID => $FORM{NAS_ID} });
    return 1;
  }

  return 1;
}

#********************************************************
=head2 equipment_arp($attr) - Show ARP table

  Arguments:
    $attr

=cut
#********************************************************
sub equipment_arp {
  my ($attr) = @_;

  my $oid = '1.3.6.1.2.1.4.22';

  if ($attr->{NAS_INFO}) {
    $attr->{VERSION} //= $attr->{NAS_INFO}->{SNMP_VERSION};
  }
  if ($Equipment->{STATUS}) {
    $html->message('warn', $lang{INFO}, "$lang{STATUS} $service_status[$Equipment->{STATUS}]");
    return 1;
  }
  my $used_info = equipments_get_used_ports({
    FULL_LIST => 1,
  });

  my $timeout = $attr->{TIMEOUT} || 2;
  my $retries = $attr->{RETRIES} || 2;
  my $version = $attr->{VERSION} || 1;

  my ($snmp_community, $port, undef, $port3) = split(/:/, $attr->{SNMP_COMMUNITY} || q{});
  if ($port3) {
    $port = $port3;
  }
  elsif (!$port || in_array($port, [ 21, 22, 23, 1700, 3977 ])) {
    $port = 161;
  }
  #  my ($snmp_community, $port)=split(/:/, $attr->{SNMP_COMMUNITY});
  #  $port = 161 if (! $port || in_array($port, [ 22, 23, 1700, 3977 ]));
  $snmp_community .= ':' . $port . ":$timeout:$retries:1:$version";
  my %result = SNMP_util::snmpwalkhash($snmp_community, \&snmp_hash, $oid);

  if ($SNMP_Session::errmsg) {
    print $html->message('err', $lang{ERROR},
      ($SNMP_Session::suppress_warnings || '') . "/ $SNMP_Session::errmsg"
    );
  }

  my $table = $html->table(
    {
      width   => '100%',
      caption => "$lang{RESULT}:", # $SNMP_COMMUNITY",
      title   => [ 'MAC', 'IP', 'USER/NAS', $lang{TYPE}, 'IF index' ],
      ID      => 'EQUIPMENT_SNMP_ARP',
    }
  );

  my $rows_count = 0;

  foreach my $result_oid (sort keys %{$result{ipNetToMediaIfIndex}}) {
    if ($FORM{mac_info} && $FORM{mac_info} eq $result{ipNetToMediaPhysAddress}{$result_oid}) {
      $table->{rowcolor} = 'bg-success';
    }
    else {
      delete($table->{rowcolor});
    }
    $table->addrow(
      $html->button('',
        "index=$index&visual=3&NAS_ID=$FORM{NAS_ID}&mac_info=" . $result{ipNetToMediaPhysAddress}{$result_oid},
        { class => 'info' }) . $result{ipNetToMediaPhysAddress}{$result_oid},
      $result{ipNetToMediaNetAddress}{$result_oid},
      show_used_info($used_info->{ _mac_former($result{ipNetToMediaPhysAddress}{$result_oid}) }),
      $result{ipNetToMediaType}{$result_oid},
      $result{ipNetToMediaIfIndex}{$result_oid},
    );
    $rows_count++;
  }

  print $table->show();
  $table = $html->table(
    {
      width    => '100%',
      rowcolor => $_COLORS[0],
      rows     => [ [ "$lang{TOTAL}:", $html->b($rows_count) ] ]
    }
  );
  print $table->show();

  return 0;
}

#********************************************************
=head2 show_user_info($users_indetifier) - Show user information

 Arguments:
   $user_indetifier - User identifier (MAC, PORT, VLAN, NAS_ID)
   $attr
     INFO_DB - params_hash
     SHOW    - Show params (Default: LOGIN, FIO, ADDRESS)

 Returns:
   $user_info

=cut
#********************************************************
sub show_used_info {
  my ($data) = @_;
  my $info = '';
  my $service_status = sel_status({ HASH_RESULT => 1 });

  if ($data && ref $data eq 'ARRAY') {
    foreach my $line (@$data) {
      if ($line->{uid}) {
        my $user_status = $line->{login_status} || $line->{internet_status} || 0;
        my ($status, $color) = split(/:/, $service_status->{ $user_status });
        $color = ($user_status) ? "style='color:#$color'" : '';
        #my $online = ($line->{online}) ? "style='color:#4CAF50'" : "style='color:#F44336'";

        my $ip = $line->{online_ip} || int2ip($line->{ip_num}) || '0.0.0.0';
        my $mac = $line->{online_cid} || $line->{cid} || '--';
        my $describe =
          $lang{FIO} . ': ' . $html->link_former($line->{fio} || '--') . $html->br() .
            $lang{ADDRESS} . ': ' . $html->link_former($line->{address_full} || '--') . $html->br() .
            $lang{TARIF_PLAN} . ': ' . $html->link_former(($line->{tp_name}) ? "$line->{tp_id}:$line->{tp_name}" : '--') . $html->br() .
            $lang{STATUS} . ': <span ' . $color . '>' . $status . '</span></br>' .
            'IP: ' . $ip . (($line->{online}) ? ' <span style=\'color:#4CAF50\'>(Online)</span>' : ' <span style=\'color:#F44336\'>(Offline)</span>') . $html->br() .
            'MAC: ' . $mac . $html->br();
        my $btn .= $html->button("<i $color class='fa fa-user'></i>" . $line->{login}, "index=15&UID=$line->{uid}",
          { 'class' => 'btn btn-user btn-default' });
        $info .= $html->element('span', $btn . $html->br(), { 'data-tooltip' => $describe, 'data-tooltip-position' => 'left' });

      }
      elsif ($line->{nas_id}) {
        my $index = (defined($line->{status})) ? get_function_index('equipment_info') : get_function_index('form_nas');
        my $status = $line->{disable} || $line->{status} || 0;
        my $color = $service_status_colors[$status];
        my $describe =
          $lang{NAME} . ': ' . ($line->{nas_name} || '--') . $html->br() .
            $lang{STATUS} . ': <span style=\'color:' . $color . '\'>' . $service_status[$status] . '</span></br>';
        $describe .= $lang{TYPE} . ' NAS: ' . $line->{nas_type} . $html->br() if ($line->{nas_type});
        $describe .= $lang{TYPE} . ' NAS: ' . $line->{type_name} . $html->br() if ($line->{type_name});
        $describe .= $lang{VENDOR} . ': ' . $line->{vendor_name} . $html->br() if ($line->{vendor_name});
        $describe .= $lang{MODEL} . ': ' . $line->{model_name} . $html->br() if ($line->{model_name});
        $describe .= 'IP: ' . $line->{nas_ip} . $html->br() . 'MAC: ' . $line->{mac} . $html->br();

        if (defined($line->{status})) {
        }

        my $btn .= $html->button("<i $color class='fa fa-server'></i>$line->{nas_id} : " . ($line->{nas_name} || q{}),
          "index=" . $index . '&NAS_ID=' . $line->{nas_id}, { 'class' => 'btn btn-user btn-default' });
        $info .= $html->element('span', $btn . $html->br(), { 'data-tooltip' => $describe, 'data-tooltip-position' => 'left' });
      }
    }
  }
  $info = '--' if (!$info);

  return $info;
}

#********************************************************
=head2 equipment_snmp_info($attr)

  Arguments:
    $attr
      ARP
      FDB
      NAS_INFO

  Returns:

=cut
#********************************************************
sub equipment_snmp_info {
  my ($attr) = @_;

  #my $oid = '';

  if ($attr->{NAS_INFO}) {
    $attr->{VERSION} //= $attr->{NAS_INFO}->{SNMP_VERSION};
  }

  if ($FORM{mac_info}) {
    my $result = get_oui_info($FORM{mac_info});
    $html->message('info', $lang{INFO}, "MAC: $FORM{mac_info}\n $result");
  }

  if ($attr->{ARP}) {
    return equipment_arp($attr);
  }
  #  elsif ( $attr->{FDB} ){
  #    return equipment_fdb( $attr );
  #  }

  if ($Equipment->{STATUS}) {
    $html->message('warn', $lang{INFO}, "$lang{STATUS} $service_status[$Equipment->{STATUS}]");
    return 1;
  }

  #print $content;
  my $perl_scalar = _get_snmp_oid($Equipment->{SNMP_TPL});
  #  my $result = equipments_snmp_result( $perl_scalar, $attr );
  $Equipment->vendor_info($Equipment->{VENDOR_ID} || $attr->{VENDOR_ID});
  my $nas_type = '';
  if ($attr->{NAS_INFO}->{TYPE_ID} && $attr->{NAS_INFO}->{TYPE_ID} == 4) {
    $nas_type = equipment_pon_init($attr);
  }
  my @data = ('info', 'status');
  foreach my $type (@data) {
    my $table2;
    my $table_show = 0;
    my $charts = '';
    my $table = $html->table(
      {
        width        => '100%',
        caption      => "$type",
        caption_icon => 'fa fa-info',
        qs           => $pages_qs,
        ID           => 'EQUIPMENT_' . uc($type),
        LITE_HEADER  => 1
      }
    );
    $attr->{DATA_TYPE} = $type;
    my $result = equipments_snmp_result($perl_scalar, $attr);
    my %hash_info;
    foreach my $key (sort {$a cmp $b} keys %{$result}) {
      if (ref $result->{$key} eq 'ARRAY') {
        push @{$hash_info{title}}, $key;
        foreach my $line (@{$result->{$key}}) {
          my ($oid_, $value) = split(/:/, $line, 2);
          my $function = $perl_scalar->{$type}->{$key}->{PARSER};
          if ($function && defined(&{$function})) {
            ($oid_, $value) = &{\&$function}($line);
          }
          push @{$hash_info{$oid_}}, $value;
        }
      }
      else {
        my $function = $perl_scalar->{$type}->{$key}->{PARSER};
        if ($function && defined(&{$function})) {
          $result->{$key} = &{\&$function}($result->{$key});
        }
        $result->{$key} //= 0;
        if ($perl_scalar->{$type}->{$key}->{MULTIPLITER} && $result->{$key} =~ /\d+/) {
          $result->{$key} = $result->{$key} * $perl_scalar->{$type}->{$key}->{MULTIPLITER};
        }
        my $name = $lang{ $key } || $key;
        my $symbol = '';
        $symbol = '%' if (lc($key) =~ /cpu/);
        $symbol = 'MB' if (lc($key) =~ /ram/);
        $symbol = '&deg;C' if (lc($key) =~ /temp/);
        if ($type eq 'status') {
          $result->{$key} = 0 if ($result->{$key} !~ /\d+/);
          $charts .= '<div class="col-xs-6 col-md-4">' . $name .
            '</br><div class="chart easy-pie-chart" data-percent="' . $result->{$key} .
            '" style="font-size: 22px; font-weight: 400"> <span class="percent">' . $result->{$key} .
            '</span>' . $symbol . '</div><img x="1" y="116" width="148" height="15" preserveAspectRatio="none" ' .
            'src="/img/circle_bottom_back.png" ' .
            'style="vertical-align: 0px; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></img></div>';
        }
        else {
          $table->addrow($name, $result->{$key});
          $table_show = 1;
        }
      }
    }
    if (scalar(keys %hash_info)) {
      #my @titls = (' ');
      #my %title_hash = ();
      my @all_rows = ();
      foreach my $key (keys %hash_info) {
        if ($key eq 'title') {
          next;
        }
        unshift @{$hash_info{ $key }}, "$key";
        push @all_rows, $hash_info{ $key };
      }
      unshift @{$hash_info{title}}, "#";
      my $table_ = $html->table(
        {
          width       => '100%',
          caption     => "$type",
          title       => $hash_info{title},
          qs          => $pages_qs,
          ID          => 'EQUIPMENT_' . uc($type),
          LITE_HEADER => 1
        }
      );
      $table2 = result_row_former({
        table => $table_,
        ROWS  => \@all_rows,
      });
    }

    $Equipment->{ $type . '_table' } = (($table_show) ? $table->show() : '') . ((scalar(keys %hash_info)) ? $table2 : '');
    $Equipment->{ $type . '_charts' } = ($charts) ? $html->tpl_show(_include('equipment_status', 'Equipment'), { CHARTS => $charts, TITLE => $type }, { OUTPUT2RETURN => '1' }) : '';
  }
  $html->tpl_show(_include('equipment_monitoring', 'Equipment'), { %{$Equipment} });
}

#********************************************************
=head2 equipments_snmp_result($perl_scalar, $attr)

=cut
#********************************************************
sub equipments_snmp_result {
  my ($perl_scalar, $attr) = @_;
  my %result = ();
  my $type = $attr->{DATA_TYPE} || 'info';
  foreach my $key (sort keys %{$perl_scalar->{$type}}) {
    print "$key :  $perl_scalar->{$type}->{$key}->{OIDS}" if ($debug > 1);
    if ($perl_scalar->{$type}->{$key}->{WALK}) {
      my $value = snmp_get({ %{$attr}, OID => $perl_scalar->{$type}->{$key}->{OIDS}, WALK => 1 });
      $result{$key} = $value || q{};
    }
    else {
      my @oids_arr = split(/,/, $perl_scalar->{$type}->{$key}->{OIDS});
      foreach my $oid (@oids_arr) {
        my $value = snmp_get({ %{$attr}, OID => $oid });
        $result{$key} .= $value || q{};
      }
    }
  }

  return \%result;
}

#********************************************************
=head2 equipment_vlan($attr) - add,change,del and list vlans

  Arguments:


  Returns:

=cut
#********************************************************
sub equipment_vlan {

  my $action = 'add';
  my $button = $lang{ADD};

  if ($FORM{action} && $FORM{action} eq 'add') {

    $Equipment->vlan_add({ %FORM });

    if (!$Equipment->{errno}) {
      $html->message('success', "Vlan", "$lang{ADDED}");
    }
  }
  elsif ($FORM{action} && $FORM{action} eq 'change') {
    $Equipment->vlan_change({ ID => $FORM{id}, %FORM });

    if (!$Equipment->{errno}) {
      $html->message('success', "Vlan", "$lang{CHANGED}");
    }
  }

  if ($FORM{chg}) {
    $Equipment->vlan_info({ ID => $FORM{chg} });
  }
  elsif ($FORM{del}) {
    $Equipment->vlan_del({ ID => $FORM{del} });

    if (!$Equipment->{errno}) {
      $html->message('success', "Vlan", "$lang{DELETED}");
    }
  }

  _error_show($Equipment);

  $html->tpl_show(_include('equipment_vlan', 'Equipment'), {
    ACTION => ($FORM{chg}) ? 'change' : $action,
    BUTTON => ($FORM{chg}) ? $lang{CHANGE} : $button,
    INDEX  => $index,
    %$Equipment
  });

  result_former({
    INPUT_DATA      => $Equipment,
    FUNCTION        => 'vlan_list',
    BASE_FIELDS     => 4,
    DEFAULT_FIELDS  => "id, number, name, comments",
    FUNCTION_FIELDS => 'change, del',
    EXT_TITLES      => {
      'id'       => 'ID',
      'number'   => "$lang{NUMBER}",
      'name'     => "$lang{NAME}",
      'comments' => "$lang{COMMENTS}",
    },
    TABLE           => {
      width   => '100%',
      caption => "Vlans",
      qs      => $pages_qs,
      ID      => 'EQUIPMENT_VLAN',
      header  => '',
      EXPORT  => 1,
      MENU    => "$lang{ADD}:index=" . get_function_index('equipment_vlan') . ':add;',
    },
    MAKE_ROWS       => 1,
    SEARCH_FORMER   => 1,
    MODULE          => 'Equipment',
    TOTAL           => 1
  });

  return 1;
}

#**********************************************************
=head2 equipment_user_graph($attr) - Shows equipment user graph for nas port

  Arguments:
    $attr
      ID - service id from internet

  Returns:
    true

=cut
#**********************************************************
sub equipment_user_graph {
  my ($attr) = @_;
  if($FORM{GRAPH}) {
    return 0 if (!$FORM{SERVICE_ID});

    my $service_info = $Internet->list({
      ID        => $FORM{SERVICE_ID},
      NAS_ID    => '_SHOW',
      PORT      => '_SHOW',
      COLS_NAME => 1 });
    return 0 if ($Internet->{errno});
    return 0 if (!$service_info->[0]->{nas_id} || ! $service_info->[0]->{port});

    $Nas->info({
      NAS_ID => $service_info->[0]->{nas_id},
      COLS_NAME => 1 });
    return 0 if ($Nas->{errno});

    my $nas_community = $Nas->{NAS_MNG_PASSWORD} || 'public';
    my $nas_ip = $Nas->{NAS_IP} || '';
    my $nas_port = $service_info->[0]->{port} || '';

    $html->tpl_show(_include('equipment_graph', 'Equipment'), {
      %$attr,
      NAS_COMMUNITY => $nas_community,
      NAS_IP        => $nas_ip,
      PORT          => $nas_port
    });
  }
  else {
    return $html->button('',
      "index=$index&UID=$attr->{UID}&SERVICE_ID=$attr->{ID}&GRAPH=1",
      { class => 'glyphicon glyphicon-stats' }
    );
  }

  return 1;
}


#**********************************************************
=head2 equipment_user_info($attr)

  Arguments:

    $attr
      NAS_ID
      PORTS
      VLAN

  Returns:

    $information_table

=cut
#**********************************************************
sub equipment_user_info {
  my ($attr) = @_;

  my @equipment_infos = ();
  my $nas_id = $attr->{NAS_ID} || 0;

  if ($nas_id) {
    my $list = $Equipment->_list({
      MNG_HOST_PORT    => '_SHOW',
      NAS_MNG_USER     => '_SHOW',
      NAS_NAME         => '_SHOW',
      NAS_MNG_PASSWORD => '_SHOW',
      NAS_IP           => '_SHOW',
      TYPE_ID          => '_SHOW',
      TYPE_NAME        => '_SHOW',
      VENDOR_ID        => '_SHOW',
      VENDOR_NAME      => '_SHOW',
      SNMP_TPL         => '_SHOW',
      SNMP_VERSION     => '_SHOW',
      PORT_SHIFT       => '_SHOW',
      STATUS           => '_SHOW',
      NAS_ID           => $nas_id,
      COLS_NAME        => 1
    });

    if ($Equipment->{TOTAL} && $Equipment->{TOTAL} > 0) {
      my $Nas_info = $list->[0];
      if ($Nas_info->{status} && $Nas_info->{status} != 5) {
        return 123;
      }

      my $SNMP_COMMUNITY = ($Nas_info->{nas_mng_password} || '')
        . '@'
        . ($Nas_info->{nas_mng_ip_port} || $Nas_info->{nas_ip} || '');

      my %snmp_info = (
        DESCRIBE  => '.1.3.6.1.2.1.1.1.0',
        SYSTEM_ID => '.1.3.6.1.2.1.1.5.0',
        UPTIME    => '.1.3.6.1.2.1.1.3.0',
      );

      my @sequence = ('SYSTEM_ID', 'DESCRIBE', 'UPTIME');

      if ($conf{EQUIPMENT_SW_INFO_FIELDS}) {
        %snmp_info = %{Abills::Base::cfg2hash($conf{EQUIPMENT_SW_INFO_FIELDS})};
        @sequence = keys %snmp_info;
      }

      my $count = 0;

      push @equipment_infos, [ $Nas_info->{type_name}, ($Nas_info->{nas_name} || q{})
        . $html->button($lang{INFO}, "NAS_ID=$nas_id&index=" . get_function_index('equipment_info'),
        { ICON => 'glyphicon glyphicon-info-sign' })
        . $html->button('MAC log', "index=" . get_function_index('equipment_info')
        . "&visual=6&search=1&NAS_ID=$nas_id&PORT=" . ($attr->{PORT} || q{}) . "&VLAN=" . ($attr->{VLAN} || q{}),
        { class => 'btn btn-xs btn-default' })
        . equipment_user_graph($attr)
      ];

      foreach my $snmp_id (@sequence) {
        my $snmp_result = snmp_get({
          %{$attr},
          VERSION        => $Nas_info->{snmp_version},
          SNMP_COMMUNITY => $SNMP_COMMUNITY,
          OID            => $snmp_info{$snmp_id},
          TIMEOUT        => 1,
          SILENT         => ($FORM{DEBUG}) ? undef : 1
        });

        if (!$snmp_result && $count > 1) {
          return $html->message('err', $lang{ERR_NOT_RESPONSE}
            . ' NAS_ID: ' . $nas_id . "\n" . ($Nas_info->{nas_mng_ip_port} || q{})
            . ' ' . $html->button('', "NAS_ID=$nas_id&index=" . get_function_index('equipment_info'),
            { ICON => 'glyphicon glyphicon-info-sign' }), '', { OUTPUT2RETURN => 1 });
          last;
        }
        elsif ($snmp_result) {
          push @equipment_infos, [ ($lang{$snmp_id}) ? $lang{$snmp_id} : $snmp_id, $snmp_result ];
          #                  . (($snmp_id eq 'SYSTEM_ID') ? $html->button( '', "NAS_ID=$nas_id&index=".get_function_index('equipment_info'),
          #                  { ICON => 'glyphicon glyphicon-info-sign' } )
          #                  . $html->button('MAC log', "index=". get_function_index('equipment_info')
          #                    . "&visual=6&search=1&NAS_ID=$nas_id&PORT=". ($attr->{PORT} || q{}) ."&VLAN=". ($attr->{VLAN} || q{}),
          #                  { class => 'btn btn-xs btn-default' })  : q{})
          #            ];
        }
        $count++;
      }

      # Type
      push @equipment_infos, [ $lang{TYPE}, ($Nas_info->{type_id} == 4) ? 'PON' : $Nas_info->{type_id} ];
      if ($Nas_info->{type_id} == 4) {
        my $onu_list = $Equipment->onu_list({
          ONU_DHCP_PORT => $attr->{PORT},
          NAS_ID        => $nas_id || '',
          ONU_ID        => '_SHOW',
          ONU_SNMP_ID   => '_SHOW',
          MAC_SERIAL    => '_SHOW',
          NAS_NAME      => '_SHOW',
          COLS_NAME     => 1
        });

        $FORM{TEST_DISTANCE} = 1;

        if ($Equipment->{TOTAL}) {
          my $onu_id = $onu_list->[0]->{onu_snmp_id};
          my $snmp_onu_id = $onu_list->[0]->{id};
          my $result = pon_onu_state($onu_id, {
            VENDOR_ID      => $Nas_info->{vendor_id},
            SNMP_COMMUNITY => $SNMP_COMMUNITY,
            ONU_SNMP_ID    => $snmp_onu_id,
            PON_TYPE       => $onu_list->[0]->{pon_type},
            VERSION        => $Nas_info->{snmp_version},
            NAS_ID         => $nas_id || '',
            OUTPUT2RETURN  => 1,
            QUICK          => 1,
            BRANCH         => $onu_list->[0]->{branch},
            ONU_ID         => $onu_list->[0]->{onu_id},
            ONU_SERIAL     => $onu_list->[0]->{mac_serial},
            SHOW_FIELDS    => $conf{EQUIPMENT_ONU_INFO_FIELDS},
            %$attr
          });
          @equipment_infos = @{$result};
          #return $result;
        }
      }
      else {
        equipment_port_info({
          SNMP_COMMUNITY  => $SNMP_COMMUNITY,
          VERSION         => $Nas_info->{snmp_version},
          PORT            => $attr->{PORT},
          EQUIPMENT_INFOS => \@equipment_infos,
          TEST_DISTANCE   => $FORM{TEST_DISTANCE},
          PORT_SHIFT      => $Nas_info->{PORT_SHIFT},
          SNMP_TPL        => $Nas_info->{snmp_tpl} #($Nas_info->{snmp_tpl}) ? _get_snmp_oid( $Nas_info->{snmp_tpl} ) : undef
        });
      }
    }
  }

  #  if (@equipment_infos) {
  #    push @equipment_infos, [ "Native VLAN", $attr->{VLAN} ];
  #  }

  my $table = $html->table({
    rows => \@equipment_infos,
    ID   => 'EQUIPMENT_USER_INFO'
  });

  return $table->show({ OUTPUT2RETURN => 1 });
}

#**********************************************************
=head2 equipment_maps_layers()

=cut
#**********************************************************
sub equipment_maps_layers {
  return {
    LAYERS      => [ {
      id         => 7,
      name       => 'EQUIPMENT',
      lang_name  => $lang{EQUIPMENT},
      module     => 'Equipment',
      structure  => 'MARKER',
      clustering => 1
    }, {
      id         => 20,
      name       => 'PON',
      lang_name  => "PON",
      module     => 'Equipment',
      structure  => 'MARKER',
      clustering => 1
    }
    ],
    EXPORT_FUNC => {
      $EQUIPMENT_MAPS_LAYER_ID => 'equipment_equipment_maps',
      $PON_MAPS_LAYER_ID       => 'equipment_pon_maps',
    }
  }
}

#**********************************************************
=head2 equipment_equipment_maps()

=cut
#**********************************************************
sub equipment_equipment_maps {
  my $equipment_list = $Equipment->_list(
    {
      NAS_ID      => '_SHOW',
      LOCATION_ID => '_SHOW',
      COORDX      => '_SHOW',
      COORDY      => '_SHOW',
      COLS_NAME   => 1,
      PAGE_ROWS   => 10000,
    }
  );
  _error_show($Equipment);

  # Tell Maps we want to get infowindow from Equipment module
  $FORM{INFO_MODULE} = 'Equipment';

  # To prevent showing few points on same position, we are stacking info in one single block
  my %showed_equipment = ();

  my @export_arr = ();
  foreach my $point (@{$equipment_list}) {
    next if (!($point->{coordy} && $point->{coordx}) || $showed_equipment{$point->{location_id}});

    $showed_equipment{$point->{location_id}} = 1;
    my $equipment_info = maps_load_info({ LOCATION_ID => $point->{location_id}, TYPE => 'NAS' });

    my $info = $equipment_info->{HTML} || '';
    my $count = $equipment_info->{COUNT} || 0;
    my $color = $equipment_info->{COLOR} || 'green';

    my $tpl = qq{
            {
             "MARKER": {
                  "ID"       : $point->{nas_id},
                  "COORDX"   : $point->{coordy},
                  "COORDY"   : $point->{coordx},
                  "INFO"     : "$info",
                  "TYPE"     : "nas_$color",
                  "COUNT"    :  $count
                },
             "LAYER_ID" : $EQUIPMENT_MAPS_LAYER_ID
            }
    };

    push @export_arr, $tpl;
  }

  if ($FORM{EXPORT_LIST}) {
    return join(", ", @export_arr);
  }

  return join(";", map {"ObjectsArray[ObjectsArray.length] = $_ ;"} @export_arr);
}

#**********************************************************
=head2 equipment_equipment_maps()

=cut
#**********************************************************
sub equipment_pon_maps {
  my $equipment_list = $Equipment->onu_list({
    LOCATION_ID => '_SHOW',
    LOGIN       => '_SHOW',
    RX_POWER    => '_SHOW',
    NAS_NAME    => '_SHOW',
    MAPS_COORDS => '_SHOW',

    COLS_NAME   => 1,
    PAGE_ROWS   => 100000,
  });
  _error_show($Equipment);

  # Tell Maps we want to get infowindow from Equipment module
  $FORM{INFO_MODULE} = 'Equipment';

  # To prevent showing few points on same position, we are stacking info in one single block
  my %showed_equipment = ();

  my @export_arr = ();
  my $count = 0;
  foreach my $point (@{$equipment_list}) {
    next if (!($point->{build_id} && $point->{maps_coords}));
    my ($coordy, $coordx) = split(/:/, $point->{maps_coords});

    if (!($coordx eq "0.00000000000000" && $coordy eq "0.00000000000000")) {

      if ($showed_equipment{$point->{maps_coords}}) {
        $coordx = $coordx + 0.000005 * ++$showed_equipment{$point->{maps_coords}};
      }
      else {
        $showed_equipment{$point->{maps_coords}} = 1;
      }

      my $color = 'normal';
      my $panel_color = "success";
      if (!$point->{rx_power} || $point->{rx_power} == 65535) {
        $color = "off";
        $panel_color = "default";
      }
      elsif ($point->{rx_power} > 0) {
        $color = "off";
        $panel_color = "default";
      }
      elsif ($point->{rx_power} < -8 || $point->{rx_power} > -27) {
        $color = "normal";
        $panel_color = "success";
      }
      elsif ($point->{rx_power} > -8 || $point->{rx_power} < -30) {
        $color = "not_normal";
        $panel_color = "danger";
      }
      else {
        $color = "off";
        $panel_color = "default";
      }

      my $user = $users->info(0, { LOGIN => "$point->{login}" });
      my $link = "$lang{LOGIN}:<a href='index.cgi?index=15&UID=$user->{UID}' target='_blank'> $point->{login}</a>";
      my $tb = "<div class='panel panel-$panel_color'>".
        "<div class='panel-heading'><h3 class='panel-title'>$link</h3></div>".
        "<ul class='list-group'>".
        "<li class='list-group-item'>$lang{SIGNAL}: $point->{rx_power}</li>".
        "<li class='list-group-item'>$lang{ADDRESS}: $point->{address_street},$point->{address_build}</li>".
        "</ul>".
        "</div>";
      my $info = "<div class='panel-group'>$tb</div>";

      $count++;

      my $tpl = qq{
            {
             "MARKER": {
                  "ID"       : $point->{nas_id}$count,
                  "COORDX"   : $coordx,
                  "COORDY"   : $coordy,
                  "INFO"     : "$info",
                  "TYPE"     : "pon_$color"
                },
             "LAYER_ID" : $PON_MAPS_LAYER_ID
            }
    };

      push @export_arr, $tpl;
    }
  }

  if ($FORM{EXPORT_LIST}) {
    return join(", ", @export_arr);
  }

  return join(";", map {"ObjectsArray[ObjectsArray.length] = $_ ;"} @export_arr);
}

#**********************************************************
=head2 equipment_location_info()

=cut
#**********************************************************
sub equipment_location_info {
  my ($attr) = @_;

  my $location_id = $attr->{LOCATION_ID};

  my $equipment_info_list = $Equipment->_list({
    LOCATION_ID => $location_id,
    COLS_NAME   => 1,
    NAS_NAME    => '_SHOW',
    NAS_IP      => '_SHOW',
    NAS_ID      => '_SHOW',
    STATUS      => '_SHOW',
    MODEL_NAME  => '_SHOW',
    MAC         => '_SHOW',
  });
  return {} if _error_show($Equipment);

  my $index = get_function_index('equipment_info');
  my %colors = (0 => 'success', 1 => 'danger', 4 => 'warning');
  my $tb = '';
  my $st = 0;
  foreach my $key (@$equipment_info_list) {
    $st = $st + $key->{status};
    my $link = "<a href='index.cgi?index=$index&NAS_ID=$key->{nas_id}'>$key->{nas_name}</a>";
    $tb .= "<div class='panel panel-$colors{$key->{status} || 0}'>
  			<div class='panel-heading'><h3 class='panel-title'>$link</h3></div>
  			<ul class='list-group'>
  				<li class='list-group-item'>IP: $key->{nas_ip}</li>
  				<li class='list-group-item'>$lang{MODEL}: $key->{model_name}</li>
  			</ul>
  			</div>";
  }
  my $group = "<div class='panel-group'>$tb</div>";
  return {
    HTML  => $group,
    COLOR => ($st > 0) ? 'fire' : 'green',
    COUNT => 1
  }
}


#**********************************************************
=head2 equipment_show_log(NAS_ID)

=cut
#**********************************************************
sub equipment_show_log {
  #my ($nas_id) = @_;

  unless ($FORM{NAS_ID}) {return 0;}

  $Nas->info({ NAS_ID => $FORM{NAS_ID} });
  my $nas_ip = $Nas->{NAS_IP};

  $pages_qs = "&visual=$FORM{visual}&NAS_ID=$FORM{NAS_ID}";

  my @File = '';
  my $file_name = "nas.log";
  my $file_dir = $var_dir . '/log/nas_logs/';
  $file_dir =~ (s/\s//g);

  if (defined($FORM{grep})) {
    if ($FORM{grep} !~ /^([\w\s\:\-\+\.\,\\\/]*)$/) {
      $html->message('err', $lang{ERROR}, "Forbidden symbol in '$FORM{grep}'.\n");
      return 0;
    }
    my $search_string = '';
    if ($FORM{all_logs}) {
      $search_string = $FORM{grep};
      $pages_qs .= "&all_logs=checked"
    }
    else {
      $search_string = "$nas_ip.*$FORM{grep}|$FORM{grep}.*$nas_ip";
    }
    @File = `grep -E '$search_string' $file_dir$file_name`;
    $pages_qs .= "&grep=$FORM{grep}";
  }
  else {
    @File = `grep '$nas_ip ' $file_dir$file_name`;
  }

  @File = reverse @File;

  my $table = $html->table(
    {
      caption       => "$file_name",
      qs            => $pages_qs,
      pages         => scalar(@File),
      recs_on_page  => 50,
      title_plain   => [ "timestamp", "host", "facility", "msg" ],
      width         => '100%',
      ID            => 'LOGS_TABLE',
      EXPORT        => 1,
      OUTPUT2RETURN => 1
    });

  my $page = $FORM{pg} || 0;
  my $row_num = 1;

  foreach my $log_line (@File) {
    if ($row_num <= $page) {
      $row_num++;
      next;
    }
    elsif ($row_num > $page + 50) {
      last;
    }

    my ($timeStamp, $log) = unpack 'A15 A*', $log_line;
    my (undef, $host, $facility, $msg) = split(/\s+/, $log, 4);
    if ($facility eq 'last') {
      $facility = '';
      $msg = 'last ' . $msg;
    }
    $table->addrow($timeStamp, $host, $facility, $msg);
    $row_num++;
  }
  my %params = ();

  $params{LOG_FILE} = $table->show();
  $params{VISUAL} = $FORM{visual};
  $params{NAS_ID} = $FORM{NAS_ID};
  $html->tpl_show(_include('equipment_form_text_search', 'Equipment'), { %params, %FORM });

  return 1;
}

#**********************************************************
=head2 equipment_search($attr) - Global search submodule

  Arguments:
    $attr
      SEARCH_TEXT
      DEBUG

  Returs:
     TRUE/FALSE

=cut
#**********************************************************
sub equipment_search {
  my ($attr) = @_;

  my @default_search = ('MAC', '_MULTI_HIT');

  my @qs = ();
  foreach my $field (@default_search) {
    $LIST_PARAMS{$field} = "*$attr->{SEARCH_TEXT}*";
    push @qs, "$field=*$attr->{SEARCH_TEXT}*";
  }

  if ($attr->{DEBUG}) {
    $Equipment->{debug} = 1;
  }

  $Equipment->mac_log_list({
    %LIST_PARAMS,
  });

  my @info = ();

  if ($Equipment->{TOTAL}) {
    push @info, {
      'TOTAL'        => $Equipment->{TOTAL},
      'MODULE'       => 'Equipment',
      'MODULE_NAME'  => $lang{EQUIPMENT},
      'SEARCH_INDEX' => get_function_index('equipment_mac_log')
        . '&' . join('&', @qs) . "&search=1"
    };
  }

  return \@info;
}

#**********************************************************
=head2 equipment_add_color()

=cut
#**********************************************************
sub equipment_add_color {
  my ($data) = @_;

  $data = 0 if ($data !~ /\d+/);

  if ($data < 30) {
    $data .= ':' . $html_color{dark_blue};
  }
  elsif ($data < 50) {
    $data .= ':' . $html_color{green};
  }
  elsif ($data < 80) {
    $data .= ':' . $html_color{orange};
  }
  else {
    $data .= ':' . $html_color{red};
  }

  return $data;
}

#**********************************************************
=head2 equipment_graph_info($attr) - Get info from nas for graph

=cut
#**********************************************************
sub equipment_graph_info {
  return 0 if (!$FORM{NAS_COMMUNITY} || !$FORM{NAS_IP} || !$FORM{PORT});
  my $time = time();
  my $snmp_result1 = snmp_get({
    SNMP_COMMUNITY => $FORM{NAS_COMMUNITY} . "@" .$FORM{NAS_IP},
    OID            => "1.3.6.1.2.1.31.1.1.1.10",
    SILENT         => 1,
    VERSION        => 2,
    WALK           => 1,
  });
  # my $local_time = strftime "%H:%M:%S",localtime;
  my ($port, $cout, $cin);
  foreach my $line (@$snmp_result1) {
    ($port, $cout) = split(':', $line);
    last if ($port == $FORM{PORT});
  }


  my $snmp_result2 = snmp_get({
    SNMP_COMMUNITY => $FORM{NAS_COMMUNITY} . "@" .$FORM{NAS_IP},
    OID            => "1.3.6.1.2.1.31.1.1.1.6",
    SILENT         => 1,
    VERSION        => 2,
    WALK           => 1,
  });

  foreach my $line (@$snmp_result2) {
    ($port, $cin) = split(':', $line);
    last if ($port == $FORM{PORT});
  }

  return 0 if(!$cin || !$cout);

  print "$cout:$cin:$time";

  return 1;
}

1;
